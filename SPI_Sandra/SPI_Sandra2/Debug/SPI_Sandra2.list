
SPI_Sandra2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016004  08008f40  08008f40  00009f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ef44  0801ef44  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ef44  0801ef44  0001ff44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ef4c  0801ef4c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ef4c  0801ef4c  0001ff4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ef50  0801ef50  0001ff50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  0801ef54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034b8  200000b4  0801f008  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000356c  0801f008  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140d0  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c3  00000000  00000000  000341b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bba  00000000  00000000  000381d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021379  00000000  00000000  00038d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177d2  00000000  00000000  0005a10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c528e  00000000  00000000  000718dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136b6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e8  00000000  00000000  00136bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000b4 	.word	0x200000b4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008f28 	.word	0x08008f28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000b8 	.word	0x200000b8
 800021c:	08008f28 	.word	0x08008f28

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f004 f980 	bl	80048b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f82c 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f8b4 	bl	8000728 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005c0:	f000 f874 	bl	80006ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 80005c4:	f007 f9ff 	bl	80079c6 <MX_TOF_Init>
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f003 ffed 	bl	80045a8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005ce:	2101      	movs	r1, #1
 80005d0:	2000      	movs	r0, #0
 80005d2:	f004 f81f 	bl	8004614 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <main+0x60>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005dc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <main+0x60>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <main+0x60>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <main+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <main+0x60>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005f6:	4906      	ldr	r1, [pc, #24]	@ (8000610 <main+0x60>)
 80005f8:	2000      	movs	r0, #0
 80005fa:	f004 f88b 	bl	8004714 <BSP_COM_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <main+0x58>
  {
    Error_Handler();
 8000604:	f000 f928 	bl	8000858 <Error_Handler>
  /* Infinite loop */
  while(1){

	//  HAL_Delay(2000);
	//  printf("No error");
	 MX_TOF_Process();
 8000608:	f007 f9e3 	bl	80079d2 <MX_TOF_Process>
 800060c:	e7fc      	b.n	8000608 <main+0x58>
 800060e:	bf00      	nop
 8000610:	200000d0 	.word	0x200000d0

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2238      	movs	r2, #56	@ 0x38
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f007 feba 	bl	800839c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000636:	2000      	movs	r0, #0
 8000638:	f004 fdbc 	bl	80051b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2340      	movs	r3, #64	@ 0x40
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000656:	2355      	movs	r3, #85	@ 0x55
 8000658:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fe56 	bl	800531c <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000676:	f000 f8ef 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f005 f954 	bl	8005940 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069e:	f000 f8db 	bl	8000858 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	@ 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000724 <MX_SPI2_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006e2:	2228      	movs	r2, #40	@ 0x28
 80006e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_SPI2_Init+0x74>)
 80006fa:	2207      	movs	r2, #7
 80006fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_SPI2_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_SPI2_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_SPI2_Init+0x74>)
 800070c:	f005 fb34 	bl	8005d78 <HAL_SPI_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 f89f 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000e0 	.word	0x200000e0
 8000724:	40003800 	.word	0x40003800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b44      	ldr	r3, [pc, #272]	@ (8000850 <MX_GPIO_Init+0x128>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a43      	ldr	r2, [pc, #268]	@ (8000850 <MX_GPIO_Init+0x128>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b41      	ldr	r3, [pc, #260]	@ (8000850 <MX_GPIO_Init+0x128>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b3e      	ldr	r3, [pc, #248]	@ (8000850 <MX_GPIO_Init+0x128>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a3d      	ldr	r2, [pc, #244]	@ (8000850 <MX_GPIO_Init+0x128>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b3b      	ldr	r3, [pc, #236]	@ (8000850 <MX_GPIO_Init+0x128>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <MX_GPIO_Init+0x128>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a37      	ldr	r2, [pc, #220]	@ (8000850 <MX_GPIO_Init+0x128>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <MX_GPIO_Init+0x128>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <MX_GPIO_Init+0x128>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a31      	ldr	r2, [pc, #196]	@ (8000850 <MX_GPIO_Init+0x128>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <MX_GPIO_Init+0x128>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_C_Pin|NCS_C_Pin|TOF_I2C_RST_Pin|LPn_C_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f241 0119 	movw	r1, #4121	@ 0x1019
 80007a4:	482b      	ldr	r0, [pc, #172]	@ (8000854 <MX_GPIO_Init+0x12c>)
 80007a6:	f004 fced 	bl	8005184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_C_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin;
 80007aa:	2310      	movs	r3, #16
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_C_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c2:	f004 fa7b 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_EN_C_Pin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin;
 80007c6:	2301      	movs	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_EN_C_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	481d      	ldr	r0, [pc, #116]	@ (8000854 <MX_GPIO_Init+0x12c>)
 80007de:	f004 fa6d 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_C_Pin */
  GPIO_InitStruct.Pin = NCS_C_Pin;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007f0:	2301      	movs	r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NCS_C_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4816      	ldr	r0, [pc, #88]	@ (8000854 <MX_GPIO_Init+0x12c>)
 80007fc:	f004 fa5e 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_I2C_RST_Pin LPn_C_Pin */
  GPIO_InitStruct.Pin = TOF_I2C_RST_Pin|LPn_C_Pin;
 8000800:	2318      	movs	r3, #24
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480f      	ldr	r0, [pc, #60]	@ (8000854 <MX_GPIO_Init+0x12c>)
 8000818:	f004 fa50 	bl	8004cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // Configure NCS_C as an Output
  GPIO_InitStruct.Pin = NCS_C_Pin;
 800081c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NCS_C_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <MX_GPIO_Init+0x12c>)
 8000836:	f004 fa41 	bl	8004cbc <HAL_GPIO_Init>

  // Ensure NCS is HIGH before starting SPI
  HAL_GPIO_WritePin(NCS_C_GPIO_Port, NCS_C_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0x12c>)
 8000842:	f004 fc9f 	bl	8005184 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
*/

/* USER CODE END MX_GPIO_Init_2 */
}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	@ 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <VL53L8CX_RdByte>:

uint8_t VL53L8CX_RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	460b      	mov	r3, r1
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	817b      	strh	r3, [r7, #10]
	return VL53L8CX_RdMulti(p_platform, RegisterAdress, p_value, 1);
 8000872:	8979      	ldrh	r1, [r7, #10]
 8000874:	2301      	movs	r3, #1
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f000 f939 	bl	8000af0 <VL53L8CX_RdMulti>
 800087e:	4603      	mov	r3, r0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <VL53L8CX_WrByte>:

uint8_t VL53L8CX_WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	807b      	strh	r3, [r7, #2]
 8000894:	4613      	mov	r3, r2
 8000896:	707b      	strb	r3, [r7, #1]
	return VL53L8CX_WrMulti(p_platform, RegisterAdress, &value, 1);
 8000898:	1c7a      	adds	r2, r7, #1
 800089a:	8879      	ldrh	r1, [r7, #2]
 800089c:	2301      	movs	r3, #1
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 f806 	bl	80008b0 <VL53L8CX_WrMulti>
 80008a4:	4603      	mov	r3, r0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <VL53L8CX_WrMulti>:
uint8_t VL53L8CX_WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80008be:	f844 0c1c 	str.w	r0, [r4, #-28]
 80008c2:	4608      	mov	r0, r1
 80008c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80008c8:	f841 2c24 	str.w	r2, [r1, #-36]
 80008cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80008d0:	f842 3c28 	str.w	r3, [r2, #-40]
 80008d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d8:	4602      	mov	r2, r0
 80008da:	f823 2c1e 	strh.w	r2, [r3, #-30]
	uint8_t status = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80008e4:	f102 0207 	add.w	r2, r2, #7
 80008e8:	7013      	strb	r3, [r2, #0]
	int32_t i = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80008f0:	6013      	str	r3, [r2, #0]
	uint32_t position = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80008f8:	f102 021c 	add.w	r2, r2, #28
 80008fc:	6013      	str	r3, [r2, #0]
	uint32_t data_size = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000904:	f102 0218 	add.w	r2, r2, #24
 8000908:	6013      	str	r3, [r2, #0]
	uint16_t    temp;
	uint8_t data_write[VL53L8CX_COMMS_CHUNK_SIZE + 2];

	for (position = 0; position < size; position += VL53L8CX_COMMS_CHUNK_SIZE)
 800090a:	2300      	movs	r3, #0
 800090c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000910:	f102 021c 	add.w	r2, r2, #28
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e0cf      	b.n	8000ab8 <VL53L8CX_WrMulti+0x208>
	{
		if (size > VL53L8CX_COMMS_CHUNK_SIZE)
 8000918:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000924:	d924      	bls.n	8000970 <VL53L8CX_WrMulti+0xc0>
		{
			if ((position + VL53L8CX_COMMS_CHUNK_SIZE) > size)
 8000926:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800092a:	f103 031c 	add.w	r3, r3, #28
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000934:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000938:	f852 2c28 	ldr.w	r2, [r2, #-40]
 800093c:	429a      	cmp	r2, r3
 800093e:	d20f      	bcs.n	8000960 <VL53L8CX_WrMulti+0xb0>
			{
				data_size = size - position;
 8000940:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000944:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8000948:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800094c:	f103 031c 	add.w	r3, r3, #28
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000958:	f102 0218 	add.w	r2, r2, #24
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e010      	b.n	8000982 <VL53L8CX_WrMulti+0xd2>
			} else
			{
				data_size = VL53L8CX_COMMS_CHUNK_SIZE;
 8000960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000964:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000968:	f102 0218 	add.w	r2, r2, #24
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e008      	b.n	8000982 <VL53L8CX_WrMulti+0xd2>
			}
		} else
		{
			data_size = size;
 8000970:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000974:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000978:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800097c:	f102 0218 	add.w	r2, r2, #24
 8000980:	6013      	str	r3, [r2, #0]
		}

		temp = RegisterAdress+position;
 8000982:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000986:	f103 031c 	add.w	r3, r3, #28
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	b29a      	uxth	r2, r3
 800098e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000992:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8000996:	4413      	add	r3, r2
 8000998:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800099c:	f102 0216 	add.w	r2, r2, #22
 80009a0:	8013      	strh	r3, [r2, #0]

		data_write[0] = SPI_WRITE_MASK(temp) >> 8;
 80009a2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009a6:	f103 0316 	add.w	r3, r3, #22
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009bc:	f803 2c14 	strb.w	r2, [r3, #-20]
		data_write[1] = SPI_WRITE_MASK(temp) & 0xFF;
 80009c0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009c4:	f103 0316 	add.w	r3, r3, #22
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009d0:	f803 2c13 	strb.w	r2, [r3, #-19]

		for (i=0; i<data_size; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	e01e      	b.n	8000a1c <VL53L8CX_WrMulti+0x16c>
		{
			data_write[i+2] = p_values[position + i];
 80009de:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009e8:	f103 031c 	add.w	r3, r3, #28
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80009f4:	f852 2c24 	ldr.w	r2, [r2, #-36]
 80009f8:	441a      	add	r2, r3
 80009fa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3302      	adds	r3, #2
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a08:	440b      	add	r3, r1
 8000a0a:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i=0; i<data_size; i++)
 8000a0e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000a26:	f102 0218 	add.w	r2, r2, #24
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8d6      	bhi.n	80009de <VL53L8CX_WrMulti+0x12e>
		}


		data_size += 2;
 8000a30:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a34:	f103 0318 	add.w	r3, r3, #24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000a40:	f102 0218 	add.w	r2, r2, #24
 8000a44:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(NCS_C_GPIO_Port, NCS_C_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a4c:	4826      	ldr	r0, [pc, #152]	@ (8000ae8 <VL53L8CX_WrMulti+0x238>)
 8000a4e:	f004 fb99 	bl	8005184 <HAL_GPIO_WritePin>

		status |= HAL_SPI_Transmit(&hspi2, data_write, data_size, 100*data_size);
 8000a52:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a56:	f103 0318 	add.w	r3, r3, #24
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a62:	f103 0318 	add.w	r3, r3, #24
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2164      	movs	r1, #100	@ 0x64
 8000a6a:	fb01 f303 	mul.w	r3, r1, r3
 8000a6e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a72:	3914      	subs	r1, #20
 8000a74:	481d      	ldr	r0, [pc, #116]	@ (8000aec <VL53L8CX_WrMulti+0x23c>)
 8000a76:	f005 fa52 	bl	8005f1e <HAL_SPI_Transmit>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000a82:	f103 0307 	add.w	r3, r3, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000a8e:	f102 0207 	add.w	r2, r2, #7
 8000a92:	7013      	strb	r3, [r2, #0]
	//	printf("HAL_SPI_Transmit statusin write: %d\n", status);
		HAL_GPIO_WritePin(NCS_C_GPIO_Port, NCS_C_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a9a:	4813      	ldr	r0, [pc, #76]	@ (8000ae8 <VL53L8CX_WrMulti+0x238>)
 8000a9c:	f004 fb72 	bl	8005184 <HAL_GPIO_WritePin>
	for (position = 0; position < size; position += VL53L8CX_COMMS_CHUNK_SIZE)
 8000aa0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000aa4:	f103 031c 	add.w	r3, r3, #28
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000ab2:	f102 021c 	add.w	r2, r2, #28
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000abc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000ac0:	f102 021c 	add.w	r2, r2, #28
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	f4ff af24 	bcc.w	8000918 <VL53L8CX_WrMulti+0x68>
	}

	return status;
 8000ad0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000ad4:	f103 0307 	add.w	r3, r3, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	200000e0 	.word	0x200000e0

08000af0 <VL53L8CX_RdMulti>:
uint8_t VL53L8CX_RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8000af6:	b081      	sub	sp, #4
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	f107 0420 	add.w	r4, r7, #32
 8000afe:	f844 0c14 	str.w	r0, [r4, #-20]
 8000b02:	4608      	mov	r0, r1
 8000b04:	f107 0120 	add.w	r1, r7, #32
 8000b08:	f841 2c1c 	str.w	r2, [r1, #-28]
 8000b0c:	f107 0220 	add.w	r2, r7, #32
 8000b10:	f842 3c20 	str.w	r3, [r2, #-32]
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f823 2c16 	strh.w	r2, [r3, #-22]
	uint8_t status = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b24:	f102 021f 	add.w	r2, r2, #31
 8000b28:	7013      	strb	r3, [r2, #0]


	uint32_t position = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b30:	f102 0218 	add.w	r2, r2, #24
 8000b34:	6013      	str	r3, [r2, #0]
	uint32_t data_size = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b3c:	f102 0214 	add.w	r2, r2, #20
 8000b40:	6013      	str	r3, [r2, #0]
	uint16_t    temp;
	uint8_t data_write[VL53L8CX_COMMS_CHUNK_SIZE + 2];

	for (position = 0; position < size; position += VL53L8CX_COMMS_CHUNK_SIZE)
 8000b42:	2300      	movs	r3, #0
 8000b44:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b48:	f102 0218 	add.w	r2, r2, #24
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e0b2      	b.n	8000cb6 <VL53L8CX_RdMulti+0x1c6>
	{
		if (size > VL53L8CX_COMMS_CHUNK_SIZE)
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b5c:	d924      	bls.n	8000ba8 <VL53L8CX_RdMulti+0xb8>
		{
			if ((position + VL53L8CX_COMMS_CHUNK_SIZE) > size)
 8000b5e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000b62:	f103 0318 	add.w	r3, r3, #24
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b6c:	f107 0220 	add.w	r2, r7, #32
 8000b70:	f852 2c20 	ldr.w	r2, [r2, #-32]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d20f      	bcs.n	8000b98 <VL53L8CX_RdMulti+0xa8>
			{
				data_size = size - position;
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8000b80:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000b84:	f103 0318 	add.w	r3, r3, #24
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b90:	f102 0214 	add.w	r2, r2, #20
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e010      	b.n	8000bba <VL53L8CX_RdMulti+0xca>
			} else
			{
				data_size = VL53L8CX_COMMS_CHUNK_SIZE;
 8000b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000ba0:	f102 0214 	add.w	r2, r2, #20
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e008      	b.n	8000bba <VL53L8CX_RdMulti+0xca>
			}
		} else
		{
			data_size = size;
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000bb0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bb4:	f102 0214 	add.w	r2, r2, #20
 8000bb8:	6013      	str	r3, [r2, #0]
		}

		temp = RegisterAdress+position;
 8000bba:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000bbe:	f103 0318 	add.w	r3, r3, #24
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 8000bce:	4413      	add	r3, r2
 8000bd0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bd4:	f102 0212 	add.w	r2, r2, #18
 8000bd8:	8013      	strh	r3, [r2, #0]

		data_write[0] = SPI_READ_MASK(temp) >> 8;
 8000bda:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000bde:	f103 0312 	add.w	r3, r3, #18
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	121b      	asrs	r3, r3, #8
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	f803 2c10 	strb.w	r2, [r3, #-16]
		data_write[1] = SPI_READ_MASK(temp) & 0xFF;
 8000bf6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000bfa:	f103 0312 	add.w	r3, r3, #18
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	f803 2c0f 	strb.w	r2, [r3, #-15]



		HAL_GPIO_WritePin(NCS_C_GPIO_Port, NCS_C_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c10:	4834      	ldr	r0, [pc, #208]	@ (8000ce4 <VL53L8CX_RdMulti+0x1f4>)
 8000c12:	f004 fab7 	bl	8005184 <HAL_GPIO_WritePin>
		status |= HAL_SPI_Transmit(&hspi2, data_write, 2, 0x1000);
 8000c16:	f107 0120 	add.w	r1, r7, #32
 8000c1a:	3910      	subs	r1, #16
 8000c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c20:	2202      	movs	r2, #2
 8000c22:	4831      	ldr	r0, [pc, #196]	@ (8000ce8 <VL53L8CX_RdMulti+0x1f8>)
 8000c24:	f005 f97b 	bl	8005f1e <HAL_SPI_Transmit>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c30:	f103 031f 	add.w	r3, r3, #31
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c3c:	f102 021f 	add.w	r2, r2, #31
 8000c40:	7013      	strb	r3, [r2, #0]
	//	printf("HAL_SPI_Transmit status in read: %d\n", status);

		status |= HAL_SPI_Receive(&hspi2, p_values + position, data_size, 100*data_size);
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8000c4a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c4e:	f103 0318 	add.w	r3, r3, #24
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	18d1      	adds	r1, r2, r3
 8000c56:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c5a:	f103 0314 	add.w	r3, r3, #20
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c66:	f103 0314 	add.w	r3, r3, #20
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2064      	movs	r0, #100	@ 0x64
 8000c6e:	fb00 f303 	mul.w	r3, r0, r3
 8000c72:	481d      	ldr	r0, [pc, #116]	@ (8000ce8 <VL53L8CX_RdMulti+0x1f8>)
 8000c74:	f005 fac9 	bl	800620a <HAL_SPI_Receive>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c80:	f103 031f 	add.w	r3, r3, #31
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c8c:	f102 021f 	add.w	r2, r2, #31
 8000c90:	7013      	strb	r3, [r2, #0]
	//	printf("HAL_SPI_receive status in read: %d\n", status);
		HAL_GPIO_WritePin(NCS_C_GPIO_Port, NCS_C_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c98:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <VL53L8CX_RdMulti+0x1f4>)
 8000c9a:	f004 fa73 	bl	8005184 <HAL_GPIO_WritePin>
	for (position = 0; position < size; position += VL53L8CX_COMMS_CHUNK_SIZE)
 8000c9e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000ca2:	f103 0318 	add.w	r3, r3, #24
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cac:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000cb0:	f102 0218 	add.w	r2, r2, #24
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000cbe:	f102 0218 	add.w	r2, r2, #24
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f4ff af41 	bcc.w	8000b50 <VL53L8CX_RdMulti+0x60>
	}

	return status;
 8000cce:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cd2:	f103 031f 	add.w	r3, r3, #31
 8000cd6:	781b      	ldrb	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8000cde:	3704      	adds	r7, #4
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	200000e0 	.word	0x200000e0

08000cec <VL53L8CX_SwapBuffer>:
}

void VL53L8CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e021      	b.n	8000d42 <VL53L8CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	440b      	add	r3, r1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	041b      	lsls	r3, r3, #16
 8000d14:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	440b      	add	r3, r1
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3203      	adds	r2, #3
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	440a      	add	r2, r1
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	4313      	orrs	r3, r2
		tmp = (
 8000d30:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3304      	adds	r3, #4
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3d9      	bcc.n	8000cfe <VL53L8CX_SwapBuffer+0x12>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <VL53L8CX_WaitMs>:

uint8_t VL53L8CX_WaitMs(
		VL53L8CX_Platform *p_platform,
               uint32_t TimeMs)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8000d62:	6838      	ldr	r0, [r7, #0]
 8000d64:	f003 fe18 	bl	8004998 <HAL_Delay>
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d86:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000daa:	f004 faa7 	bl	80052fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a20      	ldr	r2, [pc, #128]	@ (8000e5c <HAL_SPI_MspInit+0xa0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d139      	bne.n	8000e52 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dde:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <HAL_SPI_MspInit+0xa4>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e60 <HAL_SPI_MspInit+0xa4>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dea:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <HAL_SPI_MspInit+0xa4>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <HAL_SPI_MspInit+0xa4>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a19      	ldr	r2, [pc, #100]	@ (8000e60 <HAL_SPI_MspInit+0xa4>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_SPI_MspInit+0xa4>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e0e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e20:	2305      	movs	r3, #5
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <HAL_SPI_MspInit+0xa8>)
 8000e2c:	f003 ff46 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8000e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e42:	2305      	movs	r3, #5
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_SPI_MspInit+0xa8>)
 8000e4e:	f003 ff35 	bl	8004cbc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	@ 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40003800 	.word	0x40003800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	48000400 	.word	0x48000400

08000e68 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a08      	ldr	r2, [pc, #32]	@ (8000e98 <HAL_SPI_MspDeInit+0x30>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10a      	bne.n	8000e90 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_SPI_MspDeInit+0x34>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7e:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_SPI_MspDeInit+0x34>)
 8000e80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e84:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|SPI2_MOSI_Pin);
 8000e86:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <HAL_SPI_MspDeInit+0x38>)
 8000e8c:	f004 f898 	bl	8004fc0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40003800 	.word	0x40003800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f003 fd2f 	bl	800495c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f003 fbf2 	bl	80046f0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	HAL_EXTI_IRQHandler(GPIO_PIN_13);
 8000f0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f10:	f003 fea4 	bl	8004c5c <HAL_EXTI_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <BSP_GetTick>:
#include "stm32g4xx_nucleo_bus.h"
//SPI_HandleTypeDef hspi2;



int32_t BSP_GetTick(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f1c:	f003 fd30 	bl	8004980 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <BSP_SPI2_Init>:


 void BSP_SPI2_Init(SPI_HandleTypeDef* hspi2)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	  /* USER CODE BEGIN SPI2_Init 1 */

	  /* USER CODE END SPI2_Init 1 */
	  /* SPI2 parameter configuration*/
	  hspi2->Instance = SPI2;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a1e      	ldr	r2, [pc, #120]	@ (8000fac <BSP_SPI2_Init+0x84>)
 8000f34:	601a      	str	r2, [r3, #0]
	  hspi2->Init.Mode = SPI_MODE_MASTER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f3c:	605a      	str	r2, [r3, #4]
	  hspi2->Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
	  hspi2->Init.DataSize = SPI_DATASIZE_8BIT;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f4a:	60da      	str	r2, [r3, #12]
	  hspi2->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	611a      	str	r2, [r3, #16]
	  hspi2->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	615a      	str	r2, [r3, #20]
	  hspi2->Init.NSS = SPI_NSS_SOFT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f5e:	619a      	str	r2, [r3, #24]
	  hspi2->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2228      	movs	r2, #40	@ 0x28
 8000f64:	61da      	str	r2, [r3, #28]
	  hspi2->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
	  hspi2->Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
	  hspi2->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
	  hspi2->Init.CRCPolynomial = 7;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi2->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
	  hspi2->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fef3 	bl	8005d78 <HAL_SPI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <BSP_SPI2_Init+0x7a>
	  {
		  printf("erro while initilizing the spi2\n");
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <BSP_SPI2_Init+0x88>)
 8000f9a:	f007 f91f 	bl	80081dc <puts>
	    Error_Handler();
 8000f9e:	f7ff fc5b 	bl	8000858 <Error_Handler>
	  }
	  /* USER CODE BEGIN SPI2_Init 2 */

	  /* USER CODE END SPI2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40003800 	.word	0x40003800
 8000fb0:	08008f40 	.word	0x08008f40

08000fb4 <BSP_SPI2_DeInit>:
 void BSP_SPI2_DeInit(void)
 {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN BSP_SPI2_DeInit 0 */

   /* USER CODE END BSP_SPI2_DeInit 0 */
printf("Hey deinit\n");
 8000fb8:	4816      	ldr	r0, [pc, #88]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fba:	f007 f90f 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fc0:	f007 f90c 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fc4:	4813      	ldr	r0, [pc, #76]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fc6:	f007 f909 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fca:	4812      	ldr	r0, [pc, #72]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fcc:	f007 f906 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fd0:	4810      	ldr	r0, [pc, #64]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fd2:	f007 f903 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fd6:	480f      	ldr	r0, [pc, #60]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fd8:	f007 f900 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fde:	f007 f8fd 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fe2:	480c      	ldr	r0, [pc, #48]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fe4:	f007 f8fa 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fe8:	480a      	ldr	r0, [pc, #40]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000fea:	f007 f8f7 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000fee:	4809      	ldr	r0, [pc, #36]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000ff0:	f007 f8f4 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000ff4:	4807      	ldr	r0, [pc, #28]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000ff6:	f007 f8f1 	bl	80081dc <puts>
printf("Hey deinit\n");
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <BSP_SPI2_DeInit+0x60>)
 8000ffc:	f007 f8ee 	bl	80081dc <puts>

/* De-initialize the SPI peripheral */
   if (HAL_SPI_DeInit(&hspi2) != HAL_OK)
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <BSP_SPI2_DeInit+0x64>)
 8001002:	f004 ff64 	bl	8005ece <HAL_SPI_DeInit>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <BSP_SPI2_DeInit+0x5c>
   {
     Error_Handler();
 800100c:	f7ff fc24 	bl	8000858 <Error_Handler>
   }

   /* USER CODE BEGIN BSP_SPI2_DeInit 1 */
   // Optionally de-initialize GPIO pins or disable clocks here if needed
   /* USER CODE END BSP_SPI2_DeInit 1 */
 }
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	08008f60 	.word	0x08008f60
 8001018:	200000e0 	.word	0x200000e0

0800101c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e00a      	b.n	8001044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102e:	f3af 8000 	nop.w
 8001032:	4601      	mov	r1, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf0      	blt.n	800102e <_read+0x12>
  }

  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e009      	b.n	800107c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fbb1 	bl	80047d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf1      	blt.n	8001068 <_write+0x12>
  }
  return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b6:	605a      	str	r2, [r3, #4]
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_isatty>:

int _isatty(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f007 f986 	bl	8008438 <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2001c000 	.word	0x2001c000
 8001158:	00000400 	.word	0x00000400
 800115c:	20000144 	.word	0x20000144
 8001160:	20003570 	.word	0x20003570

08001164 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800118a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800118c:	f7ff ffea 	bl	8001164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f007 f945 	bl	8008444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ba:	f7ff f9f9 	bl	80005b0 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   r0, =_estack
 80011c0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80011cc:	0801ef54 	.word	0x0801ef54
  ldr r2, =_sbss
 80011d0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80011d4:	2000356c 	.word	0x2000356c

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <VL53L8A1_RANGING_SENSOR_GetCapabilities>:




int32_t VL53L8A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d903      	bls.n	80011f4 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011ec:	f06f 0301 	mvn.w	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e018      	b.n	8001226 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x4a>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x54>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	490e      	ldr	r1, [pc, #56]	@ (8001234 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x58>)
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	4610      	mov	r0, r2
 8001206:	4798      	blx	r3
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	da06      	bge.n	800121c <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x40>
  {

	  printf("Get Capability failed\n");
 800120e:	480a      	ldr	r0, [pc, #40]	@ (8001238 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x5c>)
 8001210:	f006 ffe4 	bl	80081dc <puts>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001214:	f06f 0304 	mvn.w	r3, #4
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e004      	b.n	8001226 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x4a>
  }
  else
  {

	  printf("Get Capability success\n");
 800121c:	4807      	ldr	r0, [pc, #28]	@ (800123c <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x60>)
 800121e:	f006 ffdd 	bl	80081dc <puts>
    ret = BSP_ERROR_NONE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000154 	.word	0x20000154
 8001234:	20000148 	.word	0x20000148
 8001238:	08008f6c 	.word	0x08008f6c
 800123c:	08008f84 	.word	0x08008f84

08001240 <VL53L8A1_RANGING_SENSOR_Start>:


int32_t VL53L8A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d903      	bls.n	8001258 <VL53L8A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001250:	f06f 0301 	mvn.w	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e018      	b.n	800128a <VL53L8A1_RANGING_SENSOR_Start+0x4a>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->Start(VL53L8A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <VL53L8A1_RANGING_SENSOR_Start+0x54>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	490e      	ldr	r1, [pc, #56]	@ (8001298 <VL53L8A1_RANGING_SENSOR_Start+0x58>)
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	4610      	mov	r0, r2
 800126a:	4798      	blx	r3
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	da06      	bge.n	8001280 <VL53L8A1_RANGING_SENSOR_Start+0x40>
  {
	  printf("Start failed \n");
 8001272:	480a      	ldr	r0, [pc, #40]	@ (800129c <VL53L8A1_RANGING_SENSOR_Start+0x5c>)
 8001274:	f006 ffb2 	bl	80081dc <puts>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001278:	f06f 0304 	mvn.w	r3, #4
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e004      	b.n	800128a <VL53L8A1_RANGING_SENSOR_Start+0x4a>
  }
  else
  {

	  printf("Start success\n");
 8001280:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <VL53L8A1_RANGING_SENSOR_Start+0x60>)
 8001282:	f006 ffab 	bl	80081dc <puts>
    ret = BSP_ERROR_NONE;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000154 	.word	0x20000154
 8001298:	20000148 	.word	0x20000148
 800129c:	08008f9c 	.word	0x08008f9c
 80012a0:	08008fac 	.word	0x08008fac

080012a4 <VL53L8A1_RANGING_SENSOR_ConfigProfile>:



int32_t VL53L8A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d903      	bls.n	80012bc <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012b4:	f06f 0301 	mvn.w	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	e018      	b.n	80012ee <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x4a>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x5c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	4910      	ldr	r1, [pc, #64]	@ (8001304 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x60>)
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	4610      	mov	r0, r2
 80012ce:	4798      	blx	r3
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da06      	bge.n	80012e4 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x40>
  {

	  printf("ConfigProfile failed\n");
 80012d6:	480c      	ldr	r0, [pc, #48]	@ (8001308 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x64>)
 80012d8:	f006 ff80 	bl	80081dc <puts>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80012dc:	f06f 0304 	mvn.w	r3, #4
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	e004      	b.n	80012ee <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x4a>
  }
  else
  {

	  printf("Config Profile success\n");
 80012e4:	4809      	ldr	r0, [pc, #36]	@ (800130c <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x68>)
 80012e6:	f006 ff79 	bl	80081dc <puts>
    ret = BSP_ERROR_NONE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  }
printf("ret = %d",ret);
 80012ee:	68f9      	ldr	r1, [r7, #12]
 80012f0:	4807      	ldr	r0, [pc, #28]	@ (8001310 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x6c>)
 80012f2:	f006 ff03 	bl	80080fc <iprintf>
  return ret;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000154 	.word	0x20000154
 8001304:	20000148 	.word	0x20000148
 8001308:	08008fbc 	.word	0x08008fbc
 800130c:	08008fd4 	.word	0x08008fd4
 8001310:	08008fec 	.word	0x08008fec

08001314 <VL53L8A1_RANGING_SENSOR_ReadID>:



int32_t VL53L8A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]


  //void *VL53L8A1_RANGING_SENSOR_CompObj[RANGING_SENSOR_INSTANCES_NBR] = {0};

      // Debug print the pointer value for the sensor object
         printf("Inside the Process let see VL53L8A1_RANGING_SENSOR_CompObj[%u] = %p\n", VL53L8A1_DEV_CENTER, VL53L8A1_RANGING_SENSOR_CompObj[Instance]);
 800131e:	4a17      	ldr	r2, [pc, #92]	@ (800137c <VL53L8A1_RANGING_SENSOR_ReadID+0x68>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	461a      	mov	r2, r3
 8001328:	2100      	movs	r1, #0
 800132a:	4815      	ldr	r0, [pc, #84]	@ (8001380 <VL53L8A1_RANGING_SENSOR_ReadID+0x6c>)
 800132c:	f006 fee6 	bl	80080fc <iprintf>



  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d906      	bls.n	8001344 <VL53L8A1_RANGING_SENSOR_ReadID+0x30>
  {
	  printf("To many instance\n");
 8001336:	4813      	ldr	r0, [pc, #76]	@ (8001384 <VL53L8A1_RANGING_SENSOR_ReadID+0x70>)
 8001338:	f006 ff50 	bl	80081dc <puts>
    ret = BSP_ERROR_WRONG_PARAM;
 800133c:	f06f 0301 	mvn.w	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	e016      	b.n	8001372 <VL53L8A1_RANGING_SENSOR_ReadID+0x5e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ReadID(VL53L8A1_RANGING_SENSOR_CompObj[VL53L8A1_DEV_CENTER], pId) < 0)
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <VL53L8A1_RANGING_SENSOR_ReadID+0x74>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <VL53L8A1_RANGING_SENSOR_ReadID+0x68>)
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	6839      	ldr	r1, [r7, #0]
 8001350:	4610      	mov	r0, r2
 8001352:	4798      	blx	r3
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	da06      	bge.n	8001368 <VL53L8A1_RANGING_SENSOR_ReadID+0x54>
  {
	  printf("ReadID fail\n");
 800135a:	480c      	ldr	r0, [pc, #48]	@ (800138c <VL53L8A1_RANGING_SENSOR_ReadID+0x78>)
 800135c:	f006 ff3e 	bl	80081dc <puts>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001360:	f06f 0304 	mvn.w	r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	e004      	b.n	8001372 <VL53L8A1_RANGING_SENSOR_ReadID+0x5e>
  }
  else
  {
	  printf("ReadID success\n");
 8001368:	4809      	ldr	r0, [pc, #36]	@ (8001390 <VL53L8A1_RANGING_SENSOR_ReadID+0x7c>)
 800136a:	f006 ff37 	bl	80081dc <puts>
    ret = BSP_ERROR_NONE;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000148 	.word	0x20000148
 8001380:	08008ff8 	.word	0x08008ff8
 8001384:	08009040 	.word	0x08009040
 8001388:	20000154 	.word	0x20000154
 800138c:	08009054 	.word	0x08009054
 8001390:	08009060 	.word	0x08009060

08001394 <VL53L8A1_RANGING_SENSOR_Init>:



int32_t VL53L8A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  printf("are you stuck in  VL53L8A1_RANGING_SENSOR_Init\n");
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <VL53L8A1_RANGING_SENSOR_Init+0x3c>)
 800139e:	f006 ff1d 	bl	80081dc <puts>

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d906      	bls.n	80013b6 <VL53L8A1_RANGING_SENSOR_Init+0x22>
  {

	  printf("Prob failed\n");
 80013a8:	480a      	ldr	r0, [pc, #40]	@ (80013d4 <VL53L8A1_RANGING_SENSOR_Init+0x40>)
 80013aa:	f006 ff17 	bl	80081dc <puts>
    ret = BSP_ERROR_WRONG_PARAM;
 80013ae:	f06f 0301 	mvn.w	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e006      	b.n	80013c4 <VL53L8A1_RANGING_SENSOR_Init+0x30>
  }
  else
  {
	  printf("Prob sucess\n");
 80013b6:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <VL53L8A1_RANGING_SENSOR_Init+0x44>)
 80013b8:	f006 ff10 	bl	80081dc <puts>
    ret = VL53L8CX_Probe(Instance);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f80d 	bl	80013dc <VL53L8CX_Probe>
 80013c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08009070 	.word	0x08009070
 80013d4:	080090a0 	.word	0x080090a0
 80013d8:	080090ac 	.word	0x080090ac

080013dc <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 80013e4:	2352      	movs	r3, #82	@ 0x52
 80013e6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L8A1_SPI_INIT;
 80013e8:	4b53      	ldr	r3, [pc, #332]	@ (8001538 <VL53L8CX_Probe+0x15c>)
 80013ea:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L8A1_SPI_DEINIT;
 80013ec:	4b53      	ldr	r3, [pc, #332]	@ (800153c <VL53L8CX_Probe+0x160>)
 80013ee:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L8A1_SPI_WRITEREG;
 80013f0:	4b53      	ldr	r3, [pc, #332]	@ (8001540 <VL53L8CX_Probe+0x164>)
 80013f2:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L8A1_SPI_READREG;
 80013f4:	4b53      	ldr	r3, [pc, #332]	@ (8001544 <VL53L8CX_Probe+0x168>)
 80013f6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L8A1_GETTICK;
 80013f8:	4b53      	ldr	r3, [pc, #332]	@ (8001548 <VL53L8CX_Probe+0x16c>)
 80013fa:	623b      	str	r3, [r7, #32]


  printf("Hayaaaa\n");
 80013fc:	4853      	ldr	r0, [pc, #332]	@ (800154c <VL53L8CX_Probe+0x170>)
 80013fe:	f006 feed 	bl	80081dc <puts>
  if (VL53L8CX_RegisterBusIO(&(VL53L8CXObj[Instance]), &IOCtx) != VL53L8CX_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f640 22dc 	movw	r2, #2780	@ 0xadc
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	4a50      	ldr	r2, [pc, #320]	@ (8001550 <VL53L8CX_Probe+0x174>)
 800140e:	4413      	add	r3, r2
 8001410:	f107 020c 	add.w	r2, r7, #12
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fb90 	bl	8003b3c <VL53L8CX_RegisterBusIO>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <VL53L8CX_Probe+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001422:	f06f 0304 	mvn.w	r3, #4
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
 8001428:	e080      	b.n	800152c <VL53L8CX_Probe+0x150>
  }
  else
  {
    VL53L8A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;//This means that VL53L8A1_RANGING_SENSOR_Drv now points to the VL53L8CX_RANGING_SENSOR_Driver structure.
 800142a:	4b4a      	ldr	r3, [pc, #296]	@ (8001554 <VL53L8CX_Probe+0x178>)
 800142c:	4a4a      	ldr	r2, [pc, #296]	@ (8001558 <VL53L8CX_Probe+0x17c>)
 800142e:	601a      	str	r2, [r3, #0]
    VL53L8A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L8CXObj[Instance]);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f640 22dc 	movw	r2, #2780	@ 0xadc
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	4a45      	ldr	r2, [pc, #276]	@ (8001550 <VL53L8CX_Probe+0x174>)
 800143c:	441a      	add	r2, r3
 800143e:	4947      	ldr	r1, [pc, #284]	@ (800155c <VL53L8CX_Probe+0x180>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Debug print the pointer value for the sensor object
       printf("Probe: VL53L8A1_RANGING_SENSOR_CompObj[%u] = %p\n", Instance, VL53L8A1_RANGING_SENSOR_CompObj[Instance]);
 8001446:	4a45      	ldr	r2, [pc, #276]	@ (800155c <VL53L8CX_Probe+0x180>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	461a      	mov	r2, r3
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4843      	ldr	r0, [pc, #268]	@ (8001560 <VL53L8CX_Probe+0x184>)
 8001454:	f006 fe52 	bl	80080fc <iprintf>


    if (VL53L8CX_ReadID(&(VL53L8CXObj[Instance]), &id) != VL53L8CX_OK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f640 22dc 	movw	r2, #2780	@ 0xadc
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4a3b      	ldr	r2, [pc, #236]	@ (8001550 <VL53L8CX_Probe+0x174>)
 8001464:	4413      	add	r3, r2
 8001466:	f107 0208 	add.w	r2, r7, #8
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fc09 	bl	8003c84 <VL53L8CX_ReadID>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <VL53L8CX_Probe+0xaa>
    {
    	printf("Not ssuccesfull communication\n");
 8001478:	483a      	ldr	r0, [pc, #232]	@ (8001564 <VL53L8CX_Probe+0x188>)
 800147a:	f006 feaf 	bl	80081dc <puts>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800147e:	f06f 0304 	mvn.w	r3, #4
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
 8001484:	e052      	b.n	800152c <VL53L8CX_Probe+0x150>
    }

  //  else {
    	//printf("Read Id succefull we have a communication congrats");
    //}
    else if (id != VL53L8CX_ID)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f24f 020c 	movw	r2, #61452	@ 0xf00c
 800148c:	4293      	cmp	r3, r2
 800148e:	d006      	beq.n	800149e <VL53L8CX_Probe+0xc2>
    {
    	printf("failed in id \n");
 8001490:	4835      	ldr	r0, [pc, #212]	@ (8001568 <VL53L8CX_Probe+0x18c>)
 8001492:	f006 fea3 	bl	80081dc <puts>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001496:	f06f 0306 	mvn.w	r3, #6
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
 800149c:	e046      	b.n	800152c <VL53L8CX_Probe+0x150>
    }
    else if (VL53L8A1_RANGING_SENSOR_Drv->Init(VL53L8A1_RANGING_SENSOR_CompObj[Instance]) != VL53L8CX_OK)
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <VL53L8CX_Probe+0x178>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	492d      	ldr	r1, [pc, #180]	@ (800155c <VL53L8CX_Probe+0x180>)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014ac:	4610      	mov	r0, r2
 80014ae:	4798      	blx	r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <VL53L8CX_Probe+0xe8>
    {

    	printf("failed in init \n");
 80014b6:	482d      	ldr	r0, [pc, #180]	@ (800156c <VL53L8CX_Probe+0x190>)
 80014b8:	f006 fe90 	bl	80081dc <puts>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80014bc:	f06f 0304 	mvn.w	r3, #4
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014c2:	e033      	b.n	800152c <VL53L8CX_Probe+0x150>
    }
    else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance],
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <VL53L8CX_Probe+0x178>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4924      	ldr	r1, [pc, #144]	@ (800155c <VL53L8CX_Probe+0x180>)
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014d2:	4927      	ldr	r1, [pc, #156]	@ (8001570 <VL53L8CX_Probe+0x194>)
 80014d4:	4610      	mov	r0, r2
 80014d6:	4798      	blx	r3
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <VL53L8CX_Probe+0x110>
                                                          &VL53L8A1_RANGING_SENSOR_Cap) != VL53L8CX_OK)
    {

    	printf("failed in capabiluty \n");
 80014de:	4825      	ldr	r0, [pc, #148]	@ (8001574 <VL53L8CX_Probe+0x198>)
 80014e0:	f006 fe7c 	bl	80081dc <puts>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80014e4:	f06f 0304 	mvn.w	r3, #4
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ea:	e01f      	b.n	800152c <VL53L8CX_Probe+0x150>
    }
    else
    {
printf("Id from the  intializing is ID: 0x%X\n", id);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4821      	ldr	r0, [pc, #132]	@ (8001578 <VL53L8CX_Probe+0x19c>)
 80014f2:	f006 fe03 	bl	80080fc <iprintf>
    	  printf("return value after initialized is = %d\n",ret);
 80014f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014f8:	4820      	ldr	r0, [pc, #128]	@ (800157c <VL53L8CX_Probe+0x1a0>)
 80014fa:	f006 fdff 	bl	80080fc <iprintf>
    	  printf("Read Id succefull we have a communication congrats\n");
 80014fe:	4820      	ldr	r0, [pc, #128]	@ (8001580 <VL53L8CX_Probe+0x1a4>)
 8001500:	f006 fe6c 	bl	80081dc <puts>
    	  VL53L8CX_ReadID(&(VL53L8CXObj[Instance]), &id);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f640 22dc 	movw	r2, #2780	@ 0xadc
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <VL53L8CX_Probe+0x174>)
 8001510:	4413      	add	r3, r2
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fbb3 	bl	8003c84 <VL53L8CX_ReadID>
    	  printf("SEcond ID read in initializing dod it change? ID : 0x%X\n", id);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4619      	mov	r1, r3
 8001522:	4818      	ldr	r0, [pc, #96]	@ (8001584 <VL53L8CX_Probe+0x1a8>)
 8001524:	f006 fdea 	bl	80080fc <iprintf>
      ret = BSP_ERROR_NONE;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

 // while(1);
  return ret;
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  //}


}
 800152e:	4618      	mov	r0, r3
 8001530:	3728      	adds	r7, #40	@ 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	08000f29 	.word	0x08000f29
 800153c:	08000fb5 	.word	0x08000fb5
 8001540:	08000889 	.word	0x08000889
 8001544:	08000865 	.word	0x08000865
 8001548:	08000f19 	.word	0x08000f19
 800154c:	080090b8 	.word	0x080090b8
 8001550:	20000168 	.word	0x20000168
 8001554:	20000154 	.word	0x20000154
 8001558:	20000004 	.word	0x20000004
 800155c:	20000148 	.word	0x20000148
 8001560:	080090c0 	.word	0x080090c0
 8001564:	080090f4 	.word	0x080090f4
 8001568:	08009114 	.word	0x08009114
 800156c:	08009124 	.word	0x08009124
 8001570:	20000158 	.word	0x20000158
 8001574:	08009134 	.word	0x08009134
 8001578:	0800914c 	.word	0x0800914c
 800157c:	08009174 	.word	0x08009174
 8001580:	0800919c 	.word	0x0800919c
 8001584:	080091d0 	.word	0x080091d0

08001588 <VL53L8A1_RANGING_SENSOR_GetDistance>:

int32_t VL53L8A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  int32_t ret=0;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
printf("I am here\n");
 8001596:	4815      	ldr	r0, [pc, #84]	@ (80015ec <VL53L8A1_RANGING_SENSOR_GetDistance+0x64>)
 8001598:	f006 fe20 	bl	80081dc <puts>
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d906      	bls.n	80015b0 <VL53L8A1_RANGING_SENSOR_GetDistance+0x28>
  {
	  printf("Wrong parameter for distance\n");
 80015a2:	4813      	ldr	r0, [pc, #76]	@ (80015f0 <VL53L8A1_RANGING_SENSOR_GetDistance+0x68>)
 80015a4:	f006 fe1a 	bl	80081dc <puts>
    ret = BSP_ERROR_WRONG_PARAM;
 80015a8:	f06f 0301 	mvn.w	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e018      	b.n	80015e2 <VL53L8A1_RANGING_SENSOR_GetDistance+0x5a>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->GetDistance(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 80015b0:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <VL53L8A1_RANGING_SENSOR_GetDistance+0x6c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4910      	ldr	r1, [pc, #64]	@ (80015f8 <VL53L8A1_RANGING_SENSOR_GetDistance+0x70>)
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	4610      	mov	r0, r2
 80015c2:	4798      	blx	r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da06      	bge.n	80015d8 <VL53L8A1_RANGING_SENSOR_GetDistance+0x50>
  {

	  printf("Could not get distance \n");
 80015ca:	480c      	ldr	r0, [pc, #48]	@ (80015fc <VL53L8A1_RANGING_SENSOR_GetDistance+0x74>)
 80015cc:	f006 fe06 	bl	80081dc <puts>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80015d0:	f06f 0304 	mvn.w	r3, #4
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e004      	b.n	80015e2 <VL53L8A1_RANGING_SENSOR_GetDistance+0x5a>
  }
  else
  {
	  printf("distnace is succefull bravo\n");
 80015d8:	4809      	ldr	r0, [pc, #36]	@ (8001600 <VL53L8A1_RANGING_SENSOR_GetDistance+0x78>)
 80015da:	f006 fdff 	bl	80081dc <puts>
    ret = BSP_ERROR_NONE;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0800920c 	.word	0x0800920c
 80015f0:	08009218 	.word	0x08009218
 80015f4:	20000154 	.word	0x20000154
 80015f8:	20000148 	.word	0x20000148
 80015fc:	08009238 	.word	0x08009238
 8001600:	08009250 	.word	0x08009250

08001604 <VL53L8A1_RANGING_SENSOR_Stop>:


int32_t VL53L8A1_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d903      	bls.n	800161a <VL53L8A1_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001612:	f06f 0301 	mvn.w	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e011      	b.n	800163e <VL53L8A1_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->Stop(VL53L8A1_RANGING_SENSOR_CompObj[Instance]) < 0)
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <VL53L8A1_RANGING_SENSOR_Stop+0x44>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	490a      	ldr	r1, [pc, #40]	@ (800164c <VL53L8A1_RANGING_SENSOR_Stop+0x48>)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001628:	4610      	mov	r0, r2
 800162a:	4798      	blx	r3
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	da03      	bge.n	800163a <VL53L8A1_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001632:	f06f 0304 	mvn.w	r3, #4
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e001      	b.n	800163e <VL53L8A1_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000154 	.word	0x20000154
 800164c:	20000148 	.word	0x20000148

08001650 <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	4608      	mov	r0, r1
 800165a:	4611      	mov	r1, r2
 800165c:	461a      	mov	r2, r3
 800165e:	4603      	mov	r3, r0
 8001660:	70fb      	strb	r3, [r7, #3]
 8001662:	460b      	mov	r3, r1
 8001664:	70bb      	strb	r3, [r7, #2]
 8001666:	4613      	mov	r3, r2
 8001668:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8001672:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	8839      	ldrh	r1, [r7, #0]
 800167e:	f7ff fa37 	bl	8000af0 <VL53L8CX_RdMulti>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4313      	orrs	r3, r2
 800168a:	73fb      	strb	r3, [r7, #15]
		status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	210a      	movs	r1, #10
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb61 	bl	8000d58 <VL53L8CX_WaitMs>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4313      	orrs	r3, r2
 800169e:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 80016a0:	7bbb      	ldrb	r3, [r7, #14]
 80016a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80016a4:	d904      	bls.n	80016b0 <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
			break;
 80016ae:	e01a      	b.n	80016e6 <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d909      	bls.n	80016ca <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 350e 	ldrb.w	r3, [r3, #1294]	@ 0x50e
 80016bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80016be:	d904      	bls.n	80016ca <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80016c6:	73fb      	strb	r3, [r7, #15]
			break;
 80016c8:	e00d      	b.n	80016e6 <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80016d0:	78bb      	ldrb	r3, [r7, #2]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	f893 250c 	ldrb.w	r2, [r3, #1292]	@ 0x50c
 80016da:	7e3b      	ldrb	r3, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	7f3a      	ldrb	r2, [r7, #28]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d1c5      	bne.n	8001672 <_vl53l8cx_poll_for_answer+0x22>

	//printf("Status: %d\n", status);

	return status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f107 020b 	add.w	r2, r7, #11
 8001706:	2106      	movs	r1, #6
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f8ab 	bl	8000864 <VL53L8CX_RdByte>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	4313      	orrs	r3, r2
 8001716:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8001718:	7afb      	ldrb	r3, [r7, #11]
 800171a:	b25b      	sxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	da10      	bge.n	8001742 <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f107 020a 	add.w	r2, r7, #10
 8001726:	2107      	movs	r1, #7
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f89b 	bl	8000864 <VL53L8CX_RdByte>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	4313      	orrs	r3, r2
 8001736:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 8001738:	7abb      	ldrb	r3, [r7, #10]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d111      	bne.n	8001766 <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2101      	movs	r1, #1
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fb06 	bl	8000d58 <VL53L8CX_WaitMs>
		timeout++;
 800174c:	89bb      	ldrh	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8001752:	7afb      	ldrb	r3, [r7, #11]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d106      	bne.n	800176a <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 800175c:	89bb      	ldrh	r3, [r7, #12]
 800175e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001762:	d3cd      	bcc.n	8001700 <_vl53l8cx_poll_for_mcu_boot+0x10>
 8001764:	e002      	b.n	800176c <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 8001766:	bf00      	nop
 8001768:	e000      	b.n	800176c <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 800176a:	bf00      	nop

   return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b0ea      	sub	sp, #424	@ 0x1a8
 800177c:	af02      	add	r7, sp, #8
 800177e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001782:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001786:	6018      	str	r0, [r3, #0]
 8001788:	460a      	mov	r2, r1
 800178a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800178e:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8001792:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800179a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800179e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017a2:	4ad9      	ldr	r2, [pc, #868]	@ (8001b08 <_vl53l8cx_send_offset_data+0x390>)
 80017a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017a8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80017ac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80017b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80017b4:	4ad5      	ldr	r2, [pc, #852]	@ (8001b0c <_vl53l8cx_send_offset_data+0x394>)
 80017b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ba:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80017be:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80017c2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f203 500c 	addw	r0, r3, #1292	@ 0x50c
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 80017cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80017d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	331c      	adds	r3, #28
	(void)memcpy(p_dev->temp_buffer,
 80017d8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80017dc:	4619      	mov	r1, r3
 80017de:	f006 fe58 	bl	8008492 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 80017e2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80017e6:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	f040 8122 	bne.w	8001a36 <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80017f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80017f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f203 521c 	addw	r2, r3, #1308	@ 0x51c
 8001800:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001804:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001808:	cb03      	ldmia	r3!, {r0, r1}
 800180a:	6010      	str	r0, [r2, #0]
 800180c:	6051      	str	r1, [r2, #4]
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 800180e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001812:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 800181c:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fa63 	bl	8000cec <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8001826:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800182a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f503 61a9 	add.w	r1, r3, #1352	@ 0x548
 8001834:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001838:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800183c:	4618      	mov	r0, r3
 800183e:	f006 fe28 	bl	8008492 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8001842:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001846:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f203 614c 	addw	r1, r3, #1612	@ 0x64c
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	2280      	movs	r2, #128	@ 0x80
 8001856:	4618      	mov	r0, r3
 8001858:	f006 fe1b 	bl	8008492 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 800185c:	2300      	movs	r3, #0
 800185e:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8001862:	e0ac      	b.n	80019be <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800186a:	e09c      	b.n	80019a6 <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 800186c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001870:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	005a      	lsls	r2, r3, #1
 800187a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800187e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8001886:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800188a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800189a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800189e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018a2:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80018a4:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80018a8:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	3304      	adds	r3, #4
 80018b2:	0059      	lsls	r1, r3, #1
 80018b4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80018b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018c0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80018c2:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80018c6:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	f103 0109 	add.w	r1, r3, #9
 80018d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80018d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018e0:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80018e2:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80018e6:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80018ee:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80018f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80018f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80018fc:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001900:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	005a      	lsls	r2, r3, #1
 800190a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800190e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001912:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001916:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8001918:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800191c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800192c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001930:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001934:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8001936:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800193a:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800193e:	00d2      	lsls	r2, r2, #3
 8001940:	440a      	add	r2, r1
 8001942:	3204      	adds	r2, #4
 8001944:	0051      	lsls	r1, r2, #1
 8001946:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800194a:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800194e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001952:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001954:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001958:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800195c:	00d2      	lsls	r2, r2, #3
 800195e:	440a      	add	r2, r1
 8001960:	0052      	lsls	r2, r2, #1
 8001962:	f102 0109 	add.w	r1, r2, #9
 8001966:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800196a:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800196e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001972:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001974:	2b00      	cmp	r3, #0
 8001976:	da00      	bge.n	800197a <_vl53l8cx_send_offset_data+0x202>
 8001978:	3303      	adds	r3, #3
 800197a:	109b      	asrs	r3, r3, #2
 800197c:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800197e:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001982:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	441a      	add	r2, r3
 800198a:	b209      	sxth	r1, r1
 800198c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001990:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001994:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8001998:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80019a6:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	f77f af5e 	ble.w	800186c <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80019b0:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80019be:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	f77f af4e 	ble.w	8001864 <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	3320      	adds	r3, #32
 80019ce:	2260      	movs	r2, #96	@ 0x60
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 fce2 	bl	800839c <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80019d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80019dc:	3340      	adds	r3, #64	@ 0x40
 80019de:	22c0      	movs	r2, #192	@ 0xc0
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f006 fcda 	bl	800839c <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80019e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80019ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 63a9 	add.w	r3, r3, #1352	@ 0x548
 80019f6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80019fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019fe:	4618      	mov	r0, r3
 8001a00:	f006 fd47 	bl	8008492 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8001a04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001a08:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 8001a12:	f107 0118 	add.w	r1, r7, #24
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f006 fd3a 	bl	8008492 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001a1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001a22:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8001a2c:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f95b 	bl	8000cec <VL53L8CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8001a3c:	e01b      	b.n	8001a76 <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8001a3e:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001a42:	f103 0208 	add.w	r2, r3, #8
 8001a46:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001a4a:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8001a4e:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8001a52:	6809      	ldr	r1, [r1, #0]
 8001a54:	440a      	add	r2, r1
 8001a56:	f892 150c 	ldrb.w	r1, [r2, #1292]	@ 0x50c
 8001a5a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8001a5e:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	460a      	mov	r2, r1
 8001a68:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001a6c:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001a70:	3301      	adds	r3, #1
 8001a72:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8001a76:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001a7a:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8001a7e:	d3de      	bcc.n	8001a3e <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8001a80:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001a84:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f203 62ec 	addw	r2, r3, #1772	@ 0x6ec
 8001a8e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001a92:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a96:	cb03      	ldmia	r3!, {r0, r1}
 8001a98:	6010      	str	r0, [r2, #0]
 8001a9a:	6051      	str	r1, [r2, #4]
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8001a9c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001aa0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001aaa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
 8001ab4:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8001ab8:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8001abc:	f7fe fef8 	bl	80008b0 <VL53L8CX_WrMulti>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8001ace:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001ad2:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	23ff      	movs	r3, #255	@ 0xff
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	6800      	ldr	r0, [r0, #0]
 8001ae8:	f7ff fdb2 	bl	8001650 <_vl53l8cx_poll_for_answer>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001af4:	4313      	orrs	r3, r2
 8001af6:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001afa:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	0800926c 	.word	0x0800926c
 8001b0c:	08009274 	.word	0x08009274

08001b10 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0ca      	sub	sp, #296	@ 0x128
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b1e:	6018      	str	r0, [r3, #0]
 8001b20:	460a      	mov	r2, r1
 8001b22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b26:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8001b2a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8001b32:	4a9a      	ldr	r2, [pc, #616]	@ (8001d9c <_vl53l8cx_send_xtalk_data+0x28c>)
 8001b34:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b3c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8001b40:	4a97      	ldr	r2, [pc, #604]	@ (8001da0 <_vl53l8cx_send_xtalk_data+0x290>)
 8001b42:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b4a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8001b4e:	4b95      	ldr	r3, [pc, #596]	@ (8001da4 <_vl53l8cx_send_xtalk_data+0x294>)
 8001b50:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001b54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f203 500c 	addw	r0, r3, #1292	@ 0x50c
 8001b62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001b70:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8001b74:	4619      	mov	r1, r3
 8001b76:	f006 fc8c 	bl	8008492 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 8001b7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b7e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	f040 80d2 	bne.w	8001d2e <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8001b8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b8e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001b9e:	cb03      	ldmia	r3!, {r0, r1}
 8001ba0:	6010      	str	r0, [r2, #0]
 8001ba2:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8001ba4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ba8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001bb8:	cb03      	ldmia	r3!, {r0, r1}
 8001bba:	6010      	str	r0, [r2, #0]
 8001bbc:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001bbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001bc2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8001bcc:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f88b 	bl	8000cec <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8001bd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001bda:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 61a8 	add.w	r1, r3, #1344	@ 0x540
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bec:	4618      	mov	r0, r3
 8001bee:	f006 fc50 	bl	8008492 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001bf8:	e05d      	b.n	8001cb6 <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001c00:	e04e      	b.n	8001ca0 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8001c02:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8001c06:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	005a      	lsls	r2, r3, #1
 8001c10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001c1c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001c20:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c30:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c38:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8001c3a:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001c3e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3304      	adds	r3, #4
 8001c48:	0059      	lsls	r1, r3, #1
 8001c4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c56:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001c58:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001c5c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	f103 0109 	add.w	r1, r3, #9
 8001c6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c76:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001c78:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001c7c:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001c84:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001c86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c8a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8001c92:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001ca0:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	ddac      	ble.n	8001c02 <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8001ca8:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001cb6:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	dd9d      	ble.n	8001bfa <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	3340      	adds	r3, #64	@ 0x40
 8001cc4:	22c0      	movs	r2, #192	@ 0xc0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 fb67 	bl	800839c <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8001cce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cd2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 8001cdc:	f107 0108 	add.w	r1, r7, #8
 8001ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 fbd4 	bl	8008492 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001cea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8001cf8:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fff5 	bl	8000cec <VL53L8CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8001d02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001d10:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001d14:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8001d16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f203 5384 	addw	r3, r3, #1412	@ 0x584
 8001d24:	2204      	movs	r2, #4
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f006 fb37 	bl	800839c <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8001d2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d32:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d36:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001d38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8001d46:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001d4a:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8001d4e:	f7fe fdaf 	bl	80008b0 <VL53L8CX_WrMulti>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8001d60:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d64:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8001d68:	2303      	movs	r3, #3
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	23ff      	movs	r3, #255	@ 0xff
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001d74:	2201      	movs	r2, #1
 8001d76:	2104      	movs	r1, #4
 8001d78:	6800      	ldr	r0, [r0, #0]
 8001d7a:	f7ff fc69 	bl	8001650 <_vl53l8cx_poll_for_answer>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001d8c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	0800927c 	.word	0x0800927c
 8001da0:	08009284 	.word	0x08009284
 8001da4:	0001fca0 	.word	0x0001fca0

08001da8 <vl53l8cx_init>:
}


uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8001db4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001db8:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
	uint32_t crc_checksum = 0x00;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a81      	ldr	r2, [pc, #516]	@ (8001fcc <vl53l8cx_init+0x224>)
 8001dc6:	619a      	str	r2, [r3, #24]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a81      	ldr	r2, [pc, #516]	@ (8001fd0 <vl53l8cx_init+0x228>)
 8001dcc:	615a      	str	r2, [r3, #20]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2ab8 	strb.w	r2, [r3, #2744]	@ 0xab8

	/* SW reboot sequence */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fd52 	bl	8000888 <VL53L8CX_WrByte>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2204      	movs	r2, #4
 8001df2:	2109      	movs	r1, #9
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fd47 	bl	8000888 <VL53L8CX_WrByte>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2240      	movs	r2, #64	@ 0x40
 8001e08:	210f      	movs	r1, #15
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fd3c 	bl	8000888 <VL53L8CX_WrByte>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	210a      	movs	r1, #10
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fd31 	bl	8000888 <VL53L8CX_WrByte>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	75fb      	strb	r3, [r7, #23]

	//printf("After writing : Status = %d\n", status);
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f107 0216 	add.w	r2, r7, #22
 8001e36:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fd12 	bl	8000864 <VL53L8CX_RdByte>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	75fb      	strb	r3, [r7, #23]

	//printf("After first reading: Status = %d\n", status);
	//printf("tmp value = %d\n", tmp);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	210c      	movs	r1, #12
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fd19 	bl	8000888 <VL53L8CX_WrByte>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f240 1101 	movw	r1, #257	@ 0x101
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fd0d 	bl	8000888 <VL53L8CX_WrByte>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fd01 	bl	8000888 <VL53L8CX_WrByte>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fcf5 	bl	8000888 <VL53L8CX_WrByte>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fce9 	bl	8000888 <VL53L8CX_WrByte>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fcdd 	bl	8000888 <VL53L8CX_WrByte>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2203      	movs	r2, #3
 8001edc:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fcd1 	bl	8000888 <VL53L8CX_WrByte>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f240 1103 	movw	r1, #259	@ 0x103
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fcc5 	bl	8000888 <VL53L8CX_WrByte>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	210c      	movs	r1, #12
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fcba 	bl	8000888 <VL53L8CX_WrByte>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2243      	movs	r2, #67	@ 0x43
 8001f22:	210f      	movs	r1, #15
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fcaf 	bl	8000888 <VL53L8CX_WrByte>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2101      	movs	r1, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ff0d 	bl	8000d58 <VL53L8CX_WaitMs>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2240      	movs	r2, #64	@ 0x40
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fc9a 	bl	8000888 <VL53L8CX_WrByte>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	210a      	movs	r1, #10
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fc8f 	bl	8000888 <VL53L8CX_WrByte>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 100);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2164      	movs	r1, #100	@ 0x64
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe feed 	bl	8000d58 <VL53L8CX_WaitMs>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	75fb      	strb	r3, [r7, #23]
	//printf("Hi");
	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fc79 	bl	8000888 <VL53L8CX_WrByte>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	75fb      	strb	r3, [r7, #23]
	//printf("After writing 0x7fff: Status = %d\n", status);

	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	23ff      	movs	r3, #255	@ 0xff
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2306      	movs	r3, #6
 8001faa:	2200      	movs	r2, #0
 8001fac:	2101      	movs	r1, #1
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fb4e 	bl	8001650 <_vl53l8cx_poll_for_answer>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	75fb      	strb	r3, [r7, #23]
	//printf("After polling for MCU boot: Status = %d\n", status);
	if(status != (uint8_t)0){
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <vl53l8cx_init+0x230>
		printf("Exit is happening here ");
 8001fc4:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <vl53l8cx_init+0x22c>)
 8001fc6:	f006 f899 	bl	80080fc <iprintf>
		goto exit;
 8001fca:	e31c      	b.n	8002606 <vl53l8cx_init+0x85e>
 8001fcc:	0801ebc4 	.word	0x0801ebc4
 8001fd0:	0801e7f8 	.word	0x0801e7f8
 8001fd4:	0800928c 	.word	0x0800928c
	}
	//printf("Hello");
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	210e      	movs	r1, #14
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fc52 	bl	8000888 <VL53L8CX_WrByte>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fc46 	bl	8000888 <VL53L8CX_WrByte>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	4313      	orrs	r3, r2
 8002004:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fc3a 	bl	8000888 <VL53L8CX_WrByte>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	4313      	orrs	r3, r2
 800201c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x01);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	2106      	movs	r1, #6
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fc2f 	bl	8000888 <VL53L8CX_WrByte>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	4313      	orrs	r3, r2
 8002032:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 8002034:	2304      	movs	r3, #4
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	23ff      	movs	r3, #255	@ 0xff
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2321      	movs	r3, #33	@ 0x21
 800203e:	2200      	movs	r2, #0
 8002040:	2101      	movs	r1, #1
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fb04 	bl	8001650 <_vl53l8cx_poll_for_answer>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	4313      	orrs	r3, r2
 8002050:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fc14 	bl	8000888 <VL53L8CX_WrByte>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	4313      	orrs	r3, r2
 8002068:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f107 0216 	add.w	r2, r7, #22
 8002070:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fbf5 	bl	8000864 <VL53L8CX_RdByte>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	4313      	orrs	r3, r2
 8002082:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	210c      	movs	r1, #12
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fbfc 	bl	8000888 <VL53L8CX_WrByte>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	4313      	orrs	r3, r2
 8002098:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fbf0 	bl	8000888 <VL53L8CX_WrByte>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f240 1101 	movw	r1, #257	@ 0x101
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fbe4 	bl	8000888 <VL53L8CX_WrByte>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fbd8 	bl	8000888 <VL53L8CX_WrByte>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	4313      	orrs	r3, r2
 80020e0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fbcc 	bl	8000888 <VL53L8CX_WrByte>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fbc0 	bl	8000888 <VL53L8CX_WrByte>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	4313      	orrs	r3, r2
 8002110:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f244 0102 	movw	r1, #16386	@ 0x4002
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fbb4 	bl	8000888 <VL53L8CX_WrByte>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	4313      	orrs	r3, r2
 8002128:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fba8 	bl	8000888 <VL53L8CX_WrByte>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	4313      	orrs	r3, r2
 8002140:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f240 1103 	movw	r1, #259	@ 0x103
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fb9c 	bl	8000888 <VL53L8CX_WrByte>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	4313      	orrs	r3, r2
 8002158:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f244 010f 	movw	r1, #16399	@ 0x400f
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fb90 	bl	8000888 <VL53L8CX_WrByte>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	4313      	orrs	r3, r2
 8002170:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2243      	movs	r2, #67	@ 0x43
 8002176:	f240 211a 	movw	r1, #538	@ 0x21a
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fb84 	bl	8000888 <VL53L8CX_WrByte>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	4313      	orrs	r3, r2
 8002188:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2203      	movs	r2, #3
 800218e:	f240 211a 	movw	r1, #538	@ 0x21a
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fb78 	bl	8000888 <VL53L8CX_WrByte>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	4313      	orrs	r3, r2
 80021a0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f240 211a 	movw	r1, #538	@ 0x21a
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fb6c 	bl	8000888 <VL53L8CX_WrByte>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f240 211a 	movw	r1, #538	@ 0x21a
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fb60 	bl	8000888 <VL53L8CX_WrByte>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f240 2119 	movw	r1, #537	@ 0x219
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fb54 	bl	8000888 <VL53L8CX_WrByte>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f240 211b 	movw	r1, #539	@ 0x21b
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fb48 	bl	8000888 <VL53L8CX_WrByte>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	4313      	orrs	r3, r2
 8002200:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fb3c 	bl	8000888 <VL53L8CX_WrByte>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	4313      	orrs	r3, r2
 8002218:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f107 0216 	add.w	r2, r7, #22
 8002220:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fb1d 	bl	8000864 <VL53L8CX_RdByte>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	4313      	orrs	r3, r2
 8002232:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fb23 	bl	8000888 <VL53L8CX_WrByte>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	4313      	orrs	r3, r2
 800224a:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L8CX */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2209      	movs	r2, #9
 8002250:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fb17 	bl	8000888 <VL53L8CX_WrByte>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	4313      	orrs	r3, r2
 8002262:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800226a:	4adf      	ldr	r2, [pc, #892]	@ (80025e8 <vl53l8cx_init+0x840>)
 800226c:	2100      	movs	r1, #0
 800226e:	f7fe fb1f 	bl	80008b0 <VL53L8CX_WrMulti>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	4313      	orrs	r3, r2
 800227a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	220a      	movs	r2, #10
 8002280:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe faff 	bl	8000888 <VL53L8CX_WrByte>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	4313      	orrs	r3, r2
 8002292:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800229a:	4ad4      	ldr	r2, [pc, #848]	@ (80025ec <vl53l8cx_init+0x844>)
 800229c:	2100      	movs	r1, #0
 800229e:	f7fe fb07 	bl	80008b0 <VL53L8CX_WrMulti>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	220b      	movs	r2, #11
 80022b0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fae7 	bl	8000888 <VL53L8CX_WrByte>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80022ca:	4ac9      	ldr	r2, [pc, #804]	@ (80025f0 <vl53l8cx_init+0x848>)
 80022cc:	2100      	movs	r1, #0
 80022ce:	f7fe faef 	bl	80008b0 <VL53L8CX_WrMulti>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	4313      	orrs	r3, r2
 80022da:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe facf 	bl	8000888 <VL53L8CX_WrByte>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fac3 	bl	8000888 <VL53L8CX_WrByte>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	4313      	orrs	r3, r2
 800230a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x03);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	2106      	movs	r1, #6
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fab8 	bl	8000888 <VL53L8CX_WrByte>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	4313      	orrs	r3, r2
 8002320:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WaitMs(&(p_dev->platform), 5);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2105      	movs	r1, #5
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fd16 	bl	8000d58 <VL53L8CX_WaitMs>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	4313      	orrs	r3, r2
 8002334:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe faa2 	bl	8000888 <VL53L8CX_WrByte>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	4313      	orrs	r3, r2
 800234c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f107 0216 	add.w	r2, r7, #22
 8002354:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fa83 	bl	8000864 <VL53L8CX_RdByte>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	4313      	orrs	r3, r2
 8002366:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	210c      	movs	r1, #12
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fa8a 	bl	8000888 <VL53L8CX_WrByte>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	4313      	orrs	r3, r2
 800237c:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fa7e 	bl	8000888 <VL53L8CX_WrByte>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	4313      	orrs	r3, r2
 8002394:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fa72 	bl	8000888 <VL53L8CX_WrByte>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f240 1115 	movw	r1, #277	@ 0x115
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fa66 	bl	8000888 <VL53L8CX_WrByte>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2242      	movs	r2, #66	@ 0x42
 80023ca:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fa5a 	bl	8000888 <VL53L8CX_WrByte>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	4313      	orrs	r3, r2
 80023dc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f240 1117 	movw	r1, #279	@ 0x117
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fa4e 	bl	8000888 <VL53L8CX_WrByte>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	210b      	movs	r1, #11
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fa43 	bl	8000888 <VL53L8CX_WrByte>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	4313      	orrs	r3, r2
 800240a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f107 0216 	add.w	r2, r7, #22
 8002412:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fa24 	bl	8000864 <VL53L8CX_RdByte>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	4313      	orrs	r3, r2
 8002424:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	210c      	movs	r1, #12
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fa2b 	bl	8000888 <VL53L8CX_WrByte>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	4313      	orrs	r3, r2
 800243a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	210b      	movs	r1, #11
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fa20 	bl	8000888 <VL53L8CX_WrByte>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	4313      	orrs	r3, r2
 8002450:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff f94c 	bl	80016f0 <_vl53l8cx_poll_for_mcu_boot>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	4313      	orrs	r3, r2
 8002460:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f040 80cd 	bne.w	8002604 <vl53l8cx_init+0x85c>
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fa08 	bl	8000888 <VL53L8CX_WrByte>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	4313      	orrs	r3, r2
 8002480:	75fb      	strb	r3, [r7, #23]

	/* Firmware checksum */
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8002482:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 4);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 800248a:	2304      	movs	r3, #4
 800248c:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002490:	f7fe fb2e 	bl	8000af0 <VL53L8CX_RdMulti>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	4313      	orrs	r3, r2
 800249c:	75fb      	strb	r3, [r7, #23]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, 4);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 80024a4:	2104      	movs	r1, #4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fc20 	bl	8000cec <VL53L8CX_SwapBuffer>
	memcpy((uint8_t*)&crc_checksum, &(p_dev->temp_buffer[0]), 4);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60bb      	str	r3, [r7, #8]


	if (crc_checksum != (uint32_t)0xc0b6c9e)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4a4e      	ldr	r2, [pc, #312]	@ (80025f4 <vl53l8cx_init+0x84c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <vl53l8cx_init+0x720>
	{
		status |= VL53L8CX_STATUS_FW_CHECKSUM_FAIL;
 80024be:	7dfb      	ldrb	r3, [r7, #23]
 80024c0:	f043 0305 	orr.w	r3, r3, #5
 80024c4:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80024c6:	e09e      	b.n	8002606 <vl53l8cx_init+0x85e>
	}

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2fd8,
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	2328      	movs	r3, #40	@ 0x28
 80024cc:	4a4a      	ldr	r2, [pc, #296]	@ (80025f8 <vl53l8cx_init+0x850>)
 80024ce:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 80024d2:	f7fe f9ed 	bl	80008b0 <VL53L8CX_WrMulti>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	4313      	orrs	r3, r2
 80024de:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 80024e0:	2302      	movs	r3, #2
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	23ff      	movs	r3, #255	@ 0xff
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80024ec:	2200      	movs	r2, #0
 80024ee:	2104      	movs	r1, #4
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff f8ad 	bl	8001650 <_vl53l8cx_poll_for_answer>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8002500:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8002508:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800250c:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8002510:	f7fe faee 	bl	8000af0 <VL53L8CX_RdMulti>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	4313      	orrs	r3, r2
 800251c:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f103 001c 	add.w	r0, r3, #28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 800252a:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800252e:	4619      	mov	r1, r3
 8002530:	f005 ffaf 	bl	8008492 <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8002534:	2110      	movs	r1, #16
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff f91e 	bl	8001778 <_vl53l8cx_send_offset_data>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	4313      	orrs	r3, r2
 8002544:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800254c:	4a2b      	ldr	r2, [pc, #172]	@ (80025fc <vl53l8cx_init+0x854>)
 800254e:	4618      	mov	r0, r3
 8002550:	4611      	mov	r1, r2
 8002552:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8002556:	461a      	mov	r2, r3
 8002558:	f005 ff9b 	bl	8008492 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 800255c:	2110      	movs	r1, #16
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fad6 	bl	8001b10 <_vl53l8cx_send_xtalk_data>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	4313      	orrs	r3, r2
 800256c:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2c34,
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8002578:	f642 4134 	movw	r1, #11316	@ 0x2c34
 800257c:	f7fe f998 	bl	80008b0 <VL53L8CX_WrMulti>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	4313      	orrs	r3, r2
 8002588:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800258a:	2303      	movs	r3, #3
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	23ff      	movs	r3, #255	@ 0xff
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002596:	2201      	movs	r2, #1
 8002598:	2104      	movs	r1, #4
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff f858 	bl	8001650 <_vl53l8cx_poll_for_answer>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80025aa:	f107 0110 	add.w	r1, r7, #16
 80025ae:	2304      	movs	r3, #4
 80025b0:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f001 f857 	bl	8003668 <vl53l8cx_dci_write_data>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80025c4:	f107 010c 	add.w	r1, r7, #12
 80025c8:	2304      	movs	r3, #4
 80025ca:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f001 f84a 	bl	8003668 <vl53l8cx_dci_write_data>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	4313      	orrs	r3, r2
 80025dc:	75fb      	strb	r3, [r7, #23]
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));
	printf("Done");
 80025de:	4808      	ldr	r0, [pc, #32]	@ (8002600 <vl53l8cx_init+0x858>)
 80025e0:	f005 fd8c 	bl	80080fc <iprintf>
 80025e4:	e00f      	b.n	8002606 <vl53l8cx_init+0x85e>
 80025e6:	bf00      	nop
 80025e8:	080097f8 	.word	0x080097f8
 80025ec:	080117f8 	.word	0x080117f8
 80025f0:	080197f8 	.word	0x080197f8
 80025f4:	0c0b6c9e 	.word	0x0c0b6c9e
 80025f8:	0801eecc 	.word	0x0801eecc
 80025fc:	0801ebc4 	.word	0x0801ebc4
 8002600:	080092a4 	.word	0x080092a4
		goto exit;
 8002604:	bf00      	nop
exit:
	return status;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <vl53l8cx_get_power_mode>:
}*/

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe f92e 	bl	8000888 <VL53L8CX_WrByte>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	4313      	orrs	r3, r2
 8002634:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f107 020e 	add.w	r2, r7, #14
 800263c:	2109      	movs	r1, #9
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe f910 	bl	8000864 <VL53L8CX_RdByte>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	4313      	orrs	r3, r2
 800264c:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 800264e:	7bbb      	ldrb	r3, [r7, #14]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d005      	beq.n	8002660 <vl53l8cx_get_power_mode+0x50>
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11a      	bne.n	800268e <vl53l8cx_get_power_mode+0x7e>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
			break;
 800265e:	e01c      	b.n	800269a <vl53l8cx_get_power_mode+0x8a>
		case 0x2:
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &tmp);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f107 020e 	add.w	r2, r7, #14
 8002666:	210f      	movs	r1, #15
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe f8fb 	bl	8000864 <VL53L8CX_RdByte>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	4313      	orrs	r3, r2
 8002676:	73fb      	strb	r3, [r7, #15]
			if(tmp == 0x43)
 8002678:	7bbb      	ldrb	r3, [r7, #14]
 800267a:	2b43      	cmp	r3, #67	@ 0x43
 800267c:	d103      	bne.n	8002686 <vl53l8cx_get_power_mode+0x76>
			{
				*p_power_mode = VL53L8CX_POWER_MODE_DEEP_SLEEP;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]
			else
			{
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
			}

			break;
 8002684:	e009      	b.n	800269a <vl53l8cx_get_power_mode+0x8a>
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
			break;
 800268c:	e005      	b.n	800269a <vl53l8cx_get_power_mode+0x8a>
		default:
			*p_power_mode = 0;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 8002694:	23ff      	movs	r3, #255	@ 0xff
 8002696:	73fb      	strb	r3, [r7, #15]
			break;
 8002698:	bf00      	nop
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe f8f0 	bl	8000888 <VL53L8CX_WrByte>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	73fb      	strb	r3, [r7, #15]

	return status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, stored_mode, status = VL53L8CX_STATUS_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 80026cc:	f107 030e 	add.w	r3, r7, #14
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff9c 	bl	8002610 <vl53l8cx_get_power_mode>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	4313      	orrs	r3, r2
 80026e0:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 80026e2:	7bbb      	ldrb	r3, [r7, #14]
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	f000 80c0 	beq.w	800286c <vl53l8cx_set_power_mode+0x1b0>
	{
	switch(power_mode)
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d07a      	beq.n	80027e8 <vl53l8cx_set_power_mode+0x12c>
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	f300 80aa 	bgt.w	800284c <vl53l8cx_set_power_mode+0x190>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d04e      	beq.n	800279a <vl53l8cx_set_power_mode+0xde>
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 80a5 	bne.w	800284c <vl53l8cx_set_power_mode+0x190>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe f8bc 	bl	8000888 <VL53L8CX_WrByte>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	4313      	orrs	r3, r2
 8002718:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2204      	movs	r2, #4
 800271e:	2109      	movs	r1, #9
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe f8b1 	bl	8000888 <VL53L8CX_WrByte>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	4313      	orrs	r3, r2
 800272e:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &stored_mode);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f107 020d 	add.w	r2, r7, #13
 8002736:	210f      	movs	r1, #15
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe f893 	bl	8000864 <VL53L8CX_RdByte>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	4313      	orrs	r3, r2
 8002746:	73fb      	strb	r3, [r7, #15]
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8002748:	7b7b      	ldrb	r3, [r7, #13]
 800274a:	2b43      	cmp	r3, #67	@ 0x43
 800274c:	d10a      	bne.n	8002764 <vl53l8cx_set_power_mode+0xa8>
			{
				status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2240      	movs	r2, #64	@ 0x40
 8002752:	210f      	movs	r1, #15
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe f897 	bl	8000888 <VL53L8CX_WrByte>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	4313      	orrs	r3, r2
 8002762:	73fb      	strb	r3, [r7, #15]
			}
			status |= _vl53l8cx_poll_for_answer(
 8002764:	2301      	movs	r3, #1
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	2301      	movs	r3, #1
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2306      	movs	r3, #6
 800276e:	2200      	movs	r2, #0
 8002770:	2101      	movs	r1, #1
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe ff6c 	bl	8001650 <_vl53l8cx_poll_for_answer>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	4313      	orrs	r3, r2
 8002780:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8002782:	7b7b      	ldrb	r3, [r7, #13]
 8002784:	2b43      	cmp	r3, #67	@ 0x43
 8002786:	d164      	bne.n	8002852 <vl53l8cx_set_power_mode+0x196>
			{
				status |= vl53l8cx_init(p_dev);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff fb0d 	bl	8001da8 <vl53l8cx_init>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	4313      	orrs	r3, r2
 8002796:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002798:	e05b      	b.n	8002852 <vl53l8cx_set_power_mode+0x196>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe f870 	bl	8000888 <VL53L8CX_WrByte>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	2109      	movs	r1, #9
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe f865 	bl	8000888 <VL53L8CX_WrByte>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 80027c8:	2300      	movs	r3, #0
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	2301      	movs	r3, #1
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2306      	movs	r3, #6
 80027d2:	2200      	movs	r2, #0
 80027d4:	2101      	movs	r1, #1
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe ff3a 	bl	8001650 <_vl53l8cx_poll_for_answer>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 80027e6:	e035      	b.n	8002854 <vl53l8cx_set_power_mode+0x198>

		case VL53L8CX_POWER_MODE_DEEP_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe f849 	bl	8000888 <VL53L8CX_WrByte>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	2109      	movs	r1, #9
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe f83e 	bl	8000888 <VL53L8CX_WrByte>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	4313      	orrs	r3, r2
 8002814:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8002816:	2300      	movs	r3, #0
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	2301      	movs	r3, #1
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2306      	movs	r3, #6
 8002820:	2200      	movs	r2, #0
 8002822:	2101      	movs	r1, #1
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fe ff13 	bl	8001650 <_vl53l8cx_poll_for_answer>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	4313      	orrs	r3, r2
 8002832:	73fb      	strb	r3, [r7, #15]
					p_dev, 1, 0, 0x06, 0x01, 0);
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2243      	movs	r2, #67	@ 0x43
 8002838:	210f      	movs	r1, #15
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe f824 	bl	8000888 <VL53L8CX_WrByte>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	4313      	orrs	r3, r2
 8002848:	73fb      	strb	r3, [r7, #15]
			break;
 800284a:	e003      	b.n	8002854 <vl53l8cx_set_power_mode+0x198>

		default:
			status = VL53L8CX_STATUS_ERROR;
 800284c:	23ff      	movs	r3, #255	@ 0xff
 800284e:	73fb      	strb	r3, [r7, #15]
			break;
 8002850:	e000      	b.n	8002854 <vl53l8cx_set_power_mode+0x198>
			break;
 8002852:	bf00      	nop
		}
		status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe f813 	bl	8000888 <VL53L8CX_WrByte>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	4313      	orrs	r3, r2
 800286a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b09c      	sub	sp, #112	@ 0x70
 800287c:	af02      	add	r7, sp, #8
 800287e:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8002886:	2300      	movs	r3, #0
 8002888:	653b      	str	r3, [r7, #80]	@ 0x50
 800288a:	2300      	movs	r3, #0
 800288c:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 800288e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002892:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 8002894:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fcb4 	bl	8003208 <vl53l8cx_get_resolution>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
	p_dev->streamcount = 255;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	22ff      	movs	r2, #255	@ 0xff
 80028b8:	731a      	strb	r2, [r3, #12]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 80028ba:	4bb8      	ldr	r3, [pc, #736]	@ (8002b9c <vl53l8cx_start_ranging+0x324>)
 80028bc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80028c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 80028c6:	4bb6      	ldr	r3, [pc, #728]	@ (8002ba0 <vl53l8cx_start_ranging+0x328>)
 80028c8:	f107 040c 	add.w	r4, r7, #12
 80028cc:	461d      	mov	r5, r3
 80028ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80028de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e0:	3308      	adds	r3, #8
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 80028e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e6:	3310      	adds	r3, #16
 80028e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80028ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ec:	3320      	adds	r3, #32
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80028f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f2:	3340      	adds	r3, #64	@ 0x40
 80028f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 80028f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f8:	3380      	adds	r3, #128	@ 0x80
 80028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80028fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002902:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8002904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002906:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 800290c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800290e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8002914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800291a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800291c:	2300      	movs	r3, #0
 800291e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002920:	e073      	b.n	8002a0a <vl53l8cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8002922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	3368      	adds	r3, #104	@ 0x68
 8002928:	443b      	add	r3, r7
 800292a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d067      	beq.n	8002a02 <vl53l8cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8002932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	3368      	adds	r3, #104	@ 0x68
 800293a:	443b      	add	r3, r7
 800293c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8002940:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d057      	beq.n	8002a02 <vl53l8cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8002952:	f107 020c 	add.w	r2, r7, #12
 8002956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 800295e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03a      	beq.n	80029e2 <vl53l8cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 800296c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d833      	bhi.n	80029e2 <vl53l8cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800297a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800297c:	885b      	ldrh	r3, [r3, #2]
 800297e:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8002982:	4293      	cmp	r3, r2
 8002984:	d910      	bls.n	80029a8 <vl53l8cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8002986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002988:	885b      	ldrh	r3, [r3, #2]
 800298a:	f645 028f 	movw	r2, #22671	@ 0x588f
 800298e:	4293      	cmp	r3, r2
 8002990:	d80a      	bhi.n	80029a8 <vl53l8cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8002992:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299a:	b299      	uxth	r1, r3
 800299c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800299e:	8813      	ldrh	r3, [r2, #0]
 80029a0:	f361 130f 	bfi	r3, r1, #4, #12
 80029a4:	8013      	strh	r3, [r2, #0]
 80029a6:	e009      	b.n	80029bc <vl53l8cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80029a8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	b299      	uxth	r1, r3
 80029b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80029b4:	8813      	ldrh	r3, [r2, #0]
 80029b6:	f361 130f 	bfi	r3, r1, #4, #12
 80029ba:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80029c2:	7812      	ldrb	r2, [r2, #0]
 80029c4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	4611      	mov	r1, r2
 80029cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80029d4:	b292      	uxth	r2, r2
 80029d6:	fb01 f202 	mul.w	r2, r1, r2
 80029da:	441a      	add	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	611a      	str	r2, [r3, #16]
 80029e0:	e009      	b.n	80029f6 <vl53l8cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80029e8:	8812      	ldrh	r2, [r2, #0]
 80029ea:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80029ee:	b292      	uxth	r2, r2
 80029f0:	441a      	add	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
		}
		p_dev->data_read_size += (uint32_t)4;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	1d1a      	adds	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]
 8002a00:	e000      	b.n	8002a04 <vl53l8cx_start_ranging+0x18c>
			continue;
 8002a02:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002a04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a06:	3301      	adds	r3, #1
 8002a08:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a0c:	2b0b      	cmp	r3, #11
 8002a0e:	d988      	bls.n	8002922 <vl53l8cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f103 0218 	add.w	r2, r3, #24
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	611a      	str	r2, [r3, #16]

	status |= vl53l8cx_dci_write_data(p_dev,
 8002a1c:	f107 010c 	add.w	r1, r7, #12
 8002a20:	2330      	movs	r3, #48	@ 0x30
 8002a22:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fe1e 	bl	8003668 <vl53l8cx_dci_write_data>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8002a40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a42:	3301      	adds	r3, #1
 8002a44:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 8002a46:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fe09 	bl	8003668 <vl53l8cx_dci_write_data>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 8002a64:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002a68:	2310      	movs	r3, #16
 8002a6a:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fdfa 	bl	8003668 <vl53l8cx_dci_write_data>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fefc 	bl	8000888 <VL53L8CX_WrByte>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2205      	movs	r2, #5
 8002aa2:	2109      	movs	r1, #9
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd feef 	bl	8000888 <VL53L8CX_WrByte>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fee1 	bl	8000888 <VL53L8CX_WrByte>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002ada:	2304      	movs	r3, #4
 8002adc:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002ae0:	f7fd fee6 	bl	80008b0 <VL53L8CX_WrMulti>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8002af2:	2303      	movs	r3, #3
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	23ff      	movs	r3, #255	@ 0xff
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002afe:	2201      	movs	r2, #1
 8002b00:	2104      	movs	r1, #4
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fda4 	bl	8001650 <_vl53l8cx_poll_for_answer>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
	status |= vl53l8cx_dci_read_data(p_dev,
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	f245 4240 	movw	r2, #21568	@ 0x5440
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fd16 	bl	8003554 <vl53l8cx_dci_read_data>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8002b44:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002b48:	461a      	mov	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d002      	beq.n	8002b58 <vl53l8cx_start_ranging+0x2e0>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8002b52:	23ff      	movs	r3, #255	@ 0xff
 8002b54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
	status |= vl53l8cx_dci_read_data(p_dev,
 8002b5e:	2308      	movs	r3, #8
 8002b60:	f24e 02c4 	movw	r2, #57540	@ 0xe0c4
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fcf5 	bl	8003554 <vl53l8cx_dci_read_data>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <vl53l8cx_start_ranging+0x316>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 8002b82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b86:	f043 0303 	orr.w	r3, r3, #3
 8002b8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8002b8e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3768      	adds	r7, #104	@ 0x68
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	080092ac 	.word	0x080092ac
 8002ba0:	080092bc 	.word	0x080092bc

08002ba4 <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	74fb      	strb	r3, [r7, #19]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]

	status |= VL53L8CX_RdMulti(&(p_dev->platform),
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f107 020c 	add.w	r2, r7, #12
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002bc8:	f7fd ff92 	bl	8000af0 <VL53L8CX_RdMulti>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d04d      	beq.n	8002c7c <vl53l8cx_stop_ranging+0xd8>
			&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3ab8 	ldrb.w	r3, [r3, #2744]	@ 0xab8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d148      	bne.n	8002c7c <vl53l8cx_stop_ranging+0xd8>
	{
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fe48 	bl	8000888 <VL53L8CX_WrByte>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2216      	movs	r2, #22
 8002c06:	2115      	movs	r1, #21
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fe3d 	bl	8000888 <VL53L8CX_WrByte>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	75fb      	strb	r3, [r7, #23]
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2114      	movs	r1, #20
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fe32 	bl	8000888 <VL53L8CX_WrByte>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8002c2e:	e021      	b.n	8002c74 <vl53l8cx_stop_ranging+0xd0>
	        {
	        	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f107 0213 	add.w	r2, r7, #19
 8002c36:	2106      	movs	r1, #6
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fe13 	bl	8000864 <VL53L8CX_RdByte>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	75fb      	strb	r3, [r7, #23]
	        	status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	210a      	movs	r1, #10
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f883 	bl	8000d58 <VL53L8CX_WaitMs>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8002c5c:	8abb      	ldrh	r3, [r7, #20]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8002c62:	8abb      	ldrh	r3, [r7, #20]
 8002c64:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c68:	d904      	bls.n	8002c74 <vl53l8cx_stop_ranging+0xd0>
				{
					status |= tmp;
 8002c6a:	7cfa      	ldrb	r2, [r7, #19]
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	75fb      	strb	r3, [r7, #23]
					break;
 8002c72:	e003      	b.n	8002c7c <vl53l8cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	b25b      	sxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	dad9      	bge.n	8002c30 <vl53l8cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f107 0213 	add.w	r2, r7, #19
 8002c82:	2106      	movs	r1, #6
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fded 	bl	8000864 <VL53L8CX_RdByte>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	da15      	bge.n	8002cc8 <vl53l8cx_stop_ranging+0x124>
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f107 0213 	add.w	r2, r7, #19
 8002ca2:	2107      	movs	r1, #7
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fddd 	bl	8000864 <VL53L8CX_RdByte>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b84      	cmp	r3, #132	@ 0x84
 8002cb8:	d006      	beq.n	8002cc8 <vl53l8cx_stop_ranging+0x124>
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b85      	cmp	r3, #133	@ 0x85
 8002cbe:	d003      	beq.n	8002cc8 <vl53l8cx_stop_ranging+0x124>
		   status |= tmp;
 8002cc0:	7cfa      	ldrb	r2, [r7, #19]
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fdd9 	bl	8000888 <VL53L8CX_WrByte>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2114      	movs	r1, #20
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fdce 	bl	8000888 <VL53L8CX_WrByte>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2115      	movs	r1, #21
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fdc3 	bl	8000888 <VL53L8CX_WrByte>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	2109      	movs	r1, #9
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fdb8 	bl	8000888 <VL53L8CX_WrByte>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fdac 	bl	8000888 <VL53L8CX_WrByte>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	75fb      	strb	r3, [r7, #23]

	return status;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f7fd fec7 	bl	8000af0 <VL53L8CX_RdMulti>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 250c 	ldrb.w	r2, [r3, #1292]	@ 0x50c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7b1b      	ldrb	r3, [r3, #12]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d020      	beq.n	8002dbc <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 350c 	ldrb.w	r3, [r3, #1292]	@ 0x50c
 8002d80:	2bff      	cmp	r3, #255	@ 0xff
 8002d82:	d01b      	beq.n	8002dbc <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 350d 	ldrb.w	r3, [r3, #1293]	@ 0x50d
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d116      	bne.n	8002dbc <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 350e 	ldrb.w	r3, [r3, #1294]	@ 0x50e
 8002d94:	f003 0305 	and.w	r3, r3, #5
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d10f      	bne.n	8002dbc <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 350f 	ldrb.w	r3, [r3, #1295]	@ 0x50f
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 250c 	ldrb.w	r2, [r3, #1292]	@ 0x50c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	731a      	strb	r2, [r3, #12]
 8002dba:	e00e      	b.n	8002dda <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 350f 	ldrb.w	r3, [r3, #1295]	@ 0x50f
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da05      	bge.n	8002dd4 <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 250e 	ldrb.w	r2, [r3, #1294]	@ 0x50e
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 8002df2:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f7fd fe76 	bl	8000af0 <VL53L8CX_RdMulti>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 250c 	ldrb.w	r2, [r3, #1292]	@ 0x50c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	731a      	strb	r2, [r3, #12]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f7fd ff60 	bl	8000cec <VL53L8CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e118      	b.n	8003064 <vl53l8cx_get_ranging_data+0x280>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d915      	bls.n	8002e7a <vl53l8cx_get_ranging_data+0x96>
                    && (bh_ptr->type < (uint32_t)0xd))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d80e      	bhi.n	8002e7a <vl53l8cx_get_ranging_data+0x96>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	e005      	b.n	8002e86 <vl53l8cx_get_ranging_data+0xa2>
		}
		else
		{
			msize = bh_ptr->size;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	885b      	ldrh	r3, [r3, #2]
 8002e8a:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	f000 80c2 	beq.w	8003018 <vl53l8cx_get_ranging_data+0x234>
 8002e94:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	f300 80db 	bgt.w	8003054 <vl53l8cx_get_ranging_data+0x270>
 8002e9e:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	f000 80a9 	beq.w	8002ffa <vl53l8cx_get_ranging_data+0x216>
 8002ea8:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8002eac:	4293      	cmp	r3, r2
 8002eae:	f300 80d1 	bgt.w	8003054 <vl53l8cx_get_ranging_data+0x270>
 8002eb2:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	f000 8090 	beq.w	8002fdc <vl53l8cx_get_ranging_data+0x1f8>
 8002ebc:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f300 80c7 	bgt.w	8003054 <vl53l8cx_get_ranging_data+0x270>
 8002ec6:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d077      	beq.n	8002fbe <vl53l8cx_get_ranging_data+0x1da>
 8002ece:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	f300 80be 	bgt.w	8003054 <vl53l8cx_get_ranging_data+0x270>
 8002ed8:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d05f      	beq.n	8002fa0 <vl53l8cx_get_ranging_data+0x1bc>
 8002ee0:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	f300 80b5 	bgt.w	8003054 <vl53l8cx_get_ranging_data+0x270>
 8002eea:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d047      	beq.n	8002f82 <vl53l8cx_get_ranging_data+0x19e>
 8002ef2:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	f300 80ac 	bgt.w	8003054 <vl53l8cx_get_ranging_data+0x270>
 8002efc:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8002f00:	4293      	cmp	r3, r2
 8002f02:	f000 8098 	beq.w	8003036 <vl53l8cx_get_ranging_data+0x252>
 8002f06:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	f300 80a2 	bgt.w	8003054 <vl53l8cx_get_ranging_data+0x270>
 8002f10:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d025      	beq.n	8002f64 <vl53l8cx_get_ranging_data+0x180>
 8002f18:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f300 8099 	bgt.w	8003054 <vl53l8cx_get_ranging_data+0x270>
 8002f22:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <vl53l8cx_get_ranging_data+0x150>
 8002f2a:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00a      	beq.n	8002f48 <vl53l8cx_get_ranging_data+0x164>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8002f32:	e08f      	b.n	8003054 <vl53l8cx_get_ranging_data+0x270>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	330c      	adds	r3, #12
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f893 350c 	ldrb.w	r3, [r3, #1292]	@ 0x50c
 8002f40:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
				break;
 8002f46:	e086      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(p_results->ambient_per_spad,
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
				(void)memcpy(p_results->ambient_per_spad,
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f005 fa98 	bl	8008492 <memcpy>
				break;
 8002f62:	e078      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_spads_enabled,
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_spads_enabled,
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f005 fa89 	bl	8008492 <memcpy>
				break;
 8002f80:	e069      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_target_detected,
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_target_detected,
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f005 fa7a 	bl	8008492 <memcpy>
				break;
 8002f9e:	e05a      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(p_results->signal_per_spad,
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
				(void)memcpy(p_results->signal_per_spad,
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f005 fa6b 	bl	8008492 <memcpy>
				break;
 8002fbc:	e04b      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(p_results->range_sigma_mm,
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
				(void)memcpy(p_results->range_sigma_mm,
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f005 fa5c 	bl	8008492 <memcpy>
				break;
 8002fda:	e03c      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(p_results->distance_mm,
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
				(void)memcpy(p_results->distance_mm,
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f005 fa4d 	bl	8008492 <memcpy>
				break;
 8002ff8:	e02d      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(p_results->reflectance,
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	3304      	adds	r3, #4
 8003004:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	3304      	adds	r3, #4
				(void)memcpy(p_results->reflectance,
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4619      	mov	r1, r3
 8003012:	f005 fa3e 	bl	8008492 <memcpy>
				break;
 8003016:	e01e      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(p_results->target_status,
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	3304      	adds	r3, #4
 8003022:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	3304      	adds	r3, #4
				(void)memcpy(p_results->target_status,
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4619      	mov	r1, r3
 8003030:	f005 fa2f 	bl	8008492 <memcpy>
				break;
 8003034:	e00f      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				(void)memcpy(&p_results->motion_indicator,
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	3304      	adds	r3, #4
 8003040:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
				(void)memcpy(&p_results->motion_indicator,
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4619      	mov	r1, r3
 800304e:	f005 fa20 	bl	8008492 <memcpy>
				break;
 8003052:	e000      	b.n	8003056 <vl53l8cx_get_ranging_data+0x272>
				break;
 8003054:	bf00      	nop
		}
		i += msize;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	3304      	adds	r3, #4
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	429a      	cmp	r2, r3
 800306c:	f4ff aee1 	bcc.w	8002e32 <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e00d      	b.n	8003092 <vl53l8cx_get_ranging_data+0x2ae>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0ada      	lsrs	r2, r3, #11
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	3301      	adds	r3, #1
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b3f      	cmp	r3, #63	@ 0x3f
 8003096:	d9ee      	bls.n	8003076 <vl53l8cx_get_ranging_data+0x292>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e044      	b.n	8003128 <vl53l8cx_get_ranging_data+0x344>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da00      	bge.n	80030b4 <vl53l8cx_get_ranging_data+0x2d0>
 80030b2:	3303      	adds	r3, #3
 80030b4:	109b      	asrs	r3, r3, #2
 80030b6:	b219      	sxth	r1, r3
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	460a      	mov	r2, r1
 80030c6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4413      	add	r3, r2
 80030ce:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	b2d9      	uxtb	r1, r3
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4413      	add	r3, r2
 80030de:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80030e2:	460a      	mov	r2, r1
 80030e4:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	889b      	ldrh	r3, [r3, #4]
 80030f4:	09db      	lsrs	r3, r3, #7
 80030f6:	b299      	uxth	r1, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	460a      	mov	r2, r1
 8003106:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	3390      	adds	r3, #144	@ 0x90
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0ada      	lsrs	r2, r3, #11
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	3390      	adds	r3, #144	@ 0x90
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	3301      	adds	r3, #1
 8003126:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b3f      	cmp	r3, #63	@ 0x3f
 800312c:	d9b7      	bls.n	800309e <vl53l8cx_get_ranging_data+0x2ba>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e01b      	b.n	800316c <vl53l8cx_get_ranging_data+0x388>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	4413      	add	r3, r2
 800313a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d110      	bne.n	8003166 <vl53l8cx_get_ranging_data+0x382>
			for(j = 0; j < (uint32_t)
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e00a      	b.n	8003160 <vl53l8cx_get_ranging_data+0x37c>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	4413      	add	r3, r2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4413      	add	r3, r2
 8003154:	22ff      	movs	r2, #255	@ 0xff
 8003156:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3301      	adds	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f1      	beq.n	800314a <vl53l8cx_get_ranging_data+0x366>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	3301      	adds	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003170:	d9e0      	bls.n	8003134 <vl53l8cx_get_ranging_data+0x350>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	e014      	b.n	80031a2 <vl53l8cx_get_ranging_data+0x3be>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <vl53l8cx_get_ranging_data+0x420>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	0bda      	lsrs	r2, r3, #15
 800318e:	6839      	ldr	r1, [r7, #0]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	3301      	adds	r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b1f      	cmp	r3, #31
 80031a6:	d9e7      	bls.n	8003178 <vl53l8cx_get_ranging_data+0x394>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3514 	ldrb.w	r3, [r3, #1300]	@ 0x514
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3515 	ldrb.w	r3, [r3, #1301]	@ 0x515
 80031b8:	461a      	mov	r2, r3
 80031ba:	89fb      	ldrh	r3, [r7, #14]
 80031bc:	4313      	orrs	r3, r2
 80031be:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
		- (uint32_t)4]) << 8) & 0xFF00U;
 80031c4:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	f893 350c 	ldrb.w	r3, [r3, #1292]	@ 0x50c
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
		- (uint32_t)3])) & 0xFFU;
 80031d6:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	f893 350c 	ldrb.w	r3, [r3, #1292]	@ 0x50c
 80031e0:	461a      	mov	r2, r3
 80031e2:	89bb      	ldrh	r3, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 80031e8:	89fa      	ldrh	r2, [r7, #14]
 80031ea:	89bb      	ldrh	r3, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d003      	beq.n	80031f8 <vl53l8cx_get_ranging_data+0x414>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80031f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	80008001 	.word	0x80008001

08003208 <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
 800321c:	2308      	movs	r3, #8
 800321e:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f996 	bl	8003554 <vl53l8cx_dci_read_data>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	4313      	orrs	r3, r2
 8003230:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 250c 	ldrb.w	r2, [r3, #1292]	@ 0x50c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 350d 	ldrb.w	r3, [r3, #1293]	@ 0x50d
 800323e:	fb12 f303 	smulbb	r3, r2, r3
 8003242:	b2da      	uxtb	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	701a      	strb	r2, [r3, #0]

	return status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	2b10      	cmp	r3, #16
 8003266:	d002      	beq.n	800326e <vl53l8cx_set_resolution+0x1c>
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d055      	beq.n	8003318 <vl53l8cx_set_resolution+0xc6>
 800326c:	e0a9      	b.n	80033c2 <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
			status |= vl53l8cx_dci_read_data(p_dev,
 8003274:	2310      	movs	r3, #16
 8003276:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f96a 	bl	8003554 <vl53l8cx_dci_read_data>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	4313      	orrs	r3, r2
 8003288:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2240      	movs	r2, #64	@ 0x40
 800328e:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x06] = 64;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2240      	movs	r2, #64	@ 0x40
 8003296:	f883 2512 	strb.w	r2, [r3, #1298]	@ 0x512
			p_dev->temp_buffer[0x09] = 4;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2204      	movs	r2, #4
 800329e:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
			status |= vl53l8cx_dci_write_data(p_dev,
 80032a8:	2310      	movs	r3, #16
 80032aa:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9da 	bl	8003668 <vl53l8cx_dci_write_data>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
			status |= vl53l8cx_dci_read_data(p_dev,
 80032c4:	2308      	movs	r3, #8
 80032c6:	f245 4250 	movw	r2, #21584	@ 0x5450
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f942 	bl	8003554 <vl53l8cx_dci_read_data>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2204      	movs	r2, #4
 80032de:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
			p_dev->temp_buffer[0x01] = 4;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2204      	movs	r2, #4
 80032e6:	f883 250d 	strb.w	r2, [r3, #1293]	@ 0x50d
			p_dev->temp_buffer[0x04] = 8;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2208      	movs	r2, #8
 80032ee:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x05] = 8;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2208      	movs	r2, #8
 80032f6:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
			status |= vl53l8cx_dci_write_data(p_dev,
 8003300:	2308      	movs	r3, #8
 8003302:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f9ae 	bl	8003668 <vl53l8cx_dci_write_data>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	4313      	orrs	r3, r2
 8003314:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 8003316:	e057      	b.n	80033c8 <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
			status |= vl53l8cx_dci_read_data(p_dev,
 800331e:	2310      	movs	r3, #16
 8003320:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f915 	bl	8003554 <vl53l8cx_dci_read_data>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	4313      	orrs	r3, r2
 8003332:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2210      	movs	r2, #16
 8003338:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x06] = 16;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2210      	movs	r2, #16
 8003340:	f883 2512 	strb.w	r2, [r3, #1298]	@ 0x512
			p_dev->temp_buffer[0x09] = 1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
			status |= vl53l8cx_dci_write_data(p_dev,
 8003352:	2310      	movs	r3, #16
 8003354:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f985 	bl	8003668 <vl53l8cx_dci_write_data>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	4313      	orrs	r3, r2
 8003366:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
			status |= vl53l8cx_dci_read_data(p_dev,
 800336e:	2308      	movs	r3, #8
 8003370:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f8ed 	bl	8003554 <vl53l8cx_dci_read_data>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	4313      	orrs	r3, r2
 8003382:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2208      	movs	r2, #8
 8003388:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
			p_dev->temp_buffer[0x01] = 8;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2208      	movs	r2, #8
 8003390:	f883 250d 	strb.w	r2, [r3, #1293]	@ 0x50d
			p_dev->temp_buffer[0x04] = 4;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2204      	movs	r2, #4
 8003398:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x05] = 4;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2204      	movs	r2, #4
 80033a0:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
			status |= vl53l8cx_dci_write_data(p_dev,
 80033aa:	2308      	movs	r3, #8
 80033ac:	f245 4250 	movw	r2, #21584	@ 0x5450
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f959 	bl	8003668 <vl53l8cx_dci_write_data>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	4313      	orrs	r3, r2
 80033be:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 80033c0:	e002      	b.n	80033c8 <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 80033c2:	237f      	movs	r3, #127	@ 0x7f
 80033c4:	73fb      	strb	r3, [r7, #15]
			break;
 80033c6:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	4619      	mov	r1, r3
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fe f9d3 	bl	8001778 <_vl53l8cx_send_offset_data>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	4313      	orrs	r3, r2
 80033da:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fe fb95 	bl	8001b10 <_vl53l8cx_send_xtalk_data>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	73fb      	strb	r3, [r7, #15]

	return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b088      	sub	sp, #32
 80033fe:	af04      	add	r7, sp, #16
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
 8003410:	2301      	movs	r3, #1
 8003412:	9302      	str	r3, [sp, #8]
 8003414:	2301      	movs	r3, #1
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	1cfb      	adds	r3, r7, #3
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2304      	movs	r3, #4
 800341e:	f245 4258 	movw	r2, #21592	@ 0x5458
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9bf 	bl	80037a6 <vl53l8cx_dci_replace_data>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4313      	orrs	r3, r2
 8003430:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af04      	add	r7, sp, #16
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d903      	bls.n	800345c <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800345a:	d904      	bls.n	8003466 <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e01a      	b.n	800349c <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
 8003478:	2300      	movs	r3, #0
 800347a:	9302      	str	r3, [sp, #8]
 800347c:	2304      	movs	r3, #4
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	f107 0308 	add.w	r3, r7, #8
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2314      	movs	r3, #20
 8003488:	f245 425c 	movw	r2, #21596	@ 0x545c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f98a 	bl	80037a6 <vl53l8cx_dci_replace_data>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	4313      	orrs	r3, r2
 800349a:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
 80034c0:	2308      	movs	r3, #8
 80034c2:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f844 	bl	8003554 <vl53l8cx_dci_read_data>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d002      	beq.n	80034e2 <vl53l8cx_set_ranging_mode+0x3c>
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d00b      	beq.n	80034f8 <vl53l8cx_set_ranging_mode+0x52>
 80034e0:	e015      	b.n	800350e <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 250d 	strb.w	r2, [r3, #1293]	@ 0x50d
			p_dev->temp_buffer[0x03] = 0x3;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 250f 	strb.w	r2, [r3, #1295]	@ 0x50f
			single_range = 0x00;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
			break;
 80034f6:	e00d      	b.n	8003514 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2203      	movs	r2, #3
 80034fc:	f883 250d 	strb.w	r2, [r3, #1293]	@ 0x50d
			p_dev->temp_buffer[0x03] = 0x2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 250f 	strb.w	r2, [r3, #1295]	@ 0x50f
			single_range = 0x01;
 8003508:	2301      	movs	r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
			break;
 800350c:	e002      	b.n	8003514 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 800350e:	237f      	movs	r3, #127	@ 0x7f
 8003510:	73fb      	strb	r3, [r7, #15]
			break;
 8003512:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
 800351a:	2308      	movs	r3, #8
 800351c:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8a1 	bl	8003668 <vl53l8cx_dci_write_data>
 8003526:	4603      	mov	r3, r0
 8003528:	461a      	mov	r2, r3
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	4313      	orrs	r3, r2
 800352e:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8003530:	f107 0108 	add.w	r1, r7, #8
 8003534:	2304      	movs	r3, #4
 8003536:	f64d 1264 	movw	r2, #55652	@ 0xd964
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f894 	bl	8003668 <vl53l8cx_dci_write_data>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	4313      	orrs	r3, r2
 8003548:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	@ 0x30
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	330c      	adds	r3, #12
 800356c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800356e:	4a3d      	ldr	r2, [pc, #244]	@ (8003664 <vl53l8cx_dci_read_data+0x110>)
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	ca07      	ldmia	r2, {r0, r1, r2}
 8003576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8003580:	d903      	bls.n	800358a <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8003582:	23ff      	movs	r3, #255	@ 0xff
 8003584:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003588:	e065      	b.n	8003656 <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	b2db      	uxtb	r3, r3
 8003590:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	111b      	asrs	r3, r3, #4
 800359c:	b2db      	uxtb	r3, r3
 800359e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f107 0214 	add.w	r2, r7, #20
 80035b0:	230c      	movs	r3, #12
 80035b2:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 80035b6:	f7fd f97b 	bl	80008b0 <VL53L8CX_WrMulti>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80035c8:	2303      	movs	r3, #3
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	23ff      	movs	r3, #255	@ 0xff
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80035d4:	2201      	movs	r2, #1
 80035d6:	2104      	movs	r1, #4
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7fe f839 	bl	8001650 <_vl53l8cx_poll_for_answer>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 80035ec:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80035fa:	f7fd fa79 	bl	8000af0 <VL53L8CX_RdMulti>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003606:	4313      	orrs	r3, r2
 8003608:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	330c      	adds	r3, #12
 8003616:	b29b      	uxth	r3, r3
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7fd fb66 	bl	8000cec <VL53L8CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8003620:	2300      	movs	r3, #0
 8003622:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003624:	e011      	b.n	800364a <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8003626:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	440b      	add	r3, r1
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	440a      	add	r2, r1
 8003638:	f892 250c 	ldrb.w	r2, [r2, #1292]	@ 0x50c
 800363c:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800363e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003642:	b29b      	uxth	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800364a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800364e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8003652:	429a      	cmp	r2, r3
 8003654:	dbe7      	blt.n	8003626 <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 8003656:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 800365a:	4618      	mov	r0, r3
 800365c:	3728      	adds	r7, #40	@ 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	080092ec 	.word	0x080092ec

08003668 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	@ 0x30
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8003680:	2300      	movs	r3, #0
 8003682:	753b      	strb	r3, [r7, #20]
 8003684:	2300      	movs	r3, #0
 8003686:	757b      	strb	r3, [r7, #21]
 8003688:	2300      	movs	r3, #0
 800368a:	75bb      	strb	r3, [r7, #22]
 800368c:	230f      	movs	r3, #15
 800368e:	75fb      	strb	r3, [r7, #23]
 8003690:	2305      	movs	r3, #5
 8003692:	763b      	strb	r3, [r7, #24]
 8003694:	2301      	movs	r3, #1
 8003696:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	3308      	adds	r3, #8
 800369c:	121b      	asrs	r3, r3, #8
 800369e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80036a0:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3308      	adds	r3, #8
 80036a8:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80036aa:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 80036b2:	3334      	adds	r3, #52	@ 0x34
 80036b4:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80036bc:	d903      	bls.n	80036c6 <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 80036be:	23ff      	movs	r3, #255	@ 0xff
 80036c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80036c4:	e069      	b.n	800379a <vl53l8cx_dci_write_data+0x132>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	111b      	asrs	r3, r3, #4
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L8CX_SwapBuffer(data, data_size);
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	4619      	mov	r1, r3
 80036ea:	68b8      	ldr	r0, [r7, #8]
 80036ec:	f7fd fafe 	bl	8000cec <VL53L8CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80036f8:	e012      	b.n	8003720 <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 80036fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	441a      	add	r2, r3
 8003702:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003706:	3304      	adds	r3, #4
 8003708:	7811      	ldrb	r1, [r2, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	460a      	mov	r2, r1
 8003710:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8003714:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29b      	uxth	r3, r3
 800371e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003720:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003724:	2b00      	cmp	r3, #0
 8003726:	dae8      	bge.n	80036fa <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	3304      	adds	r3, #4
 8003736:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	461a      	mov	r2, r3
 8003742:	f107 0314 	add.w	r3, r7, #20
 8003746:	cb03      	ldmia	r3!, {r0, r1}
 8003748:	6010      	str	r0, [r2, #0]
 800374a:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 800374c:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f203 520c 	addw	r2, r3, #1292	@ 0x50c
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8003754:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8003756:	330c      	adds	r3, #12
 8003758:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800375a:	f7fd f8a9 	bl	80008b0 <VL53L8CX_WrMulti>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003766:	4313      	orrs	r3, r2
 8003768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800376c:	2303      	movs	r3, #3
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	23ff      	movs	r3, #255	@ 0xff
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003778:	2201      	movs	r2, #1
 800377a:	2104      	movs	r1, #4
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fd ff67 	bl	8001650 <_vl53l8cx_poll_for_answer>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800378a:	4313      	orrs	r3, r2
 800378c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L8CX_SwapBuffer(data, data_size);
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	4619      	mov	r1, r3
 8003794:	68b8      	ldr	r0, [r7, #8]
 8003796:	f7fd faa9 	bl	8000cec <VL53L8CX_SwapBuffer>
	}

	return status;
 800379a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3728      	adds	r7, #40	@ 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff fec8 	bl	8003554 <vl53l8cx_dci_read_data>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461a      	mov	r2, r3
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 80037ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4413      	add	r3, r2
 80037d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037d6:	6a39      	ldr	r1, [r7, #32]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fe5a 	bl	8008492 <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 80037de:	887b      	ldrh	r3, [r7, #2]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ff3f 	bl	8003668 <vl53l8cx_dci_write_data>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	75fb      	strb	r3, [r7, #23]

	return status;
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b088      	sub	sp, #32
 8003802:	af04      	add	r7, sp, #16
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 800380e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003812:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d104      	bne.n	8003824 <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 800381a:	2301      	movs	r3, #1
 800381c:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 800381e:	2304      	movs	r3, #4
 8003820:	73bb      	strb	r3, [r7, #14]
 8003822:	e003      	b.n	800382c <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8003824:	2300      	movs	r3, #0
 8003826:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8003828:	230c      	movs	r3, #12
 800382a:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
 8003832:	2300      	movs	r3, #0
 8003834:	9302      	str	r3, [sp, #8]
 8003836:	2304      	movs	r3, #4
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	f107 0308 	add.w	r3, r7, #8
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2308      	movs	r3, #8
 8003842:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffad 	bl	80037a6 <vl53l8cx_dci_replace_data>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	4313      	orrs	r3, r2
 8003854:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f203 510c 	addw	r1, r3, #1292	@ 0x50c
 800385c:	2311      	movs	r3, #17
 800385e:	9302      	str	r3, [sp, #8]
 8003860:	2301      	movs	r3, #1
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	f107 030e 	add.w	r3, r7, #14
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2314      	movs	r3, #20
 800386c:	f245 4288 	movw	r2, #21640	@ 0x5488
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff98 	bl	80037a6 <vl53l8cx_dci_replace_data>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	4313      	orrs	r3, r2
 800387e:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 800389a:	4aa7      	ldr	r2, [pc, #668]	@ (8003b38 <vl53l8cx_set_detection_thresholds+0x2ac>)
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038a4:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	75fb      	strb	r3, [r7, #23]
 80038ac:	e120      	b.n	8003af0 <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	7a1b      	ldrb	r3, [r3, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	2b12      	cmp	r3, #18
 80038b6:	f200 8117 	bhi.w	8003ae8 <vl53l8cx_set_detection_thresholds+0x25c>
 80038ba:	a201      	add	r2, pc, #4	@ (adr r2, 80038c0 <vl53l8cx_set_detection_thresholds+0x34>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	0800390d 	.word	0x0800390d
 80038c4:	0800395b 	.word	0x0800395b
 80038c8:	08003ae9 	.word	0x08003ae9
 80038cc:	080039a9 	.word	0x080039a9
 80038d0:	08003ae9 	.word	0x08003ae9
 80038d4:	08003ae9 	.word	0x08003ae9
 80038d8:	08003ae9 	.word	0x08003ae9
 80038dc:	080039f7 	.word	0x080039f7
 80038e0:	08003ae9 	.word	0x08003ae9
 80038e4:	08003ae9 	.word	0x08003ae9
 80038e8:	08003ae9 	.word	0x08003ae9
 80038ec:	08003ae9 	.word	0x08003ae9
 80038f0:	08003a45 	.word	0x08003a45
 80038f4:	08003ae9 	.word	0x08003ae9
 80038f8:	08003ae9 	.word	0x08003ae9
 80038fc:	08003ae9 	.word	0x08003ae9
 8003900:	08003ae9 	.word	0x08003ae9
 8003904:	08003ae9 	.word	0x08003ae9
 8003908:	08003a93 	.word	0x08003a93
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 800390c:	7dfa      	ldrb	r2, [r7, #23]
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	461a      	mov	r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4413      	add	r3, r2
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	7dfa      	ldrb	r2, [r7, #23]
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	461a      	mov	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	4413      	add	r3, r2
 800392e:	008a      	lsls	r2, r1, #2
 8003930:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8003932:	7dfa      	ldrb	r2, [r7, #23]
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	461a      	mov	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	4413      	add	r3, r2
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	7dfa      	ldrb	r2, [r7, #23]
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	461a      	mov	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4413      	add	r3, r2
 8003954:	008a      	lsls	r2, r1, #2
 8003956:	605a      	str	r2, [r3, #4]
				break;
 8003958:	e0c7      	b.n	8003aea <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 800395a:	7dfa      	ldrb	r2, [r7, #23]
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	461a      	mov	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	4413      	add	r3, r2
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	7dfa      	ldrb	r2, [r7, #23]
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	461a      	mov	r2, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4413      	add	r3, r2
 800397c:	02ca      	lsls	r2, r1, #11
 800397e:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8003980:	7dfa      	ldrb	r2, [r7, #23]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	461a      	mov	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4413      	add	r3, r2
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	7dfa      	ldrb	r2, [r7, #23]
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	461a      	mov	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	02ca      	lsls	r2, r1, #11
 80039a4:	605a      	str	r2, [r3, #4]
				break;
 80039a6:	e0a0      	b.n	8003aea <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 80039a8:	7dfa      	ldrb	r2, [r7, #23]
 80039aa:	4613      	mov	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	461a      	mov	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	7dfa      	ldrb	r2, [r7, #23]
 80039bc:	4613      	mov	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	461a      	mov	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	4413      	add	r3, r2
 80039ca:	01ca      	lsls	r2, r1, #7
 80039cc:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 80039ce:	7dfa      	ldrb	r2, [r7, #23]
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	461a      	mov	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	4413      	add	r3, r2
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	7dfa      	ldrb	r2, [r7, #23]
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	461a      	mov	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4413      	add	r3, r2
 80039f0:	01ca      	lsls	r2, r1, #7
 80039f2:	605a      	str	r2, [r3, #4]
				break;
 80039f4:	e079      	b.n	8003aea <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80039f6:	7dfa      	ldrb	r2, [r7, #23]
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	461a      	mov	r2, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	7dfa      	ldrb	r2, [r7, #23]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	461a      	mov	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4413      	add	r3, r2
 8003a18:	02ca      	lsls	r2, r1, #11
 8003a1a:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8003a1c:	7dfa      	ldrb	r2, [r7, #23]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	461a      	mov	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	7dfa      	ldrb	r2, [r7, #23]
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	02ca      	lsls	r2, r1, #11
 8003a40:	605a      	str	r2, [r3, #4]
				break;
 8003a42:	e052      	b.n	8003aea <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 8003a44:	7dfa      	ldrb	r2, [r7, #23]
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4413      	add	r3, r2
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	7dfa      	ldrb	r2, [r7, #23]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	461a      	mov	r2, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	020a      	lsls	r2, r1, #8
 8003a68:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8003a6a:	7dfa      	ldrb	r2, [r7, #23]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	461a      	mov	r2, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	4413      	add	r3, r2
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	7dfa      	ldrb	r2, [r7, #23]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	461a      	mov	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	020a      	lsls	r2, r1, #8
 8003a8e:	605a      	str	r2, [r3, #4]
				break;
 8003a90:	e02b      	b.n	8003aea <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 8003a92:	7dfa      	ldrb	r2, [r7, #23]
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	7df9      	ldrb	r1, [r7, #23]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	440b      	add	r3, r1
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4419      	add	r1, r3
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8003abc:	7dfa      	ldrb	r2, [r7, #23]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4413      	add	r3, r2
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	7df9      	ldrb	r1, [r7, #23]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	440b      	add	r3, r1
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	4419      	add	r1, r3
 8003ade:	4613      	mov	r3, r2
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
				break;
 8003ae6:	e000      	b.n	8003aea <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 8003ae8:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	3301      	adds	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003af4:	f67f aedb 	bls.w	80038ae <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8003af8:	f107 010c 	add.w	r1, r7, #12
 8003afc:	2308      	movs	r3, #8
 8003afe:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fdb0 	bl	8003668 <vl53l8cx_dci_write_data>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	7dbb      	ldrb	r3, [r7, #22]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 8003b12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b16:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fda3 	bl	8003668 <vl53l8cx_dci_write_data>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	7dbb      	ldrb	r3, [r7, #22]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 8003b2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	080092f8 	.word	0x080092f8

08003b3c <VL53L8CX_RegisterBusIO>:
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */

int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <VL53L8CX_RegisterBusIO+0x16>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003b52:	f06f 0301 	mvn.w	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e027      	b.n	8003baa <VL53L8CX_RegisterBusIO+0x6e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	605a      	str	r2, [r3, #4]
    //pObj->IO.Address   = pIO->Address;
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
  //  pObj->Dev.platform.address = pIO->Address;
    pObj->Dev.platform.Read = pIO->ReadReg;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	61da      	str	r2, [r3, #28]
    //pObj->Dev.platform.GetTick = pIO->GetTick;

    if (pObj->IO.Init != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <VL53L8CX_RegisterBusIO+0x68>
    {
      ret = pObj->IO.Init();
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4798      	blx	r3
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	e002      	b.n	8003baa <VL53L8CX_RegisterBusIO+0x6e>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003bc2:	f06f 0301 	mvn.w	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e02e      	b.n	8003c28 <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3ad4 	ldrb.w	r3, [r3, #2772]	@ 0xad4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e025      	b.n	8003c28 <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3318      	adds	r3, #24
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe f8e1 	bl	8001da8 <vl53l8cx_init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e019      	b.n	8003c28 <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2ad5 	strb.w	r2, [r3, #2773]	@ 0xad5
    pObj->IsBlocking = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2ad6 	strb.w	r2, [r3, #2774]	@ 0xad6
    pObj->IsContinuous = 0U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2ad7 	strb.w	r2, [r3, #2775]	@ 0xad7
    pObj->IsAmbientEnabled = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    pObj->IsSignalEnabled = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsInitialized = 1U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2ad4 	strb.w	r2, [r3, #2772]	@ 0xad4
    ret = VL53L8CX_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c28:	68fb      	ldr	r3, [r7, #12]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003c40:	f06f 0301 	mvn.w	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e018      	b.n	8003c7a <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3ad4 	ldrb.w	r3, [r3, #2772]	@ 0xad4
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d110      	bne.n	8003c74 <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4798      	blx	r3
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 8003c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e009      	b.n	8003c7a <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2ad4 	strb.w	r2, [r3, #2772]	@ 0xad4
 8003c72:	e002      	b.n	8003c7a <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <VL53L8CX_ReadID+0x22>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003ca6:	f06f 0301 	mvn.w	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e045      	b.n	8003d3a <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fde5 	bl	8000888 <VL53L8CX_WrByte>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	7afb      	ldrb	r3, [r7, #11]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3318      	adds	r3, #24
 8003ccc:	f107 020a 	add.w	r2, r7, #10
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fdc6 	bl	8000864 <VL53L8CX_RdByte>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	f107 0209 	add.w	r2, r7, #9
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fdb9 	bl	8000864 <VL53L8CX_RdByte>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	2202      	movs	r2, #2
 8003d02:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc fdbe 	bl	8000888 <VL53L8CX_WrByte>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	7afb      	ldrb	r3, [r7, #11]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8003d16:	7afb      	ldrb	r3, [r7, #11]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8003d1c:	7abb      	ldrb	r3, [r7, #10]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	7a7a      	ldrb	r2, [r7, #9]
 8003d22:	441a      	add	r2, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	e005      	b.n	8003d3a <VL53L8CX_ReadID+0xb6>

    }
    else
    {
      *pId = 0;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <VL53L8CX_GetCapabilities+0x16>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003d5a:	f06f 0301 	mvn.w	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e00d      	b.n	8003d7e <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2240      	movs	r2, #64	@ 0x40
 8003d66:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2201      	movs	r2, #1
 8003d78:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01b      	beq.n	8003dd8 <VL53L8CX_ConfigProfile+0x4c>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d018      	beq.n	8003dd8 <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 8003db8:	7c7b      	ldrb	r3, [r7, #17]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d822      	bhi.n	8003e06 <VL53L8CX_ConfigProfile+0x7a>
 8003dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc8 <VL53L8CX_ConfigProfile+0x3c>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003ddf 	.word	0x08003ddf
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	08003df3 	.word	0x08003df3
 8003dd4:	08003dfd 	.word	0x08003dfd
    return VL53L8CX_INVALID_PARAM;
 8003dd8:	f06f 0301 	mvn.w	r3, #1
 8003ddc:	e070      	b.n	8003ec0 <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8003dde:	2310      	movs	r3, #16
 8003de0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 8003de2:	2301      	movs	r3, #1
 8003de4:	74bb      	strb	r3, [r7, #18]
    break;
 8003de6:	e016      	b.n	8003e16 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8003de8:	2310      	movs	r3, #16
 8003dea:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8003dec:	2303      	movs	r3, #3
 8003dee:	74bb      	strb	r3, [r7, #18]
    break;
 8003df0:	e011      	b.n	8003e16 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8003df2:	2340      	movs	r3, #64	@ 0x40
 8003df4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 8003df6:	2301      	movs	r3, #1
 8003df8:	74bb      	strb	r3, [r7, #18]
    break;
 8003dfa:	e00c      	b.n	8003e16 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8003dfc:	2340      	movs	r3, #64	@ 0x40
 8003dfe:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8003e00:	2303      	movs	r3, #3
 8003e02:	74bb      	strb	r3, [r7, #18]
    break;
 8003e04:	e007      	b.n	8003e16 <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 8003e06:	2300      	movs	r3, #0
 8003e08:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 8003e0e:	f06f 0301 	mvn.w	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
    break;
 8003e14:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	e04f      	b.n	8003ec0 <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3318      	adds	r3, #24
 8003e24:	7cfa      	ldrb	r2, [r7, #19]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fa12 	bl	8003252 <vl53l8cx_set_resolution>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e040      	b.n	8003ebe <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3318      	adds	r3, #24
 8003e40:	7cba      	ldrb	r2, [r7, #18]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fb2e 	bl	80034a6 <vl53l8cx_set_ranging_mode>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e032      	b.n	8003ebe <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff faec 	bl	800343c <vl53l8cx_set_integration_time_ms>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e025      	b.n	8003ebe <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3318      	adds	r3, #24
 8003e76:	7afa      	ldrb	r2, [r7, #11]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fabd 	bl	80033fa <vl53l8cx_set_ranging_frequency_hz>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 8003e86:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e017      	b.n	8003ebe <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9

    ret = VL53L8CX_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003ebe:	697b      	ldr	r3, [r7, #20]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 8003ed2:	f06f 0303 	mvn.w	r3, #3
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <VL53L8CX_ConfigIT+0x1a>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003efe:	f06f 0301 	mvn.w	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e09f      	b.n	8004046 <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2bff      	cmp	r3, #255	@ 0xff
 8003f0c:	d113      	bne.n	8003f36 <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3318      	adds	r3, #24
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fc72 	bl	80037fe <vl53l8cx_set_detection_thresholds_enable>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	7abb      	ldrb	r3, [r7, #10]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8003f24:	7abb      	ldrb	r3, [r7, #10]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <VL53L8CX_ConfigIT+0x4c>
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	e000      	b.n	8003f32 <VL53L8CX_ConfigIT+0x4e>
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e087      	b.n	8004046 <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3318      	adds	r3, #24
 8003f3a:	f107 0209 	add.w	r2, r7, #9
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff f961 	bl	8003208 <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	72fb      	strb	r3, [r7, #11]
 8003f4a:	e044      	b.n	8003fd6 <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8003f4c:	7afa      	ldrb	r2, [r7, #11]
 8003f4e:	4940      	ldr	r1, [pc, #256]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8003f50:	4613      	mov	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	330a      	adds	r3, #10
 8003f5c:	7afa      	ldrb	r2, [r7, #11]
 8003f5e:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 8003f60:	7afa      	ldrb	r2, [r7, #11]
 8003f62:	493b      	ldr	r1, [pc, #236]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3308      	adds	r3, #8
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	7afa      	ldrb	r2, [r7, #11]
 8003f7a:	b2d8      	uxtb	r0, r3
 8003f7c:	4934      	ldr	r1, [pc, #208]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3309      	adds	r3, #9
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 8003f8e:	7afa      	ldrb	r2, [r7, #11]
 8003f90:	492f      	ldr	r1, [pc, #188]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	330b      	adds	r3, #11
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	7afa      	ldrb	r2, [r7, #11]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	4929      	ldr	r1, [pc, #164]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	7afa      	ldrb	r2, [r7, #11]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	4923      	ldr	r1, [pc, #140]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3304      	adds	r3, #4
 8003fce:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	72fb      	strb	r3, [r7, #11]
 8003fd6:	7a7b      	ldrb	r3, [r7, #9]
 8003fd8:	7afa      	ldrb	r2, [r7, #11]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d3b6      	bcc.n	8003f4c <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 8003fde:	7afa      	ldrb	r2, [r7, #11]
 8003fe0:	491b      	ldr	r1, [pc, #108]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	330a      	adds	r3, #10
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	7afa      	ldrb	r2, [r7, #11]
 8003ff2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ff6:	b2d8      	uxtb	r0, r3
 8003ff8:	4915      	ldr	r1, [pc, #84]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	330a      	adds	r3, #10
 8004006:	4602      	mov	r2, r0
 8004008:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3318      	adds	r3, #24
 800400e:	4910      	ldr	r1, [pc, #64]	@ (8004050 <VL53L8CX_ConfigIT+0x16c>)
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fc3b 	bl	800388c <vl53l8cx_set_detection_thresholds>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	7abb      	ldrb	r3, [r7, #10]
 800401c:	4313      	orrs	r3, r2
 800401e:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3318      	adds	r3, #24
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fbe9 	bl	80037fe <vl53l8cx_set_detection_thresholds_enable>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	7abb      	ldrb	r3, [r7, #10]
 8004032:	4313      	orrs	r3, r2
 8004034:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8004036:	7abb      	ldrb	r3, [r7, #10]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <VL53L8CX_ConfigIT+0x15e>
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	e000      	b.n	8004044 <VL53L8CX_ConfigIT+0x160>
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	200021fc 	.word	0x200021fc

08004054 <VL53L8CX_GetDistance>:
  }
  printf("Hiiiiiiiidhsfhjsf\n");
  return ret;
}*/
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  int32_t ret=0;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  printf("Hiiiiiiiidhsfhjsf\n");
 8004062:	482a      	ldr	r0, [pc, #168]	@ (800410c <VL53L8CX_GetDistance+0xb8>)
 8004064:	f004 f8ba 	bl	80081dc <puts>
  ret = VL53L8CX_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <VL53L8CX_GetDistance+0x24>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <VL53L8CX_GetDistance+0x32>
  {
	  printf("VL53L8CX_INVALID_PARAM\n");
 8004078:	4825      	ldr	r0, [pc, #148]	@ (8004110 <VL53L8CX_GetDistance+0xbc>)
 800407a:	f004 f8af 	bl	80081dc <puts>
    ret = VL53L8CX_INVALID_PARAM;
 800407e:	f06f 0301 	mvn.w	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e00a      	b.n	800409c <VL53L8CX_GetDistance+0x48>
  }
  else if (pObj->IsRanging == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3ad5 	ldrb.w	r3, [r3, #2773]	@ 0xad5
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <VL53L8CX_GetDistance+0x48>
   {  printf("Ranging Error\n");
 8004090:	4820      	ldr	r0, [pc, #128]	@ (8004114 <VL53L8CX_GetDistance+0xc0>)
 8004092:	f004 f8a3 	bl	80081dc <puts>
     ret = VL53L8CX_ERROR;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	60fb      	str	r3, [r7, #12]
   }
  if (ret == VL53L8CX_OK)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d11d      	bne.n	80040de <VL53L8CX_GetDistance+0x8a>
    {  printf("Vl53l8cx is ok\n");
 80040a2:	481d      	ldr	r0, [pc, #116]	@ (8004118 <VL53L8CX_GetDistance+0xc4>)
 80040a4:	f004 f89a 	bl	80081dc <puts>
    	if (pObj->IsBlocking == 1U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3ad6 	ldrb.w	r3, [r3, #2774]	@ 0xad6
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d10d      	bne.n	80040ce <VL53L8CX_GetDistance+0x7a>
        {  printf("IS blocking =1\n");
 80040b2:	481a      	ldr	r0, [pc, #104]	@ (800411c <VL53L8CX_GetDistance+0xc8>)
 80040b4:	f004 f892 	bl	80081dc <puts>
          ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 80040b8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f91b 	bl	80042f8 <vl53l8cx_poll_for_measurement>
 80040c2:	60f8      	str	r0, [r7, #12]
          printf(" return value after poll = %d\n",ret);
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	4816      	ldr	r0, [pc, #88]	@ (8004120 <VL53L8CX_GetDistance+0xcc>)
 80040c8:	f004 f818 	bl	80080fc <iprintf>
 80040cc:	e007      	b.n	80040de <VL53L8CX_GetDistance+0x8a>
        }
        else
        {  printf("is blocking !=1\n");
 80040ce:	4815      	ldr	r0, [pc, #84]	@ (8004124 <VL53L8CX_GetDistance+0xd0>)
 80040d0:	f004 f884 	bl	80081dc <puts>
          ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 80040d4:	2100      	movs	r1, #0
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f90e 	bl	80042f8 <vl53l8cx_poll_for_measurement>
 80040dc:	60f8      	str	r0, [r7, #12]
        }
    }

  printf("getDistance done\n");
 80040de:	4812      	ldr	r0, [pc, #72]	@ (8004128 <VL53L8CX_GetDistance+0xd4>)
 80040e0:	f004 f87c 	bl	80081dc <puts>

  /* a new measure is available if no error is returned by the poll function */
   if (ret == VL53L8CX_OK)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d107      	bne.n	80040fa <VL53L8CX_GetDistance+0xa6>
   {  printf("Everything is good and we are about to get the result\n");
 80040ea:	4810      	ldr	r0, [pc, #64]	@ (800412c <VL53L8CX_GetDistance+0xd8>)
 80040ec:	f004 f876 	bl	80081dc <puts>
     ret = vl53l8cx_get_result(pObj, pResult);
 80040f0:	6839      	ldr	r1, [r7, #0]
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f94a 	bl	800438c <vl53l8cx_get_result>
 80040f8:	60f8      	str	r0, [r7, #12]
   }
   printf("we have a result \n");
 80040fa:	480d      	ldr	r0, [pc, #52]	@ (8004130 <VL53L8CX_GetDistance+0xdc>)
 80040fc:	f004 f86e 	bl	80081dc <puts>
  return ret;
 8004100:	68fb      	ldr	r3, [r7, #12]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	08009300 	.word	0x08009300
 8004110:	08009314 	.word	0x08009314
 8004114:	0800932c 	.word	0x0800932c
 8004118:	0800933c 	.word	0x0800933c
 800411c:	0800934c 	.word	0x0800934c
 8004120:	0800935c 	.word	0x0800935c
 8004124:	0800937c 	.word	0x0800937c
 8004128:	0800938c 	.word	0x0800938c
 800412c:	080093a0 	.word	0x080093a0
 8004130:	080093d8 	.word	0x080093d8

08004134 <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004144:	f06f 0301 	mvn.w	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e04c      	b.n	80041e6 <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3318      	adds	r3, #24
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe fb91 	bl	8002878 <vl53l8cx_start_ranging>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d141      	bne.n	80041e0 <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2ad5 	strb.w	r2, [r3, #2773]	@ 0xad5
    ret = VL53L8CX_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	3b01      	subs	r3, #1
 800416c:	2b03      	cmp	r3, #3
 800416e:	d82f      	bhi.n	80041d0 <VL53L8CX_Start+0x9c>
 8004170:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <VL53L8CX_Start+0x44>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004189 	.word	0x08004189
 800417c:	0800419b 	.word	0x0800419b
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041bf 	.word	0x080041bf
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2ad7 	strb.w	r2, [r3, #2775]	@ 0xad7
        pObj->IsBlocking = 1U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2ad6 	strb.w	r2, [r3, #2774]	@ 0xad6
        break;
 8004198:	e025      	b.n	80041e6 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2ad7 	strb.w	r2, [r3, #2775]	@ 0xad7
        pObj->IsBlocking = 1U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2ad6 	strb.w	r2, [r3, #2774]	@ 0xad6
        break;
 80041aa:	e01c      	b.n	80041e6 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2ad7 	strb.w	r2, [r3, #2775]	@ 0xad7
        pObj->IsBlocking = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2ad6 	strb.w	r2, [r3, #2774]	@ 0xad6
        break;
 80041bc:	e013      	b.n	80041e6 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2ad7 	strb.w	r2, [r3, #2775]	@ 0xad7
        pObj->IsBlocking = 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2ad6 	strb.w	r2, [r3, #2774]	@ 0xad6
        break;
 80041ce:	e00a      	b.n	80041e6 <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2ad5 	strb.w	r2, [r3, #2773]	@ 0xad5
        ret = VL53L8CX_INVALID_PARAM;
 80041d8:	f06f 0301 	mvn.w	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
        break;
 80041de:	e002      	b.n	80041e6 <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80041fe:	f06f 0301 	mvn.w	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e01a      	b.n	800423c <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3ad5 	ldrb.w	r3, [r3, #2773]	@ 0xad5
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e011      	b.n	800423c <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3318      	adds	r3, #24
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fcc1 	bl	8002ba4 <vl53l8cx_stop_ranging>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2ad5 	strb.w	r2, [r3, #2773]	@ 0xad5
    ret = VL53L8CX_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e002      	b.n	800423c <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
 800423a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004256:	f06f 0301 	mvn.w	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e01a      	b.n	8004294 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d006      	beq.n	8004272 <VL53L8CX_SetPowerMode+0x2c>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d003      	beq.n	8004272 <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 800426a:	f06f 0301 	mvn.w	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e010      	b.n	8004294 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3318      	adds	r3, #24
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe fa1d 	bl	80026bc <vl53l8cx_set_power_mode>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	e001      	b.n	8004294 <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004294:	68fb      	ldr	r3, [r7, #12]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <VL53L8CX_GetPowerMode+0x16>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80042b4:	f06f 0301 	mvn.w	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e017      	b.n	80042ec <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3318      	adds	r3, #24
 80042c0:	f107 020b 	add.w	r2, r7, #11
 80042c4:	4611      	mov	r1, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe f9a2 	bl	8002610 <vl53l8cx_get_power_mode>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d006      	beq.n	80042e0 <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e005      	b.n	80042ec <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 80042e0:	7afb      	ldrb	r3, [r7, #11]
 80042e2:	461a      	mov	r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80042ec:	68fb      	ldr	r3, [r7, #12]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  int32_t ret=0;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]

	printf("am i stuck here  in poll\n");
 800430a:	481b      	ldr	r0, [pc, #108]	@ (8004378 <vl53l8cx_poll_for_measurement+0x80>)
 800430c:	f003 ff66 	bl	80081dc <puts>
  if (pObj == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <vl53l8cx_poll_for_measurement+0x2c>
  {

  	printf("is pObj null and invalid param\n");
 8004316:	4819      	ldr	r0, [pc, #100]	@ (800437c <vl53l8cx_poll_for_measurement+0x84>)
 8004318:	f003 ff60 	bl	80081dc <puts>
    ret = VL53L8CX_INVALID_PARAM;
 800431c:	f06f 0301 	mvn.w	r3, #1
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e021      	b.n	8004368 <vl53l8cx_poll_for_measurement+0x70>
  }
  else
  {
	  printf("pobj is vlaud param\n");
 8004324:	4816      	ldr	r0, [pc, #88]	@ (8004380 <vl53l8cx_poll_for_measurement+0x88>)
 8004326:	f003 ff59 	bl	80081dc <puts>
    ret =  VL53L8CX_TIMEOUT;
 800432a:	f06f 0302 	mvn.w	r3, #2
 800432e:	617b      	str	r3, [r7, #20]
    TickStart = HAL_GetTick();
 8004330:	f000 fb26 	bl	8004980 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]
    printf("is IO tick the problem??????????????????\n");
 8004336:	4813      	ldr	r0, [pc, #76]	@ (8004384 <vl53l8cx_poll_for_measurement+0x8c>)
 8004338:	f003 ff50 	bl	80081dc <puts>
    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3318      	adds	r3, #24
 8004340:	f107 020f 	add.w	r2, r7, #15
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fcfc 	bl	8002d44 <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d102      	bne.n	8004358 <vl53l8cx_poll_for_measurement+0x60>
      {
        ret = VL53L8CX_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
        break;
 8004356:	e007      	b.n	8004368 <vl53l8cx_poll_for_measurement+0x70>
      }
    } while ((HAL_GetTick() - TickStart) < Timeout);
 8004358:	f000 fb12 	bl	8004980 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d8e9      	bhi.n	800433c <vl53l8cx_poll_for_measurement+0x44>

  }
printf("Pol is done bravo\n");
 8004368:	4807      	ldr	r0, [pc, #28]	@ (8004388 <vl53l8cx_poll_for_measurement+0x90>)
 800436a:	f003 ff37 	bl	80081dc <puts>
  return ret;
 800436e:	697b      	ldr	r3, [r7, #20]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	080093ec 	.word	0x080093ec
 800437c:	08009408 	.word	0x08009408
 8004380:	08009428 	.word	0x08009428
 8004384:	0800943c 	.word	0x0800943c
 8004388:	08009468 	.word	0x08009468

0800438c <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <vl53l8cx_get_result+0x16>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <vl53l8cx_get_result+0x2a>
  {
	  printf("result is null \n");
 80043a2:	486f      	ldr	r0, [pc, #444]	@ (8004560 <vl53l8cx_get_result+0x1d4>)
 80043a4:	f003 ff1a 	bl	80081dc <puts>
	  printf(" rangin data is here everythinf is okay \n");
 80043a8:	486e      	ldr	r0, [pc, #440]	@ (8004564 <vl53l8cx_get_result+0x1d8>)
 80043aa:	f003 ff17 	bl	80081dc <puts>
    ret = VL53L8CX_INVALID_PARAM;
 80043ae:	f06f 0301 	mvn.w	r3, #1
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e0cf      	b.n	8004556 <vl53l8cx_get_result+0x1ca>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3318      	adds	r3, #24
 80043ba:	f107 0208 	add.w	r2, r7, #8
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe ff21 	bl	8003208 <vl53l8cx_get_resolution>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <vl53l8cx_get_result+0x48>
  {
    ret = VL53L8CX_ERROR;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	e0c0      	b.n	8004556 <vl53l8cx_get_result+0x1ca>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3318      	adds	r3, #24
 80043d8:	4963      	ldr	r1, [pc, #396]	@ (8004568 <vl53l8cx_get_result+0x1dc>)
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd02 	bl	8002de4 <vl53l8cx_get_ranging_data>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <vl53l8cx_get_result+0x62>
  {
    ret = VL53L8CX_ERROR;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e0b3      	b.n	8004556 <vl53l8cx_get_result+0x1ca>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 80043ee:	7a3b      	ldrb	r3, [r7, #8]
 80043f0:	461a      	mov	r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	72fb      	strb	r3, [r7, #11]
 80043fa:	e0a5      	b.n	8004548 <vl53l8cx_get_result+0x1bc>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 80043fc:	7afb      	ldrb	r3, [r7, #11]
 80043fe:	7afa      	ldrb	r2, [r7, #11]
 8004400:	4959      	ldr	r1, [pc, #356]	@ (8004568 <vl53l8cx_get_result+0x1dc>)
 8004402:	440b      	add	r3, r1
 8004404:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 8004408:	6839      	ldr	r1, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3304      	adds	r3, #4
 8004416:	4602      	mov	r2, r0
 8004418:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 800441a:	2300      	movs	r3, #0
 800441c:	72bb      	strb	r3, [r7, #10]
 800441e:	e087      	b.n	8004530 <vl53l8cx_get_result+0x1a4>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8004420:	7afa      	ldrb	r2, [r7, #11]
 8004422:	7abb      	ldrb	r3, [r7, #10]
 8004424:	4413      	add	r3, r2
 8004426:	4a50      	ldr	r2, [pc, #320]	@ (8004568 <vl53l8cx_get_result+0x1dc>)
 8004428:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004434:	7afa      	ldrb	r2, [r7, #11]
 8004436:	7ab8      	ldrb	r0, [r7, #10]
 8004438:	461c      	mov	r4, r3
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	4403      	add	r3, r0
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8004450:	2b01      	cmp	r3, #1
 8004452:	d116      	bne.n	8004482 <vl53l8cx_get_result+0xf6>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8004454:	7afb      	ldrb	r3, [r7, #11]
 8004456:	4a44      	ldr	r2, [pc, #272]	@ (8004568 <vl53l8cx_get_result+0x1dc>)
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	7afa      	ldrb	r2, [r7, #11]
 8004460:	7ab8      	ldrb	r0, [r7, #10]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	4403      	add	r3, r0
 8004474:	3302      	adds	r3, #2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3308      	adds	r3, #8
 800447c:	edc3 7a00 	vstr	s15, [r3]
 8004480:	e00d      	b.n	800449e <vl53l8cx_get_result+0x112>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8004482:	7afa      	ldrb	r2, [r7, #11]
 8004484:	7ab8      	ldrb	r0, [r7, #10]
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	4403      	add	r3, r0
 8004490:	3302      	adds	r3, #2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	3308      	adds	r3, #8
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d119      	bne.n	80044dc <vl53l8cx_get_result+0x150>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80044a8:	7afa      	ldrb	r2, [r7, #11]
 80044aa:	7abb      	ldrb	r3, [r7, #10]
 80044ac:	4413      	add	r3, r2
 80044ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004568 <vl53l8cx_get_result+0x1dc>)
 80044b0:	3390      	adds	r3, #144	@ 0x90
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 80044b8:	7afa      	ldrb	r2, [r7, #11]
 80044ba:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	4403      	add	r3, r0
 80044ce:	3304      	adds	r3, #4
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3304      	adds	r3, #4
 80044d6:	edc3 7a00 	vstr	s15, [r3]
 80044da:	e00d      	b.n	80044f8 <vl53l8cx_get_result+0x16c>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80044dc:	7afa      	ldrb	r2, [r7, #11]
 80044de:	7ab8      	ldrb	r0, [r7, #10]
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	4403      	add	r3, r0
 80044ea:	3304      	adds	r3, #4
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	3304      	adds	r3, #4
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80044f8:	7afa      	ldrb	r2, [r7, #11]
 80044fa:	7abb      	ldrb	r3, [r7, #10]
 80044fc:	4413      	add	r3, r2
 80044fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004568 <vl53l8cx_get_result+0x1dc>)
 8004500:	4413      	add	r3, r2
 8004502:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 8004506:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 8004508:	7a7b      	ldrb	r3, [r7, #9]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f82e 	bl	800456c <vl53l8cx_map_target_status>
 8004510:	4603      	mov	r3, r0
 8004512:	7afa      	ldrb	r2, [r7, #11]
 8004514:	7ab8      	ldrb	r0, [r7, #10]
 8004516:	461c      	mov	r4, r3
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	4403      	add	r3, r0
 8004522:	3302      	adds	r3, #2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 800452a:	7abb      	ldrb	r3, [r7, #10]
 800452c:	3301      	adds	r3, #1
 800452e:	72bb      	strb	r3, [r7, #10]
 8004530:	7afb      	ldrb	r3, [r7, #11]
 8004532:	4a0d      	ldr	r2, [pc, #52]	@ (8004568 <vl53l8cx_get_result+0x1dc>)
 8004534:	4413      	add	r3, r2
 8004536:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800453a:	7aba      	ldrb	r2, [r7, #10]
 800453c:	429a      	cmp	r2, r3
 800453e:	f4ff af6f 	bcc.w	8004420 <vl53l8cx_get_result+0x94>
    for (i = 0; i < resolution; i++)
 8004542:	7afb      	ldrb	r3, [r7, #11]
 8004544:	3301      	adds	r3, #1
 8004546:	72fb      	strb	r3, [r7, #11]
 8004548:	7a3b      	ldrb	r3, [r7, #8]
 800454a:	7afa      	ldrb	r2, [r7, #11]
 800454c:	429a      	cmp	r2, r3
 800454e:	f4ff af55 	bcc.w	80043fc <vl53l8cx_get_result+0x70>
      }
    }

    ret = VL53L8CX_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bd90      	pop	{r4, r7, pc}
 8004560:	0800947c 	.word	0x0800947c
 8004564:	0800948c 	.word	0x0800948c
 8004568:	200024fc 	.word	0x200024fc

0800456c <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	2b05      	cmp	r3, #5
 800457a:	d002      	beq.n	8004582 <vl53l8cx_map_target_status+0x16>
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	2b09      	cmp	r3, #9
 8004580:	d102      	bne.n	8004588 <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
 8004586:	e007      	b.n	8004598 <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800458e:	23ff      	movs	r3, #255	@ 0xff
 8004590:	73fb      	strb	r3, [r7, #15]
 8004592:	e001      	b.n	8004598 <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80045b2:	4b16      	ldr	r3, [pc, #88]	@ (800460c <BSP_LED_Init+0x64>)
 80045b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b6:	4a15      	ldr	r2, [pc, #84]	@ (800460c <BSP_LED_Init+0x64>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045be:	4b13      	ldr	r3, [pc, #76]	@ (800460c <BSP_LED_Init+0x64>)
 80045c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80045ca:	2320      	movs	r3, #32
 80045cc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80045ce:	2301      	movs	r3, #1
 80045d0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d6:	2303      	movs	r3, #3
 80045d8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004610 <BSP_LED_Init+0x68>)
 80045de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e2:	f107 020c 	add.w	r2, r7, #12
 80045e6:	4611      	mov	r1, r2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fb67 	bl	8004cbc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	4a07      	ldr	r2, [pc, #28]	@ (8004610 <BSP_LED_Init+0x68>)
 80045f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f6:	2120      	movs	r1, #32
 80045f8:	2200      	movs	r2, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fdc2 	bl	8005184 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	2000003c 	.word	0x2000003c

08004614 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	460a      	mov	r2, r1
 800461e:	71fb      	strb	r3, [r7, #7]
 8004620:	4613      	mov	r3, r2
 8004622:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8004624:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <BSP_PB_Init+0xc4>)
 8004626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004628:	4a2b      	ldr	r2, [pc, #172]	@ (80046d8 <BSP_PB_Init+0xc4>)
 800462a:	f043 0304 	orr.w	r3, r3, #4
 800462e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004630:	4b29      	ldr	r3, [pc, #164]	@ (80046d8 <BSP_PB_Init+0xc4>)
 8004632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800463c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004640:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8004642:	2302      	movs	r3, #2
 8004644:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004646:	2302      	movs	r3, #2
 8004648:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800464a:	79bb      	ldrb	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10c      	bne.n	800466a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	4a21      	ldr	r2, [pc, #132]	@ (80046dc <BSP_PB_Init+0xc8>)
 8004658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465c:	f107 020c 	add.w	r2, r7, #12
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fb2a 	bl	8004cbc <HAL_GPIO_Init>
 8004668:	e031      	b.n	80046ce <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800466a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800466e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	4a1a      	ldr	r2, [pc, #104]	@ (80046dc <BSP_PB_Init+0xc8>)
 8004674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004678:	f107 020c 	add.w	r2, r7, #12
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fb1c 	bl	8004cbc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <BSP_PB_Init+0xcc>)
 800468a:	441a      	add	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	4915      	ldr	r1, [pc, #84]	@ (80046e4 <BSP_PB_Init+0xd0>)
 8004690:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004694:	4619      	mov	r1, r3
 8004696:	4610      	mov	r0, r2
 8004698:	f000 facc 	bl	8004c34 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4a0f      	ldr	r2, [pc, #60]	@ (80046e0 <BSP_PB_Init+0xcc>)
 80046a2:	1898      	adds	r0, r3, r2
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	4a10      	ldr	r2, [pc, #64]	@ (80046e8 <BSP_PB_Init+0xd4>)
 80046a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ac:	461a      	mov	r2, r3
 80046ae:	2100      	movs	r1, #0
 80046b0:	f000 faa3 	bl	8004bfa <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80046b4:	2028      	movs	r0, #40	@ 0x28
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <BSP_PB_Init+0xd8>)
 80046ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046be:	2200      	movs	r2, #0
 80046c0:	4619      	mov	r1, r3
 80046c2:	f000 fa66 	bl	8004b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80046c6:	2328      	movs	r3, #40	@ 0x28
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fa7c 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000
 80046dc:	20000040 	.word	0x20000040
 80046e0:	20002a4c 	.word	0x20002a4c
 80046e4:	0801eef4 	.word	0x0801eef4
 80046e8:	20000048 	.word	0x20000048
 80046ec:	2000004c 	.word	0x2000004c

080046f0 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4a04      	ldr	r2, [pc, #16]	@ (8004710 <BSP_PB_IRQHandler+0x20>)
 8004700:	4413      	add	r3, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f000 faaa 	bl	8004c5c <HAL_EXTI_IRQHandler>
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20002a4c 	.word	0x20002a4c

08004714 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	6039      	str	r1, [r7, #0]
 800471e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d903      	bls.n	8004732 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800472a:	f06f 0301 	mvn.w	r3, #1
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e018      	b.n	8004764 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	2294      	movs	r2, #148	@ 0x94
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	4a0d      	ldr	r2, [pc, #52]	@ (8004770 <BSP_COM_Init+0x5c>)
 800473c:	4413      	add	r3, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f86e 	bl	8004820 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	2294      	movs	r2, #148	@ 0x94
 8004748:	fb02 f303 	mul.w	r3, r2, r3
 800474c:	4a08      	ldr	r2, [pc, #32]	@ (8004770 <BSP_COM_Init+0x5c>)
 800474e:	4413      	add	r3, r2
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f80e 	bl	8004774 <MX_LPUART1_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800475e:	f06f 0303 	mvn.w	r3, #3
 8004762:	e000      	b.n	8004766 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20002a54 	.word	0x20002a54

08004774 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <MX_LPUART1_Init+0x60>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	220c      	movs	r2, #12
 8004792:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	895b      	ldrh	r3, [r3, #10]
 8004798:	461a      	mov	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	891b      	ldrh	r3, [r3, #8]
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	899b      	ldrh	r3, [r3, #12]
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80047c0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f002 fa34 	bl	8006c30 <HAL_UART_Init>
 80047c8:	4603      	mov	r3, r0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000044 	.word	0x20000044

080047d8 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80047e0:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <__io_putchar+0x30>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	2394      	movs	r3, #148	@ 0x94
 80047e8:	fb02 f303 	mul.w	r3, r2, r3
 80047ec:	4a07      	ldr	r2, [pc, #28]	@ (800480c <__io_putchar+0x34>)
 80047ee:	1898      	adds	r0, r3, r2
 80047f0:	1d39      	adds	r1, r7, #4
 80047f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047f6:	2201      	movs	r2, #1
 80047f8:	f002 fa74 	bl	8006ce4 <HAL_UART_Transmit>
  return ch;
 80047fc:	687b      	ldr	r3, [r7, #4]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20002ae8 	.word	0x20002ae8
 800480c:	20002a54 	.word	0x20002a54

08004810 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004814:	2000      	movs	r0, #0
 8004816:	f003 fb9f 	bl	8007f58 <BSP_PB_Callback>
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	@ 0x28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004828:	4b22      	ldr	r3, [pc, #136]	@ (80048b4 <COM1_MspInit+0x94>)
 800482a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482c:	4a21      	ldr	r2, [pc, #132]	@ (80048b4 <COM1_MspInit+0x94>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004834:	4b1f      	ldr	r3, [pc, #124]	@ (80048b4 <COM1_MspInit+0x94>)
 8004836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8004840:	4b1c      	ldr	r3, [pc, #112]	@ (80048b4 <COM1_MspInit+0x94>)
 8004842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004844:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <COM1_MspInit+0x94>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800484c:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <COM1_MspInit+0x94>)
 800484e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004858:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <COM1_MspInit+0x94>)
 800485a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485c:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <COM1_MspInit+0x94>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004864:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <COM1_MspInit+0x94>)
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8004870:	2304      	movs	r3, #4
 8004872:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004874:	2302      	movs	r3, #2
 8004876:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004878:	2302      	movs	r3, #2
 800487a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800487c:	2301      	movs	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8004880:	230c      	movs	r3, #12
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	4619      	mov	r1, r3
 800488a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800488e:	f000 fa15 	bl	8004cbc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8004892:	2308      	movs	r3, #8
 8004894:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004896:	2302      	movs	r3, #2
 8004898:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800489a:	230c      	movs	r3, #12
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	4619      	mov	r1, r3
 80048a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048a8:	f000 fa08 	bl	8004cbc <HAL_GPIO_Init>
}
 80048ac:	bf00      	nop
 80048ae:	3728      	adds	r7, #40	@ 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40021000 	.word	0x40021000

080048b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048c2:	2003      	movs	r0, #3
 80048c4:	f000 f95a 	bl	8004b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048c8:	2000      	movs	r0, #0
 80048ca:	f000 f80d 	bl	80048e8 <HAL_InitTick>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	71fb      	strb	r3, [r7, #7]
 80048d8:	e001      	b.n	80048de <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048da:	f7fc fa4b 	bl	8000d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048de:	79fb      	ldrb	r3, [r7, #7]

}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80048f4:	4b16      	ldr	r3, [pc, #88]	@ (8004950 <HAL_InitTick+0x68>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d022      	beq.n	8004942 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80048fc:	4b15      	ldr	r3, [pc, #84]	@ (8004954 <HAL_InitTick+0x6c>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <HAL_InitTick+0x68>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004908:	fbb1 f3f3 	udiv	r3, r1, r3
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f966 	bl	8004be2 <HAL_SYSTICK_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10f      	bne.n	800493c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	d809      	bhi.n	8004936 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004922:	2200      	movs	r2, #0
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	f04f 30ff 	mov.w	r0, #4294967295
 800492a:	f000 f932 	bl	8004b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800492e:	4a0a      	ldr	r2, [pc, #40]	@ (8004958 <HAL_InitTick+0x70>)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e007      	b.n	8004946 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
 800493a:	e004      	b.n	8004946 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	e001      	b.n	8004946 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000054 	.word	0x20000054
 8004954:	20000000 	.word	0x20000000
 8004958:	20000050 	.word	0x20000050

0800495c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004960:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <HAL_IncTick+0x1c>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <HAL_IncTick+0x20>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4413      	add	r3, r2
 800496a:	4a03      	ldr	r2, [pc, #12]	@ (8004978 <HAL_IncTick+0x1c>)
 800496c:	6013      	str	r3, [r2, #0]
}
 800496e:	bf00      	nop
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20002aec 	.word	0x20002aec
 800497c:	20000054 	.word	0x20000054

08004980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return uwTick;
 8004984:	4b03      	ldr	r3, [pc, #12]	@ (8004994 <HAL_GetTick+0x14>)
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20002aec 	.word	0x20002aec

08004998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049a0:	f7ff ffee 	bl	8004980 <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d004      	beq.n	80049bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80049b2:	4b09      	ldr	r3, [pc, #36]	@ (80049d8 <HAL_Delay+0x40>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049bc:	bf00      	nop
 80049be:	f7ff ffdf 	bl	8004980 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d8f7      	bhi.n	80049be <HAL_Delay+0x26>
  {
  }
}
 80049ce:	bf00      	nop
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000054 	.word	0x20000054

080049dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <__NVIC_SetPriorityGrouping+0x44>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049f8:	4013      	ands	r3, r2
 80049fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a0e:	4a04      	ldr	r2, [pc, #16]	@ (8004a20 <__NVIC_SetPriorityGrouping+0x44>)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	60d3      	str	r3, [r2, #12]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a28:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <__NVIC_GetPriorityGrouping+0x18>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 0307 	and.w	r3, r3, #7
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	db0b      	blt.n	8004a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	f003 021f 	and.w	r2, r3, #31
 8004a58:	4907      	ldr	r1, [pc, #28]	@ (8004a78 <__NVIC_EnableIRQ+0x38>)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2001      	movs	r0, #1
 8004a62:	fa00 f202 	lsl.w	r2, r0, r2
 8004a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	e000e100 	.word	0xe000e100

08004a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	6039      	str	r1, [r7, #0]
 8004a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db0a      	blt.n	8004aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	490c      	ldr	r1, [pc, #48]	@ (8004ac8 <__NVIC_SetPriority+0x4c>)
 8004a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9a:	0112      	lsls	r2, r2, #4
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa4:	e00a      	b.n	8004abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4908      	ldr	r1, [pc, #32]	@ (8004acc <__NVIC_SetPriority+0x50>)
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	3b04      	subs	r3, #4
 8004ab4:	0112      	lsls	r2, r2, #4
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	440b      	add	r3, r1
 8004aba:	761a      	strb	r2, [r3, #24]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000e100 	.word	0xe000e100
 8004acc:	e000ed00 	.word	0xe000ed00

08004ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b089      	sub	sp, #36	@ 0x24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f1c3 0307 	rsb	r3, r3, #7
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf28      	it	cs
 8004aee:	2304      	movcs	r3, #4
 8004af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3304      	adds	r3, #4
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d902      	bls.n	8004b00 <NVIC_EncodePriority+0x30>
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3b03      	subs	r3, #3
 8004afe:	e000      	b.n	8004b02 <NVIC_EncodePriority+0x32>
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	401a      	ands	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b18:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	43d9      	mvns	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b28:	4313      	orrs	r3, r2
         );
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3724      	adds	r7, #36	@ 0x24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b48:	d301      	bcc.n	8004b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e00f      	b.n	8004b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b78 <SysTick_Config+0x40>)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b56:	210f      	movs	r1, #15
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	f7ff ff8e 	bl	8004a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <SysTick_Config+0x40>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b66:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <SysTick_Config+0x40>)
 8004b68:	2207      	movs	r2, #7
 8004b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	e000e010 	.word	0xe000e010

08004b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff29 	bl	80049dc <__NVIC_SetPriorityGrouping>
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	4603      	mov	r3, r0
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ba0:	f7ff ff40 	bl	8004a24 <__NVIC_GetPriorityGrouping>
 8004ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7ff ff90 	bl	8004ad0 <NVIC_EncodePriority>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff5f 	bl	8004a7c <__NVIC_SetPriority>
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4603      	mov	r3, r0
 8004bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff33 	bl	8004a40 <__NVIC_EnableIRQ>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff ffa4 	bl	8004b38 <SysTick_Config>
 8004bf0:	4603      	mov	r3, r0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b087      	sub	sp, #28
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	460b      	mov	r3, r1
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8004c0c:	7afb      	ldrb	r3, [r7, #11]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	605a      	str	r2, [r3, #4]
      break;
 8004c18:	e005      	b.n	8004c26 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	75fb      	strb	r3, [r7, #23]
      break;
 8004c24:	bf00      	nop
  }

  return status;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e003      	b.n	8004c50 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
  }
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	2201      	movs	r2, #1
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb8 <HAL_EXTI_IRQHandler+0x5c>)
 8004c86:	4413      	add	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4013      	ands	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4798      	blx	r3
    }
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40010414 	.word	0x40010414

08004cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cca:	e15a      	b.n	8004f82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 814c 	beq.w	8004f7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d005      	beq.n	8004cfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d130      	bne.n	8004d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	2203      	movs	r2, #3
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d32:	2201      	movs	r2, #1
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 0201 	and.w	r2, r3, #1
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d017      	beq.n	8004d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	2203      	movs	r2, #3
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d123      	bne.n	8004dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	08da      	lsrs	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	6939      	ldr	r1, [r7, #16]
 8004dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	2203      	movs	r2, #3
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80a6 	beq.w	8004f7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e30:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa0 <HAL_GPIO_Init+0x2e4>)
 8004e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e34:	4a5a      	ldr	r2, [pc, #360]	@ (8004fa0 <HAL_GPIO_Init+0x2e4>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e3c:	4b58      	ldr	r3, [pc, #352]	@ (8004fa0 <HAL_GPIO_Init+0x2e4>)
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e48:	4a56      	ldr	r2, [pc, #344]	@ (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	3302      	adds	r3, #2
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	220f      	movs	r2, #15
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e72:	d01f      	beq.n	8004eb4 <HAL_GPIO_Init+0x1f8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a4c      	ldr	r2, [pc, #304]	@ (8004fa8 <HAL_GPIO_Init+0x2ec>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d019      	beq.n	8004eb0 <HAL_GPIO_Init+0x1f4>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a4b      	ldr	r2, [pc, #300]	@ (8004fac <HAL_GPIO_Init+0x2f0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <HAL_GPIO_Init+0x1f0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a4a      	ldr	r2, [pc, #296]	@ (8004fb0 <HAL_GPIO_Init+0x2f4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00d      	beq.n	8004ea8 <HAL_GPIO_Init+0x1ec>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a49      	ldr	r2, [pc, #292]	@ (8004fb4 <HAL_GPIO_Init+0x2f8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <HAL_GPIO_Init+0x1e8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a48      	ldr	r2, [pc, #288]	@ (8004fb8 <HAL_GPIO_Init+0x2fc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d101      	bne.n	8004ea0 <HAL_GPIO_Init+0x1e4>
 8004e9c:	2305      	movs	r3, #5
 8004e9e:	e00a      	b.n	8004eb6 <HAL_GPIO_Init+0x1fa>
 8004ea0:	2306      	movs	r3, #6
 8004ea2:	e008      	b.n	8004eb6 <HAL_GPIO_Init+0x1fa>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	e006      	b.n	8004eb6 <HAL_GPIO_Init+0x1fa>
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e004      	b.n	8004eb6 <HAL_GPIO_Init+0x1fa>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e002      	b.n	8004eb6 <HAL_GPIO_Init+0x1fa>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <HAL_GPIO_Init+0x1fa>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	f002 0203 	and.w	r2, r2, #3
 8004ebc:	0092      	lsls	r2, r2, #2
 8004ebe:	4093      	lsls	r3, r2
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ec6:	4937      	ldr	r1, [pc, #220]	@ (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	3302      	adds	r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ed4:	4b39      	ldr	r3, [pc, #228]	@ (8004fbc <HAL_GPIO_Init+0x300>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	43db      	mvns	r3, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ef8:	4a30      	ldr	r2, [pc, #192]	@ (8004fbc <HAL_GPIO_Init+0x300>)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004efe:	4b2f      	ldr	r3, [pc, #188]	@ (8004fbc <HAL_GPIO_Init+0x300>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	43db      	mvns	r3, r3
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f22:	4a26      	ldr	r2, [pc, #152]	@ (8004fbc <HAL_GPIO_Init+0x300>)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f28:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <HAL_GPIO_Init+0x300>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	43db      	mvns	r3, r3
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4013      	ands	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fbc <HAL_GPIO_Init+0x300>)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <HAL_GPIO_Init+0x300>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f76:	4a11      	ldr	r2, [pc, #68]	@ (8004fbc <HAL_GPIO_Init+0x300>)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f47f ae9d 	bne.w	8004ccc <HAL_GPIO_Init+0x10>
  }
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	48000400 	.word	0x48000400
 8004fac:	48000800 	.word	0x48000800
 8004fb0:	48000c00 	.word	0x48000c00
 8004fb4:	48001000 	.word	0x48001000
 8004fb8:	48001400 	.word	0x48001400
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004fce:	e0bd      	b.n	800514c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80b0 	beq.w	8005146 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8004fe6:	4a60      	ldr	r2, [pc, #384]	@ (8005168 <HAL_GPIO_DeInit+0x1a8>)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	089b      	lsrs	r3, r3, #2
 8004fec:	3302      	adds	r3, #2
 8004fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	220f      	movs	r2, #15
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800500e:	d01f      	beq.n	8005050 <HAL_GPIO_DeInit+0x90>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a56      	ldr	r2, [pc, #344]	@ (800516c <HAL_GPIO_DeInit+0x1ac>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d019      	beq.n	800504c <HAL_GPIO_DeInit+0x8c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a55      	ldr	r2, [pc, #340]	@ (8005170 <HAL_GPIO_DeInit+0x1b0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d013      	beq.n	8005048 <HAL_GPIO_DeInit+0x88>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a54      	ldr	r2, [pc, #336]	@ (8005174 <HAL_GPIO_DeInit+0x1b4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00d      	beq.n	8005044 <HAL_GPIO_DeInit+0x84>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a53      	ldr	r2, [pc, #332]	@ (8005178 <HAL_GPIO_DeInit+0x1b8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <HAL_GPIO_DeInit+0x80>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a52      	ldr	r2, [pc, #328]	@ (800517c <HAL_GPIO_DeInit+0x1bc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_GPIO_DeInit+0x7c>
 8005038:	2305      	movs	r3, #5
 800503a:	e00a      	b.n	8005052 <HAL_GPIO_DeInit+0x92>
 800503c:	2306      	movs	r3, #6
 800503e:	e008      	b.n	8005052 <HAL_GPIO_DeInit+0x92>
 8005040:	2304      	movs	r3, #4
 8005042:	e006      	b.n	8005052 <HAL_GPIO_DeInit+0x92>
 8005044:	2303      	movs	r3, #3
 8005046:	e004      	b.n	8005052 <HAL_GPIO_DeInit+0x92>
 8005048:	2302      	movs	r3, #2
 800504a:	e002      	b.n	8005052 <HAL_GPIO_DeInit+0x92>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <HAL_GPIO_DeInit+0x92>
 8005050:	2300      	movs	r3, #0
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	f002 0203 	and.w	r2, r2, #3
 8005058:	0092      	lsls	r2, r2, #2
 800505a:	4093      	lsls	r3, r2
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	429a      	cmp	r2, r3
 8005060:	d132      	bne.n	80050c8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005062:	4b47      	ldr	r3, [pc, #284]	@ (8005180 <HAL_GPIO_DeInit+0x1c0>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	43db      	mvns	r3, r3
 800506a:	4945      	ldr	r1, [pc, #276]	@ (8005180 <HAL_GPIO_DeInit+0x1c0>)
 800506c:	4013      	ands	r3, r2
 800506e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005070:	4b43      	ldr	r3, [pc, #268]	@ (8005180 <HAL_GPIO_DeInit+0x1c0>)
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	4941      	ldr	r1, [pc, #260]	@ (8005180 <HAL_GPIO_DeInit+0x1c0>)
 800507a:	4013      	ands	r3, r2
 800507c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800507e:	4b40      	ldr	r3, [pc, #256]	@ (8005180 <HAL_GPIO_DeInit+0x1c0>)
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	43db      	mvns	r3, r3
 8005086:	493e      	ldr	r1, [pc, #248]	@ (8005180 <HAL_GPIO_DeInit+0x1c0>)
 8005088:	4013      	ands	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800508c:	4b3c      	ldr	r3, [pc, #240]	@ (8005180 <HAL_GPIO_DeInit+0x1c0>)
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	43db      	mvns	r3, r3
 8005094:	493a      	ldr	r1, [pc, #232]	@ (8005180 <HAL_GPIO_DeInit+0x1c0>)
 8005096:	4013      	ands	r3, r2
 8005098:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	220f      	movs	r2, #15
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80050aa:	4a2f      	ldr	r2, [pc, #188]	@ (8005168 <HAL_GPIO_DeInit+0x1a8>)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	3302      	adds	r3, #2
 80050b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	43da      	mvns	r2, r3
 80050ba:	482b      	ldr	r0, [pc, #172]	@ (8005168 <HAL_GPIO_DeInit+0x1a8>)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	400a      	ands	r2, r1
 80050c2:	3302      	adds	r3, #2
 80050c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	2103      	movs	r1, #3
 80050d2:	fa01 f303 	lsl.w	r3, r1, r3
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	08da      	lsrs	r2, r3, #3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3208      	adds	r2, #8
 80050e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	220f      	movs	r2, #15
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	08d2      	lsrs	r2, r2, #3
 80050fc:	4019      	ands	r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3208      	adds	r2, #8
 8005102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	2103      	movs	r1, #3
 8005110:	fa01 f303 	lsl.w	r3, r1, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	401a      	ands	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	2101      	movs	r1, #1
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	401a      	ands	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	2103      	movs	r1, #3
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	401a      	ands	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3301      	adds	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	f47f af3b 	bne.w	8004fd0 <HAL_GPIO_DeInit+0x10>
  }
}
 800515a:	bf00      	nop
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40010000 	.word	0x40010000
 800516c:	48000400 	.word	0x48000400
 8005170:	48000800 	.word	0x48000800
 8005174:	48000c00 	.word	0x48000c00
 8005178:	48001000 	.word	0x48001000
 800517c:	48001400 	.word	0x48001400
 8005180:	40010400 	.word	0x40010400

08005184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	807b      	strh	r3, [r7, #2]
 8005190:	4613      	mov	r3, r2
 8005192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005194:	787b      	ldrb	r3, [r7, #1]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800519a:	887a      	ldrh	r2, [r7, #2]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051a0:	e002      	b.n	80051a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051a2:	887a      	ldrh	r2, [r7, #2]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d141      	bne.n	8005246 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051c2:	4b4b      	ldr	r3, [pc, #300]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ce:	d131      	bne.n	8005234 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051d0:	4b47      	ldr	r3, [pc, #284]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d6:	4a46      	ldr	r2, [pc, #280]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051e0:	4b43      	ldr	r3, [pc, #268]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051e8:	4a41      	ldr	r2, [pc, #260]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051f0:	4b40      	ldr	r3, [pc, #256]	@ (80052f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2232      	movs	r2, #50	@ 0x32
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	4a3f      	ldr	r2, [pc, #252]	@ (80052f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	0c9b      	lsrs	r3, r3, #18
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005206:	e002      	b.n	800520e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3b01      	subs	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800520e:	4b38      	ldr	r3, [pc, #224]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521a:	d102      	bne.n	8005222 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f2      	bne.n	8005208 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005222:	4b33      	ldr	r3, [pc, #204]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522e:	d158      	bne.n	80052e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e057      	b.n	80052e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005234:	4b2e      	ldr	r3, [pc, #184]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800523a:	4a2d      	ldr	r2, [pc, #180]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005244:	e04d      	b.n	80052e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524c:	d141      	bne.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800524e:	4b28      	ldr	r3, [pc, #160]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525a:	d131      	bne.n	80052c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800525c:	4b24      	ldr	r3, [pc, #144]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005262:	4a23      	ldr	r2, [pc, #140]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800526c:	4b20      	ldr	r3, [pc, #128]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005274:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800527a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800527c:	4b1d      	ldr	r3, [pc, #116]	@ (80052f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2232      	movs	r2, #50	@ 0x32
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	4a1c      	ldr	r2, [pc, #112]	@ (80052f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	0c9b      	lsrs	r3, r3, #18
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005292:	e002      	b.n	800529a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3b01      	subs	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800529a:	4b15      	ldr	r3, [pc, #84]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a6:	d102      	bne.n	80052ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f2      	bne.n	8005294 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ae:	4b10      	ldr	r3, [pc, #64]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ba:	d112      	bne.n	80052e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e011      	b.n	80052e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052c0:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c6:	4a0a      	ldr	r2, [pc, #40]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052d0:	e007      	b.n	80052e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052d2:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052da:	4a05      	ldr	r2, [pc, #20]	@ (80052f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40007000 	.word	0x40007000
 80052f4:	20000000 	.word	0x20000000
 80052f8:	431bde83 	.word	0x431bde83

080052fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	4a04      	ldr	r2, [pc, #16]	@ (8005318 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800530a:	6093      	str	r3, [r2, #8]
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40007000 	.word	0x40007000

0800531c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e2fe      	b.n	800592c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d075      	beq.n	8005426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800533a:	4b97      	ldr	r3, [pc, #604]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005344:	4b94      	ldr	r3, [pc, #592]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b0c      	cmp	r3, #12
 8005352:	d102      	bne.n	800535a <HAL_RCC_OscConfig+0x3e>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d002      	beq.n	8005360 <HAL_RCC_OscConfig+0x44>
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d10b      	bne.n	8005378 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005360:	4b8d      	ldr	r3, [pc, #564]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05b      	beq.n	8005424 <HAL_RCC_OscConfig+0x108>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d157      	bne.n	8005424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e2d9      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005380:	d106      	bne.n	8005390 <HAL_RCC_OscConfig+0x74>
 8005382:	4b85      	ldr	r3, [pc, #532]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a84      	ldr	r2, [pc, #528]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e01d      	b.n	80053cc <HAL_RCC_OscConfig+0xb0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0x98>
 800539a:	4b7f      	ldr	r3, [pc, #508]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7e      	ldr	r2, [pc, #504]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80053a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a7b      	ldr	r2, [pc, #492]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0xb0>
 80053b4:	4b78      	ldr	r3, [pc, #480]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a77      	ldr	r2, [pc, #476]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b75      	ldr	r3, [pc, #468]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a74      	ldr	r2, [pc, #464]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80053c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7ff fad4 	bl	8004980 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7ff fad0 	bl	8004980 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	@ 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e29e      	b.n	800592c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0xc0>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7ff fac0 	bl	8004980 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005404:	f7ff fabc 	bl	8004980 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	@ 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e28a      	b.n	800592c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005416:	4b60      	ldr	r3, [pc, #384]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0xe8>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d075      	beq.n	800551e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005432:	4b59      	ldr	r3, [pc, #356]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800543c:	4b56      	ldr	r3, [pc, #344]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d102      	bne.n	8005452 <HAL_RCC_OscConfig+0x136>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d002      	beq.n	8005458 <HAL_RCC_OscConfig+0x13c>
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d11f      	bne.n	8005498 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005458:	4b4f      	ldr	r3, [pc, #316]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_OscConfig+0x154>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e25d      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005470:	4b49      	ldr	r3, [pc, #292]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	061b      	lsls	r3, r3, #24
 800547e:	4946      	ldr	r1, [pc, #280]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005480:	4313      	orrs	r3, r2
 8005482:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005484:	4b45      	ldr	r3, [pc, #276]	@ (800559c <HAL_RCC_OscConfig+0x280>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fa2d 	bl	80048e8 <HAL_InitTick>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d043      	beq.n	800551c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e249      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d023      	beq.n	80054e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7ff fa68 	bl	8004980 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b4:	f7ff fa64 	bl	8004980 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e232      	b.n	800592c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054c6:	4b34      	ldr	r3, [pc, #208]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d2:	4b31      	ldr	r3, [pc, #196]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	061b      	lsls	r3, r3, #24
 80054e0:	492d      	ldr	r1, [pc, #180]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	604b      	str	r3, [r1, #4]
 80054e6:	e01a      	b.n	800551e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 80054ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7ff fa44 	bl	8004980 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fc:	f7ff fa40 	bl	8004980 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e20e      	b.n	800592c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800550e:	4b22      	ldr	r3, [pc, #136]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0x1e0>
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800551c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d041      	beq.n	80055ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01c      	beq.n	800556c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005532:	4b19      	ldr	r3, [pc, #100]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005538:	4a17      	ldr	r2, [pc, #92]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7ff fa1d 	bl	8004980 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554a:	f7ff fa19 	bl	8004980 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1e7      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800555c:	4b0e      	ldr	r3, [pc, #56]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 800555e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0ef      	beq.n	800554a <HAL_RCC_OscConfig+0x22e>
 800556a:	e020      	b.n	80055ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800556c:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 800556e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005572:	4a09      	ldr	r2, [pc, #36]	@ (8005598 <HAL_RCC_OscConfig+0x27c>)
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7ff fa00 	bl	8004980 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005582:	e00d      	b.n	80055a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005584:	f7ff f9fc 	bl	8004980 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d906      	bls.n	80055a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e1ca      	b.n	800592c <HAL_RCC_OscConfig+0x610>
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000
 800559c:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055a0:	4b8c      	ldr	r3, [pc, #560]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ea      	bne.n	8005584 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80a6 	beq.w	8005708 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055bc:	2300      	movs	r3, #0
 80055be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055c0:	4b84      	ldr	r3, [pc, #528]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80055c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_OscConfig+0x2b4>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x2b6>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00d      	beq.n	80055f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	4b7f      	ldr	r3, [pc, #508]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80055d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055da:	4a7e      	ldr	r2, [pc, #504]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80055dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055e2:	4b7c      	ldr	r3, [pc, #496]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055ee:	2301      	movs	r3, #1
 80055f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055f2:	4b79      	ldr	r3, [pc, #484]	@ (80057d8 <HAL_RCC_OscConfig+0x4bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d118      	bne.n	8005630 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055fe:	4b76      	ldr	r3, [pc, #472]	@ (80057d8 <HAL_RCC_OscConfig+0x4bc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a75      	ldr	r2, [pc, #468]	@ (80057d8 <HAL_RCC_OscConfig+0x4bc>)
 8005604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560a:	f7ff f9b9 	bl	8004980 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005612:	f7ff f9b5 	bl	8004980 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e183      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005624:	4b6c      	ldr	r3, [pc, #432]	@ (80057d8 <HAL_RCC_OscConfig+0x4bc>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d108      	bne.n	800564a <HAL_RCC_OscConfig+0x32e>
 8005638:	4b66      	ldr	r3, [pc, #408]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563e:	4a65      	ldr	r2, [pc, #404]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005648:	e024      	b.n	8005694 <HAL_RCC_OscConfig+0x378>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b05      	cmp	r3, #5
 8005650:	d110      	bne.n	8005674 <HAL_RCC_OscConfig+0x358>
 8005652:	4b60      	ldr	r3, [pc, #384]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005658:	4a5e      	ldr	r2, [pc, #376]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 800565a:	f043 0304 	orr.w	r3, r3, #4
 800565e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005662:	4b5c      	ldr	r3, [pc, #368]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005668:	4a5a      	ldr	r2, [pc, #360]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005672:	e00f      	b.n	8005694 <HAL_RCC_OscConfig+0x378>
 8005674:	4b57      	ldr	r3, [pc, #348]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567a:	4a56      	ldr	r2, [pc, #344]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005684:	4b53      	ldr	r3, [pc, #332]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568a:	4a52      	ldr	r2, [pc, #328]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d016      	beq.n	80056ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569c:	f7ff f970 	bl	8004980 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7ff f96c 	bl	8004980 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e138      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ba:	4b46      	ldr	r3, [pc, #280]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0ed      	beq.n	80056a4 <HAL_RCC_OscConfig+0x388>
 80056c8:	e015      	b.n	80056f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ca:	f7ff f959 	bl	8004980 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056d0:	e00a      	b.n	80056e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7ff f955 	bl	8004980 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e121      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056e8:	4b3a      	ldr	r3, [pc, #232]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1ed      	bne.n	80056d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056f6:	7ffb      	ldrb	r3, [r7, #31]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d105      	bne.n	8005708 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056fc:	4b35      	ldr	r3, [pc, #212]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	4a34      	ldr	r2, [pc, #208]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005706:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d03c      	beq.n	800578e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01c      	beq.n	8005756 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800571c:	4b2d      	ldr	r3, [pc, #180]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 800571e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005722:	4a2c      	ldr	r2, [pc, #176]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7ff f928 	bl	8004980 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005734:	f7ff f924 	bl	8004980 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e0f2      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005746:	4b23      	ldr	r3, [pc, #140]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005748:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0ef      	beq.n	8005734 <HAL_RCC_OscConfig+0x418>
 8005754:	e01b      	b.n	800578e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005756:	4b1f      	ldr	r3, [pc, #124]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005758:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800575c:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005766:	f7ff f90b 	bl	8004980 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800576e:	f7ff f907 	bl	8004980 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0d5      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005780:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 8005782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1ef      	bne.n	800576e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80c9 	beq.w	800592a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005798:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	f000 8083 	beq.w	80058ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d15e      	bne.n	800586c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ae:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a08      	ldr	r2, [pc, #32]	@ (80057d4 <HAL_RCC_OscConfig+0x4b8>)
 80057b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ba:	f7ff f8e1 	bl	8004980 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c0:	e00c      	b.n	80057dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c2:	f7ff f8dd 	bl	8004980 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d905      	bls.n	80057dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e0ab      	b.n	800592c <HAL_RCC_OscConfig+0x610>
 80057d4:	40021000 	.word	0x40021000
 80057d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057dc:	4b55      	ldr	r3, [pc, #340]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1ec      	bne.n	80057c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057e8:	4b52      	ldr	r3, [pc, #328]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	4b52      	ldr	r3, [pc, #328]	@ (8005938 <HAL_RCC_OscConfig+0x61c>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6a11      	ldr	r1, [r2, #32]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057f8:	3a01      	subs	r2, #1
 80057fa:	0112      	lsls	r2, r2, #4
 80057fc:	4311      	orrs	r1, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005802:	0212      	lsls	r2, r2, #8
 8005804:	4311      	orrs	r1, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800580a:	0852      	lsrs	r2, r2, #1
 800580c:	3a01      	subs	r2, #1
 800580e:	0552      	lsls	r2, r2, #21
 8005810:	4311      	orrs	r1, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005816:	0852      	lsrs	r2, r2, #1
 8005818:	3a01      	subs	r2, #1
 800581a:	0652      	lsls	r2, r2, #25
 800581c:	4311      	orrs	r1, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005822:	06d2      	lsls	r2, r2, #27
 8005824:	430a      	orrs	r2, r1
 8005826:	4943      	ldr	r1, [pc, #268]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 8005828:	4313      	orrs	r3, r2
 800582a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800582c:	4b41      	ldr	r3, [pc, #260]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a40      	ldr	r2, [pc, #256]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 8005832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005836:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005838:	4b3e      	ldr	r3, [pc, #248]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4a3d      	ldr	r2, [pc, #244]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 800583e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005842:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7ff f89c 	bl	8004980 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584c:	f7ff f898 	bl	8004980 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e066      	b.n	800592c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800585e:	4b35      	ldr	r3, [pc, #212]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCC_OscConfig+0x530>
 800586a:	e05e      	b.n	800592a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586c:	4b31      	ldr	r3, [pc, #196]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a30      	ldr	r2, [pc, #192]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 8005872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7ff f882 	bl	8004980 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005880:	f7ff f87e 	bl	8004980 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e04c      	b.n	800592c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005892:	4b28      	ldr	r3, [pc, #160]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800589e:	4b25      	ldr	r3, [pc, #148]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	4924      	ldr	r1, [pc, #144]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 80058a4:	4b25      	ldr	r3, [pc, #148]	@ (800593c <HAL_RCC_OscConfig+0x620>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	60cb      	str	r3, [r1, #12]
 80058aa:	e03e      	b.n	800592a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e039      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80058b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005934 <HAL_RCC_OscConfig+0x618>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 0203 	and.w	r2, r3, #3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d12c      	bne.n	8005926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d6:	3b01      	subs	r3, #1
 80058d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058da:	429a      	cmp	r2, r3
 80058dc:	d123      	bne.n	8005926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d11b      	bne.n	8005926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d113      	bne.n	8005926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	3b01      	subs	r3, #1
 800590c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800590e:	429a      	cmp	r2, r3
 8005910:	d109      	bne.n	8005926 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	3b01      	subs	r3, #1
 8005920:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005922:	429a      	cmp	r2, r3
 8005924:	d001      	beq.n	800592a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40021000 	.word	0x40021000
 8005938:	019f800c 	.word	0x019f800c
 800593c:	feeefffc 	.word	0xfeeefffc

08005940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e11e      	b.n	8005b96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005958:	4b91      	ldr	r3, [pc, #580]	@ (8005ba0 <HAL_RCC_ClockConfig+0x260>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d910      	bls.n	8005988 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005966:	4b8e      	ldr	r3, [pc, #568]	@ (8005ba0 <HAL_RCC_ClockConfig+0x260>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 020f 	bic.w	r2, r3, #15
 800596e:	498c      	ldr	r1, [pc, #560]	@ (8005ba0 <HAL_RCC_ClockConfig+0x260>)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b8a      	ldr	r3, [pc, #552]	@ (8005ba0 <HAL_RCC_ClockConfig+0x260>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e106      	b.n	8005b96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d073      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d129      	bne.n	80059f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800599c:	4b81      	ldr	r3, [pc, #516]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0f4      	b.n	8005b96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80059ac:	f000 f99e 	bl	8005cec <RCC_GetSysClockFreqFromPLLSource>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4a7c      	ldr	r2, [pc, #496]	@ (8005ba8 <HAL_RCC_ClockConfig+0x268>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d93f      	bls.n	8005a3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059ba:	4b7a      	ldr	r3, [pc, #488]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d033      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d12f      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059da:	4b72      	ldr	r3, [pc, #456]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059e2:	4a70      	ldr	r2, [pc, #448]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 80059e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059ea:	2380      	movs	r3, #128	@ 0x80
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e024      	b.n	8005a3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d107      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f8:	4b6a      	ldr	r3, [pc, #424]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0c6      	b.n	8005b96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a08:	4b66      	ldr	r3, [pc, #408]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0be      	b.n	8005b96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a18:	f000 f8ce 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 8005a1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4a61      	ldr	r2, [pc, #388]	@ (8005ba8 <HAL_RCC_ClockConfig+0x268>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d909      	bls.n	8005a3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a26:	4b5f      	ldr	r3, [pc, #380]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a2e:	4a5d      	ldr	r2, [pc, #372]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 0203 	bic.w	r2, r3, #3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4957      	ldr	r1, [pc, #348]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4c:	f7fe ff98 	bl	8004980 <HAL_GetTick>
 8005a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fe ff94 	bl	8004980 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e095      	b.n	8005b96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 020c 	and.w	r2, r3, #12
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d1eb      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d023      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a94:	4b43      	ldr	r3, [pc, #268]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	4a42      	ldr	r2, [pc, #264]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005a9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005aac:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005ab6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005aba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005abc:	4b39      	ldr	r3, [pc, #228]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4936      	ldr	r1, [pc, #216]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b80      	cmp	r3, #128	@ 0x80
 8005ad4:	d105      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ad6:	4b33      	ldr	r3, [pc, #204]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	4a32      	ldr	r2, [pc, #200]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005adc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ae0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba0 <HAL_RCC_ClockConfig+0x260>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d21d      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af0:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba0 <HAL_RCC_ClockConfig+0x260>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f023 020f 	bic.w	r2, r3, #15
 8005af8:	4929      	ldr	r1, [pc, #164]	@ (8005ba0 <HAL_RCC_ClockConfig+0x260>)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b00:	f7fe ff3e 	bl	8004980 <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b08:	f7fe ff3a 	bl	8004980 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e03b      	b.n	8005b96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1e:	4b20      	ldr	r3, [pc, #128]	@ (8005ba0 <HAL_RCC_ClockConfig+0x260>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d1ed      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4917      	ldr	r1, [pc, #92]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b56:	4b13      	ldr	r3, [pc, #76]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	490f      	ldr	r1, [pc, #60]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b6a:	f000 f825 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <HAL_RCC_ClockConfig+0x264>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	490c      	ldr	r1, [pc, #48]	@ (8005bac <HAL_RCC_ClockConfig+0x26c>)
 8005b7c:	5ccb      	ldrb	r3, [r1, r3]
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	fa22 f303 	lsr.w	r3, r2, r3
 8005b86:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb0 <HAL_RCC_ClockConfig+0x270>)
 8005b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb4 <HAL_RCC_ClockConfig+0x274>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe feaa 	bl	80048e8 <HAL_InitTick>
 8005b94:	4603      	mov	r3, r0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40022000 	.word	0x40022000
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	04c4b400 	.word	0x04c4b400
 8005bac:	080097e0 	.word	0x080097e0
 8005bb0:	20000000 	.word	0x20000000
 8005bb4:	20000050 	.word	0x20000050

08005bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d102      	bne.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bca:	4b2a      	ldr	r3, [pc, #168]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	e047      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005bd0:	4b27      	ldr	r3, [pc, #156]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 030c 	and.w	r3, r3, #12
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d102      	bne.n	8005be2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bdc:	4b26      	ldr	r3, [pc, #152]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	e03e      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005be2:	4b23      	ldr	r3, [pc, #140]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b0c      	cmp	r3, #12
 8005bec:	d136      	bne.n	8005c5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bee:	4b20      	ldr	r3, [pc, #128]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	3301      	adds	r3, #1
 8005c04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d10c      	bne.n	8005c26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	4a16      	ldr	r2, [pc, #88]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c16:	68d2      	ldr	r2, [r2, #12]
 8005c18:	0a12      	lsrs	r2, r2, #8
 8005c1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	617b      	str	r3, [r7, #20]
      break;
 8005c24:	e00c      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c26:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2e:	4a10      	ldr	r2, [pc, #64]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c30:	68d2      	ldr	r2, [r2, #12]
 8005c32:	0a12      	lsrs	r2, r2, #8
 8005c34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]
      break;
 8005c3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c40:	4b0b      	ldr	r3, [pc, #44]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	0e5b      	lsrs	r3, r3, #25
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	e001      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c60:	693b      	ldr	r3, [r7, #16]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000
 8005c74:	00f42400 	.word	0x00f42400
 8005c78:	016e3600 	.word	0x016e3600

08005c7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c80:	4b03      	ldr	r3, [pc, #12]	@ (8005c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c82:	681b      	ldr	r3, [r3, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000000 	.word	0x20000000

08005c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c98:	f7ff fff0 	bl	8005c7c <HAL_RCC_GetHCLKFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	4904      	ldr	r1, [pc, #16]	@ (8005cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	080097f0 	.word	0x080097f0

08005cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cc4:	f7ff ffda 	bl	8005c7c <HAL_RCC_GetHCLKFreq>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	0adb      	lsrs	r3, r3, #11
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	4904      	ldr	r1, [pc, #16]	@ (8005ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cd6:	5ccb      	ldrb	r3, [r1, r3]
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	080097f0 	.word	0x080097f0

08005cec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d10c      	bne.n	8005d2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d10:	4a17      	ldr	r2, [pc, #92]	@ (8005d70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	4a14      	ldr	r2, [pc, #80]	@ (8005d6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d1a:	68d2      	ldr	r2, [r2, #12]
 8005d1c:	0a12      	lsrs	r2, r2, #8
 8005d1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	617b      	str	r3, [r7, #20]
    break;
 8005d28:	e00c      	b.n	8005d44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d2a:	4a12      	ldr	r2, [pc, #72]	@ (8005d74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d32:	4a0e      	ldr	r2, [pc, #56]	@ (8005d6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d34:	68d2      	ldr	r2, [r2, #12]
 8005d36:	0a12      	lsrs	r2, r2, #8
 8005d38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d3c:	fb02 f303 	mul.w	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]
    break;
 8005d42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d44:	4b09      	ldr	r3, [pc, #36]	@ (8005d6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	0e5b      	lsrs	r3, r3, #25
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	3301      	adds	r3, #1
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d5e:	687b      	ldr	r3, [r7, #4]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	016e3600 	.word	0x016e3600
 8005d74:	00f42400 	.word	0x00f42400

08005d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e09d      	b.n	8005ec6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d108      	bne.n	8005da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d9a:	d009      	beq.n	8005db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	61da      	str	r2, [r3, #28]
 8005da2:	e005      	b.n	8005db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fa fff6 	bl	8000dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005df0:	d902      	bls.n	8005df8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e002      	b.n	8005dfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005dfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e06:	d007      	beq.n	8005e18 <HAL_SPI_Init+0xa0>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e10:	d002      	beq.n	8005e18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5a:	ea42 0103 	orr.w	r1, r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	0c1b      	lsrs	r3, r3, #16
 8005e74:	f003 0204 	and.w	r2, r3, #4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e94:	ea42 0103 	orr.w	r1, r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e01a      	b.n	8005f16 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ef6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fa ffb5 	bl	8000e68 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b088      	sub	sp, #32
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f2e:	f7fe fd27 	bl	8004980 <HAL_GetTick>
 8005f32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d001      	beq.n	8005f48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
 8005f46:	e15c      	b.n	8006202 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_SPI_Transmit+0x36>
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e154      	b.n	8006202 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_SPI_Transmit+0x48>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e14d      	b.n	8006202 <HAL_SPI_Transmit+0x2e4>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2203      	movs	r2, #3
 8005f72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	88fa      	ldrh	r2, [r7, #6]
 8005f86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	88fa      	ldrh	r2, [r7, #6]
 8005f8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fb8:	d10f      	bne.n	8005fda <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe4:	2b40      	cmp	r3, #64	@ 0x40
 8005fe6:	d007      	beq.n	8005ff8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006000:	d952      	bls.n	80060a8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_SPI_Transmit+0xf2>
 800600a:	8b7b      	ldrh	r3, [r7, #26]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d145      	bne.n	800609c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006014:	881a      	ldrh	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	1c9a      	adds	r2, r3, #2
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006034:	e032      	b.n	800609c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b02      	cmp	r3, #2
 8006042:	d112      	bne.n	800606a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006048:	881a      	ldrh	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006068:	e018      	b.n	800609c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800606a:	f7fe fc89 	bl	8004980 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d803      	bhi.n	8006082 <HAL_SPI_Transmit+0x164>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d102      	bne.n	8006088 <HAL_SPI_Transmit+0x16a>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e0b2      	b.n	8006202 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1c7      	bne.n	8006036 <HAL_SPI_Transmit+0x118>
 80060a6:	e083      	b.n	80061b0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_SPI_Transmit+0x198>
 80060b0:	8b7b      	ldrh	r3, [r7, #26]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d177      	bne.n	80061a6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d912      	bls.n	80060e6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	881a      	ldrh	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b02      	subs	r3, #2
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060e4:	e05f      	b.n	80061a6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800610c:	e04b      	b.n	80061a6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d12b      	bne.n	8006174 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d912      	bls.n	800614c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	881a      	ldrh	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b02      	subs	r3, #2
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800614a:	e02c      	b.n	80061a6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	7812      	ldrb	r2, [r2, #0]
 8006158:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006172:	e018      	b.n	80061a6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006174:	f7fe fc04 	bl	8004980 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d803      	bhi.n	800618c <HAL_SPI_Transmit+0x26e>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d102      	bne.n	8006192 <HAL_SPI_Transmit+0x274>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e02d      	b.n	8006202 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ae      	bne.n	800610e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fcf5 	bl	8006ba4 <SPI_EndRxTxTransaction>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006200:	2300      	movs	r3, #0
  }
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b088      	sub	sp, #32
 800620e:	af02      	add	r7, sp, #8
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	603b      	str	r3, [r7, #0]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	d001      	beq.n	800622a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006226:	2302      	movs	r3, #2
 8006228:	e123      	b.n	8006472 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_SPI_Receive+0x2c>
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e11b      	b.n	8006472 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006242:	d112      	bne.n	800626a <HAL_SPI_Receive+0x60>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10e      	bne.n	800626a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2204      	movs	r2, #4
 8006250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	4613      	mov	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f90a 	bl	800647a <HAL_SPI_TransmitReceive>
 8006266:	4603      	mov	r3, r0
 8006268:	e103      	b.n	8006472 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800626a:	f7fe fb89 	bl	8004980 <HAL_GetTick>
 800626e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_SPI_Receive+0x74>
 800627a:	2302      	movs	r3, #2
 800627c:	e0f9      	b.n	8006472 <HAL_SPI_Receive+0x268>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2204      	movs	r2, #4
 800628a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	88fa      	ldrh	r2, [r7, #6]
 800629e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	88fa      	ldrh	r2, [r7, #6]
 80062a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062d0:	d908      	bls.n	80062e4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	e007      	b.n	80062f4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062fc:	d10f      	bne.n	800631e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800630c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800631c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006328:	2b40      	cmp	r3, #64	@ 0x40
 800632a:	d007      	beq.n	800633c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800633a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006344:	d875      	bhi.n	8006432 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006346:	e037      	b.n	80063b8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b01      	cmp	r3, #1
 8006354:	d117      	bne.n	8006386 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f103 020c 	add.w	r2, r3, #12
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006384:	e018      	b.n	80063b8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006386:	f7fe fafb 	bl	8004980 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d803      	bhi.n	800639e <HAL_SPI_Receive+0x194>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d102      	bne.n	80063a4 <HAL_SPI_Receive+0x19a>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e05c      	b.n	8006472 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1c1      	bne.n	8006348 <HAL_SPI_Receive+0x13e>
 80063c4:	e03b      	b.n	800643e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d115      	bne.n	8006400 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063de:	b292      	uxth	r2, r2
 80063e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	1c9a      	adds	r2, r3, #2
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80063fe:	e018      	b.n	8006432 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006400:	f7fe fabe 	bl	8004980 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d803      	bhi.n	8006418 <HAL_SPI_Receive+0x20e>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006416:	d102      	bne.n	800641e <HAL_SPI_Receive+0x214>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d109      	bne.n	8006432 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e01f      	b.n	8006472 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1c3      	bne.n	80063c6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fb56 	bl	8006af4 <SPI_EndRxTransaction>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006470:	2300      	movs	r3, #0
  }
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b08a      	sub	sp, #40	@ 0x28
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006488:	2301      	movs	r3, #1
 800648a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800648c:	f7fe fa78 	bl	8004980 <HAL_GetTick>
 8006490:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006498:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80064a0:	887b      	ldrh	r3, [r7, #2]
 80064a2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80064a4:	887b      	ldrh	r3, [r7, #2]
 80064a6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064a8:	7ffb      	ldrb	r3, [r7, #31]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d00c      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x4e>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064b4:	d106      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x4a>
 80064be:	7ffb      	ldrb	r3, [r7, #31]
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d001      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e1f3      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_SPI_TransmitReceive+0x60>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_SPI_TransmitReceive+0x60>
 80064d4:	887b      	ldrh	r3, [r7, #2]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e1e8      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x72>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e1e1      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x436>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d003      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2205      	movs	r2, #5
 8006504:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	887a      	ldrh	r2, [r7, #2]
 8006518:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	887a      	ldrh	r2, [r7, #2]
 8006520:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	887a      	ldrh	r2, [r7, #2]
 800652e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	887a      	ldrh	r2, [r7, #2]
 8006534:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800654a:	d802      	bhi.n	8006552 <HAL_SPI_TransmitReceive+0xd8>
 800654c:	8abb      	ldrh	r3, [r7, #20]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d908      	bls.n	8006564 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	e007      	b.n	8006574 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006572:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657e:	2b40      	cmp	r3, #64	@ 0x40
 8006580:	d007      	beq.n	8006592 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800659a:	f240 8083 	bls.w	80066a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x132>
 80065a6:	8afb      	ldrh	r3, [r7, #22]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d16f      	bne.n	800668c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	881a      	ldrh	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065bc:	1c9a      	adds	r2, r3, #2
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065d0:	e05c      	b.n	800668c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d11b      	bne.n	8006618 <HAL_SPI_TransmitReceive+0x19e>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d016      	beq.n	8006618 <HAL_SPI_TransmitReceive+0x19e>
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d113      	bne.n	8006618 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	881a      	ldrh	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006600:	1c9a      	adds	r2, r3, #2
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d11c      	bne.n	8006660 <HAL_SPI_TransmitReceive+0x1e6>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d016      	beq.n	8006660 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	b292      	uxth	r2, r2
 800663e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	1c9a      	adds	r2, r3, #2
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800665c:	2301      	movs	r3, #1
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006660:	f7fe f98e 	bl	8004980 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800666c:	429a      	cmp	r2, r3
 800666e:	d80d      	bhi.n	800668c <HAL_SPI_TransmitReceive+0x212>
 8006670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d009      	beq.n	800668c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e111      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d19d      	bne.n	80065d2 <HAL_SPI_TransmitReceive+0x158>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d197      	bne.n	80065d2 <HAL_SPI_TransmitReceive+0x158>
 80066a2:	e0e5      	b.n	8006870 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_SPI_TransmitReceive+0x23a>
 80066ac:	8afb      	ldrh	r3, [r7, #22]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	f040 80d1 	bne.w	8006856 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d912      	bls.n	80066e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c2:	881a      	ldrh	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ce:	1c9a      	adds	r2, r3, #2
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b02      	subs	r3, #2
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066e2:	e0b8      	b.n	8006856 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	7812      	ldrb	r2, [r2, #0]
 80066f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800670a:	e0a4      	b.n	8006856 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b02      	cmp	r3, #2
 8006718:	d134      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x30a>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d02f      	beq.n	8006784 <HAL_SPI_TransmitReceive+0x30a>
 8006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006726:	2b01      	cmp	r3, #1
 8006728:	d12c      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	d912      	bls.n	800675a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006738:	881a      	ldrh	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006744:	1c9a      	adds	r2, r3, #2
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b02      	subs	r3, #2
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006758:	e012      	b.n	8006780 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	330c      	adds	r3, #12
 8006764:	7812      	ldrb	r2, [r2, #0]
 8006766:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b01      	cmp	r3, #1
 8006790:	d148      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x3aa>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d042      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d923      	bls.n	80067f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b4:	b292      	uxth	r2, r2
 80067b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067bc:	1c9a      	adds	r2, r3, #2
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b02      	subs	r3, #2
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d81f      	bhi.n	8006820 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	e016      	b.n	8006820 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f103 020c 	add.w	r2, r3, #12
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fe:	7812      	ldrb	r2, [r2, #0]
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006820:	2301      	movs	r3, #1
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006824:	f7fe f8ac 	bl	8004980 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006830:	429a      	cmp	r2, r3
 8006832:	d803      	bhi.n	800683c <HAL_SPI_TransmitReceive+0x3c2>
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d102      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x3c8>
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e02c      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	f47f af55 	bne.w	800670c <HAL_SPI_TransmitReceive+0x292>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	f47f af4e 	bne.w	800670c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f995 	bl	8006ba4 <SPI_EndRxTxTransaction>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e00e      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80068ae:	2300      	movs	r3, #0
  }
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3728      	adds	r7, #40	@ 0x28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068c8:	f7fe f85a 	bl	8004980 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068d8:	f7fe f852 	bl	8004980 <HAL_GetTick>
 80068dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068de:	4b39      	ldr	r3, [pc, #228]	@ (80069c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	015b      	lsls	r3, r3, #5
 80068e4:	0d1b      	lsrs	r3, r3, #20
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ee:	e054      	b.n	800699a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d050      	beq.n	800699a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068f8:	f7fe f842 	bl	8004980 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	429a      	cmp	r2, r3
 8006906:	d902      	bls.n	800690e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d13d      	bne.n	800698a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800691c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006926:	d111      	bne.n	800694c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006930:	d004      	beq.n	800693c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800693a:	d107      	bne.n	800694c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800694a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006954:	d10f      	bne.n	8006976 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e017      	b.n	80069ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	3b01      	subs	r3, #1
 8006998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	bf0c      	ite	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	2300      	movne	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d19b      	bne.n	80068f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000000 	.word	0x20000000

080069c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	@ 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069da:	f7fd ffd1 	bl	8004980 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	1a9b      	subs	r3, r3, r2
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	4413      	add	r3, r2
 80069e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80069ea:	f7fd ffc9 	bl	8004980 <HAL_GetTick>
 80069ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069f8:	4b3d      	ldr	r3, [pc, #244]	@ (8006af0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	00da      	lsls	r2, r3, #3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	0d1b      	lsrs	r3, r3, #20
 8006a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a10:	e060      	b.n	8006ad4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006a18:	d107      	bne.n	8006a2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d050      	beq.n	8006ad4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a32:	f7fd ffa5 	bl	8004980 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d902      	bls.n	8006a48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d13d      	bne.n	8006ac4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a60:	d111      	bne.n	8006a86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a6a:	d004      	beq.n	8006a76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a74:	d107      	bne.n	8006a86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a8e:	d10f      	bne.n	8006ab0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006aae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e010      	b.n	8006ae6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4013      	ands	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d196      	bne.n	8006a12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3728      	adds	r7, #40	@ 0x28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000000 	.word	0x20000000

08006af4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b08:	d111      	bne.n	8006b2e <SPI_EndRxTransaction+0x3a>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b12:	d004      	beq.n	8006b1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1c:	d107      	bne.n	8006b2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2200      	movs	r2, #0
 8006b36:	2180      	movs	r1, #128	@ 0x80
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff febd 	bl	80068b8 <SPI_WaitFlagStateUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d007      	beq.n	8006b54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b48:	f043 0220 	orr.w	r2, r3, #32
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e023      	b.n	8006b9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b5c:	d11d      	bne.n	8006b9a <SPI_EndRxTransaction+0xa6>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b66:	d004      	beq.n	8006b72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b70:	d113      	bne.n	8006b9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f7ff ff22 	bl	80069c8 <SPI_WaitFifoStateUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b8e:	f043 0220 	orr.w	r2, r3, #32
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e000      	b.n	8006b9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f7ff ff03 	bl	80069c8 <SPI_WaitFifoStateUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bcc:	f043 0220 	orr.w	r2, r3, #32
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e027      	b.n	8006c28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	2180      	movs	r1, #128	@ 0x80
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff fe68 	bl	80068b8 <SPI_WaitFlagStateUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf2:	f043 0220 	orr.w	r2, r3, #32
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e014      	b.n	8006c28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff fedc 	bl	80069c8 <SPI_WaitFifoStateUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1a:	f043 0220 	orr.w	r2, r3, #32
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e000      	b.n	8006c28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e042      	b.n	8006cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f83b 	bl	8006cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2224      	movs	r2, #36	@ 0x24
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fc84 	bl	8007588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f985 	bl	8006f90 <UART_SetConfig>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e01b      	b.n	8006cc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fd03 	bl	80076cc <UART_CheckIdleState>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	@ 0x28
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d17b      	bne.n	8006df6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_UART_Transmit+0x26>
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e074      	b.n	8006df8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2221      	movs	r2, #33	@ 0x21
 8006d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d1e:	f7fd fe2f 	bl	8004980 <HAL_GetTick>
 8006d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d3c:	d108      	bne.n	8006d50 <HAL_UART_Transmit+0x6c>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e003      	b.n	8006d58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d58:	e030      	b.n	8006dbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2200      	movs	r2, #0
 8006d62:	2180      	movs	r1, #128	@ 0x80
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fd5b 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e03d      	b.n	8006df8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10b      	bne.n	8006d9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	3302      	adds	r3, #2
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	e007      	b.n	8006daa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1c8      	bne.n	8006d5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2140      	movs	r1, #64	@ 0x40
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 fd24 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e006      	b.n	8006df8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e000      	b.n	8006df8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006df6:	2302      	movs	r3, #2
  }
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	@ 0x28
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	f040 80b5 	bne.w	8006f86 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_UART_Receive+0x28>
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0ad      	b.n	8006f88 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2222      	movs	r2, #34	@ 0x22
 8006e38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e42:	f7fd fd9d 	bl	8004980 <HAL_GetTick>
 8006e46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	88fa      	ldrh	r2, [r7, #6]
 8006e54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e60:	d10e      	bne.n	8006e80 <HAL_UART_Receive+0x80>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <HAL_UART_Receive+0x76>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e74:	e02d      	b.n	8006ed2 <HAL_UART_Receive+0xd2>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	22ff      	movs	r2, #255	@ 0xff
 8006e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e7e:	e028      	b.n	8006ed2 <HAL_UART_Receive+0xd2>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <HAL_UART_Receive+0xa4>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <HAL_UART_Receive+0x9a>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	22ff      	movs	r2, #255	@ 0xff
 8006e94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e98:	e01b      	b.n	8006ed2 <HAL_UART_Receive+0xd2>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	227f      	movs	r2, #127	@ 0x7f
 8006e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ea2:	e016      	b.n	8006ed2 <HAL_UART_Receive+0xd2>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eac:	d10d      	bne.n	8006eca <HAL_UART_Receive+0xca>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <HAL_UART_Receive+0xc0>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	227f      	movs	r2, #127	@ 0x7f
 8006eba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ebe:	e008      	b.n	8006ed2 <HAL_UART_Receive+0xd2>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	223f      	movs	r2, #63	@ 0x3f
 8006ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ec8:	e003      	b.n	8006ed2 <HAL_UART_Receive+0xd2>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ed8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee2:	d108      	bne.n	8006ef6 <HAL_UART_Receive+0xf6>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	e003      	b.n	8006efe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006efe:	e036      	b.n	8006f6e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2200      	movs	r2, #0
 8006f08:	2120      	movs	r1, #32
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 fc88 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e032      	b.n	8006f88 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10c      	bne.n	8006f42 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	8a7b      	ldrh	r3, [r7, #18]
 8006f32:	4013      	ands	r3, r2
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	3302      	adds	r3, #2
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	e00c      	b.n	8006f5c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	8a7b      	ldrh	r3, [r7, #18]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	4013      	ands	r3, r2
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1c2      	bne.n	8006f00 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e000      	b.n	8006f88 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
  }
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f94:	b08c      	sub	sp, #48	@ 0x30
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4baa      	ldr	r3, [pc, #680]	@ (8007268 <UART_SetConfig+0x2d8>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a9f      	ldr	r2, [pc, #636]	@ (800726c <UART_SetConfig+0x2dc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007006:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007010:	430b      	orrs	r3, r1
 8007012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	f023 010f 	bic.w	r1, r3, #15
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a90      	ldr	r2, [pc, #576]	@ (8007270 <UART_SetConfig+0x2e0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d125      	bne.n	8007080 <UART_SetConfig+0xf0>
 8007034:	4b8f      	ldr	r3, [pc, #572]	@ (8007274 <UART_SetConfig+0x2e4>)
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b03      	cmp	r3, #3
 8007040:	d81a      	bhi.n	8007078 <UART_SetConfig+0xe8>
 8007042:	a201      	add	r2, pc, #4	@ (adr r2, 8007048 <UART_SetConfig+0xb8>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007059 	.word	0x08007059
 800704c:	08007069 	.word	0x08007069
 8007050:	08007061 	.word	0x08007061
 8007054:	08007071 	.word	0x08007071
 8007058:	2301      	movs	r3, #1
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705e:	e116      	b.n	800728e <UART_SetConfig+0x2fe>
 8007060:	2302      	movs	r3, #2
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007066:	e112      	b.n	800728e <UART_SetConfig+0x2fe>
 8007068:	2304      	movs	r3, #4
 800706a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706e:	e10e      	b.n	800728e <UART_SetConfig+0x2fe>
 8007070:	2308      	movs	r3, #8
 8007072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007076:	e10a      	b.n	800728e <UART_SetConfig+0x2fe>
 8007078:	2310      	movs	r3, #16
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707e:	e106      	b.n	800728e <UART_SetConfig+0x2fe>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a7c      	ldr	r2, [pc, #496]	@ (8007278 <UART_SetConfig+0x2e8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d138      	bne.n	80070fc <UART_SetConfig+0x16c>
 800708a:	4b7a      	ldr	r3, [pc, #488]	@ (8007274 <UART_SetConfig+0x2e4>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007090:	f003 030c 	and.w	r3, r3, #12
 8007094:	2b0c      	cmp	r3, #12
 8007096:	d82d      	bhi.n	80070f4 <UART_SetConfig+0x164>
 8007098:	a201      	add	r2, pc, #4	@ (adr r2, 80070a0 <UART_SetConfig+0x110>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	080070d5 	.word	0x080070d5
 80070a4:	080070f5 	.word	0x080070f5
 80070a8:	080070f5 	.word	0x080070f5
 80070ac:	080070f5 	.word	0x080070f5
 80070b0:	080070e5 	.word	0x080070e5
 80070b4:	080070f5 	.word	0x080070f5
 80070b8:	080070f5 	.word	0x080070f5
 80070bc:	080070f5 	.word	0x080070f5
 80070c0:	080070dd 	.word	0x080070dd
 80070c4:	080070f5 	.word	0x080070f5
 80070c8:	080070f5 	.word	0x080070f5
 80070cc:	080070f5 	.word	0x080070f5
 80070d0:	080070ed 	.word	0x080070ed
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070da:	e0d8      	b.n	800728e <UART_SetConfig+0x2fe>
 80070dc:	2302      	movs	r3, #2
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e2:	e0d4      	b.n	800728e <UART_SetConfig+0x2fe>
 80070e4:	2304      	movs	r3, #4
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ea:	e0d0      	b.n	800728e <UART_SetConfig+0x2fe>
 80070ec:	2308      	movs	r3, #8
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f2:	e0cc      	b.n	800728e <UART_SetConfig+0x2fe>
 80070f4:	2310      	movs	r3, #16
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fa:	e0c8      	b.n	800728e <UART_SetConfig+0x2fe>
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a5e      	ldr	r2, [pc, #376]	@ (800727c <UART_SetConfig+0x2ec>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d125      	bne.n	8007152 <UART_SetConfig+0x1c2>
 8007106:	4b5b      	ldr	r3, [pc, #364]	@ (8007274 <UART_SetConfig+0x2e4>)
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007110:	2b30      	cmp	r3, #48	@ 0x30
 8007112:	d016      	beq.n	8007142 <UART_SetConfig+0x1b2>
 8007114:	2b30      	cmp	r3, #48	@ 0x30
 8007116:	d818      	bhi.n	800714a <UART_SetConfig+0x1ba>
 8007118:	2b20      	cmp	r3, #32
 800711a:	d00a      	beq.n	8007132 <UART_SetConfig+0x1a2>
 800711c:	2b20      	cmp	r3, #32
 800711e:	d814      	bhi.n	800714a <UART_SetConfig+0x1ba>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <UART_SetConfig+0x19a>
 8007124:	2b10      	cmp	r3, #16
 8007126:	d008      	beq.n	800713a <UART_SetConfig+0x1aa>
 8007128:	e00f      	b.n	800714a <UART_SetConfig+0x1ba>
 800712a:	2300      	movs	r3, #0
 800712c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007130:	e0ad      	b.n	800728e <UART_SetConfig+0x2fe>
 8007132:	2302      	movs	r3, #2
 8007134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007138:	e0a9      	b.n	800728e <UART_SetConfig+0x2fe>
 800713a:	2304      	movs	r3, #4
 800713c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007140:	e0a5      	b.n	800728e <UART_SetConfig+0x2fe>
 8007142:	2308      	movs	r3, #8
 8007144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007148:	e0a1      	b.n	800728e <UART_SetConfig+0x2fe>
 800714a:	2310      	movs	r3, #16
 800714c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007150:	e09d      	b.n	800728e <UART_SetConfig+0x2fe>
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a4a      	ldr	r2, [pc, #296]	@ (8007280 <UART_SetConfig+0x2f0>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d125      	bne.n	80071a8 <UART_SetConfig+0x218>
 800715c:	4b45      	ldr	r3, [pc, #276]	@ (8007274 <UART_SetConfig+0x2e4>)
 800715e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007162:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007166:	2bc0      	cmp	r3, #192	@ 0xc0
 8007168:	d016      	beq.n	8007198 <UART_SetConfig+0x208>
 800716a:	2bc0      	cmp	r3, #192	@ 0xc0
 800716c:	d818      	bhi.n	80071a0 <UART_SetConfig+0x210>
 800716e:	2b80      	cmp	r3, #128	@ 0x80
 8007170:	d00a      	beq.n	8007188 <UART_SetConfig+0x1f8>
 8007172:	2b80      	cmp	r3, #128	@ 0x80
 8007174:	d814      	bhi.n	80071a0 <UART_SetConfig+0x210>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <UART_SetConfig+0x1f0>
 800717a:	2b40      	cmp	r3, #64	@ 0x40
 800717c:	d008      	beq.n	8007190 <UART_SetConfig+0x200>
 800717e:	e00f      	b.n	80071a0 <UART_SetConfig+0x210>
 8007180:	2300      	movs	r3, #0
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007186:	e082      	b.n	800728e <UART_SetConfig+0x2fe>
 8007188:	2302      	movs	r3, #2
 800718a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718e:	e07e      	b.n	800728e <UART_SetConfig+0x2fe>
 8007190:	2304      	movs	r3, #4
 8007192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007196:	e07a      	b.n	800728e <UART_SetConfig+0x2fe>
 8007198:	2308      	movs	r3, #8
 800719a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719e:	e076      	b.n	800728e <UART_SetConfig+0x2fe>
 80071a0:	2310      	movs	r3, #16
 80071a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a6:	e072      	b.n	800728e <UART_SetConfig+0x2fe>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a35      	ldr	r2, [pc, #212]	@ (8007284 <UART_SetConfig+0x2f4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d12a      	bne.n	8007208 <UART_SetConfig+0x278>
 80071b2:	4b30      	ldr	r3, [pc, #192]	@ (8007274 <UART_SetConfig+0x2e4>)
 80071b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071c0:	d01a      	beq.n	80071f8 <UART_SetConfig+0x268>
 80071c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071c6:	d81b      	bhi.n	8007200 <UART_SetConfig+0x270>
 80071c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071cc:	d00c      	beq.n	80071e8 <UART_SetConfig+0x258>
 80071ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d2:	d815      	bhi.n	8007200 <UART_SetConfig+0x270>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <UART_SetConfig+0x250>
 80071d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071dc:	d008      	beq.n	80071f0 <UART_SetConfig+0x260>
 80071de:	e00f      	b.n	8007200 <UART_SetConfig+0x270>
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e6:	e052      	b.n	800728e <UART_SetConfig+0x2fe>
 80071e8:	2302      	movs	r3, #2
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ee:	e04e      	b.n	800728e <UART_SetConfig+0x2fe>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f6:	e04a      	b.n	800728e <UART_SetConfig+0x2fe>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fe:	e046      	b.n	800728e <UART_SetConfig+0x2fe>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007206:	e042      	b.n	800728e <UART_SetConfig+0x2fe>
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a17      	ldr	r2, [pc, #92]	@ (800726c <UART_SetConfig+0x2dc>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d13a      	bne.n	8007288 <UART_SetConfig+0x2f8>
 8007212:	4b18      	ldr	r3, [pc, #96]	@ (8007274 <UART_SetConfig+0x2e4>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007218:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800721c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007220:	d01a      	beq.n	8007258 <UART_SetConfig+0x2c8>
 8007222:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007226:	d81b      	bhi.n	8007260 <UART_SetConfig+0x2d0>
 8007228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800722c:	d00c      	beq.n	8007248 <UART_SetConfig+0x2b8>
 800722e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007232:	d815      	bhi.n	8007260 <UART_SetConfig+0x2d0>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <UART_SetConfig+0x2b0>
 8007238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723c:	d008      	beq.n	8007250 <UART_SetConfig+0x2c0>
 800723e:	e00f      	b.n	8007260 <UART_SetConfig+0x2d0>
 8007240:	2300      	movs	r3, #0
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007246:	e022      	b.n	800728e <UART_SetConfig+0x2fe>
 8007248:	2302      	movs	r3, #2
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724e:	e01e      	b.n	800728e <UART_SetConfig+0x2fe>
 8007250:	2304      	movs	r3, #4
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007256:	e01a      	b.n	800728e <UART_SetConfig+0x2fe>
 8007258:	2308      	movs	r3, #8
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725e:	e016      	b.n	800728e <UART_SetConfig+0x2fe>
 8007260:	2310      	movs	r3, #16
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007266:	e012      	b.n	800728e <UART_SetConfig+0x2fe>
 8007268:	cfff69f3 	.word	0xcfff69f3
 800726c:	40008000 	.word	0x40008000
 8007270:	40013800 	.word	0x40013800
 8007274:	40021000 	.word	0x40021000
 8007278:	40004400 	.word	0x40004400
 800727c:	40004800 	.word	0x40004800
 8007280:	40004c00 	.word	0x40004c00
 8007284:	40005000 	.word	0x40005000
 8007288:	2310      	movs	r3, #16
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4aae      	ldr	r2, [pc, #696]	@ (800754c <UART_SetConfig+0x5bc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	f040 8097 	bne.w	80073c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800729a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d823      	bhi.n	80072ea <UART_SetConfig+0x35a>
 80072a2:	a201      	add	r2, pc, #4	@ (adr r2, 80072a8 <UART_SetConfig+0x318>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072cd 	.word	0x080072cd
 80072ac:	080072eb 	.word	0x080072eb
 80072b0:	080072d5 	.word	0x080072d5
 80072b4:	080072eb 	.word	0x080072eb
 80072b8:	080072db 	.word	0x080072db
 80072bc:	080072eb 	.word	0x080072eb
 80072c0:	080072eb 	.word	0x080072eb
 80072c4:	080072eb 	.word	0x080072eb
 80072c8:	080072e3 	.word	0x080072e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072cc:	f7fe fce2 	bl	8005c94 <HAL_RCC_GetPCLK1Freq>
 80072d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072d2:	e010      	b.n	80072f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d4:	4b9e      	ldr	r3, [pc, #632]	@ (8007550 <UART_SetConfig+0x5c0>)
 80072d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072d8:	e00d      	b.n	80072f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072da:	f7fe fc6d 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 80072de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072e0:	e009      	b.n	80072f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072e8:	e005      	b.n	80072f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8130 	beq.w	800755e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007302:	4a94      	ldr	r2, [pc, #592]	@ (8007554 <UART_SetConfig+0x5c4>)
 8007304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007308:	461a      	mov	r2, r3
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007310:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4413      	add	r3, r2
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	429a      	cmp	r2, r3
 8007320:	d305      	bcc.n	800732e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	429a      	cmp	r2, r3
 800732c:	d903      	bls.n	8007336 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007334:	e113      	b.n	800755e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	2200      	movs	r2, #0
 800733a:	60bb      	str	r3, [r7, #8]
 800733c:	60fa      	str	r2, [r7, #12]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	4a84      	ldr	r2, [pc, #528]	@ (8007554 <UART_SetConfig+0x5c4>)
 8007344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007348:	b29b      	uxth	r3, r3
 800734a:	2200      	movs	r2, #0
 800734c:	603b      	str	r3, [r7, #0]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007358:	f7f8 ffb2 	bl	80002c0 <__aeabi_uldivmod>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4610      	mov	r0, r2
 8007362:	4619      	mov	r1, r3
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	020b      	lsls	r3, r1, #8
 800736e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007372:	0202      	lsls	r2, r0, #8
 8007374:	6979      	ldr	r1, [r7, #20]
 8007376:	6849      	ldr	r1, [r1, #4]
 8007378:	0849      	lsrs	r1, r1, #1
 800737a:	2000      	movs	r0, #0
 800737c:	460c      	mov	r4, r1
 800737e:	4605      	mov	r5, r0
 8007380:	eb12 0804 	adds.w	r8, r2, r4
 8007384:	eb43 0905 	adc.w	r9, r3, r5
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	469a      	mov	sl, r3
 8007390:	4693      	mov	fp, r2
 8007392:	4652      	mov	r2, sl
 8007394:	465b      	mov	r3, fp
 8007396:	4640      	mov	r0, r8
 8007398:	4649      	mov	r1, r9
 800739a:	f7f8 ff91 	bl	80002c0 <__aeabi_uldivmod>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4613      	mov	r3, r2
 80073a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ac:	d308      	bcc.n	80073c0 <UART_SetConfig+0x430>
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073b4:	d204      	bcs.n	80073c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	60da      	str	r2, [r3, #12]
 80073be:	e0ce      	b.n	800755e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073c6:	e0ca      	b.n	800755e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d0:	d166      	bne.n	80074a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80073d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d827      	bhi.n	800742a <UART_SetConfig+0x49a>
 80073da:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <UART_SetConfig+0x450>)
 80073dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e0:	08007405 	.word	0x08007405
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	08007415 	.word	0x08007415
 80073ec:	0800742b 	.word	0x0800742b
 80073f0:	0800741b 	.word	0x0800741b
 80073f4:	0800742b 	.word	0x0800742b
 80073f8:	0800742b 	.word	0x0800742b
 80073fc:	0800742b 	.word	0x0800742b
 8007400:	08007423 	.word	0x08007423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007404:	f7fe fc46 	bl	8005c94 <HAL_RCC_GetPCLK1Freq>
 8007408:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800740a:	e014      	b.n	8007436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800740c:	f7fe fc58 	bl	8005cc0 <HAL_RCC_GetPCLK2Freq>
 8007410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007412:	e010      	b.n	8007436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007414:	4b4e      	ldr	r3, [pc, #312]	@ (8007550 <UART_SetConfig+0x5c0>)
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007418:	e00d      	b.n	8007436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800741a:	f7fe fbcd 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 800741e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007420:	e009      	b.n	8007436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007428:	e005      	b.n	8007436 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8090 	beq.w	800755e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	4a44      	ldr	r2, [pc, #272]	@ (8007554 <UART_SetConfig+0x5c4>)
 8007444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007448:	461a      	mov	r2, r3
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007450:	005a      	lsls	r2, r3, #1
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	441a      	add	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007462:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	2b0f      	cmp	r3, #15
 8007468:	d916      	bls.n	8007498 <UART_SetConfig+0x508>
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007470:	d212      	bcs.n	8007498 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	b29b      	uxth	r3, r3
 8007476:	f023 030f 	bic.w	r3, r3, #15
 800747a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	b29b      	uxth	r3, r3
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	b29a      	uxth	r2, r3
 8007488:	8bfb      	ldrh	r3, [r7, #30]
 800748a:	4313      	orrs	r3, r2
 800748c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	8bfa      	ldrh	r2, [r7, #30]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	e062      	b.n	800755e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800749e:	e05e      	b.n	800755e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d828      	bhi.n	80074fa <UART_SetConfig+0x56a>
 80074a8:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <UART_SetConfig+0x520>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074d5 	.word	0x080074d5
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074e5 	.word	0x080074e5
 80074bc:	080074fb 	.word	0x080074fb
 80074c0:	080074eb 	.word	0x080074eb
 80074c4:	080074fb 	.word	0x080074fb
 80074c8:	080074fb 	.word	0x080074fb
 80074cc:	080074fb 	.word	0x080074fb
 80074d0:	080074f3 	.word	0x080074f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d4:	f7fe fbde 	bl	8005c94 <HAL_RCC_GetPCLK1Freq>
 80074d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074da:	e014      	b.n	8007506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074dc:	f7fe fbf0 	bl	8005cc0 <HAL_RCC_GetPCLK2Freq>
 80074e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074e2:	e010      	b.n	8007506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007550 <UART_SetConfig+0x5c0>)
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074e8:	e00d      	b.n	8007506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ea:	f7fe fb65 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 80074ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074f0:	e009      	b.n	8007506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074f8:	e005      	b.n	8007506 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007504:	bf00      	nop
    }

    if (pclk != 0U)
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	d028      	beq.n	800755e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	4a10      	ldr	r2, [pc, #64]	@ (8007554 <UART_SetConfig+0x5c4>)
 8007512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007516:	461a      	mov	r2, r3
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	fbb3 f2f2 	udiv	r2, r3, r2
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	441a      	add	r2, r3
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	fbb2 f3f3 	udiv	r3, r2, r3
 800752e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	2b0f      	cmp	r3, #15
 8007534:	d910      	bls.n	8007558 <UART_SetConfig+0x5c8>
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800753c:	d20c      	bcs.n	8007558 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	b29a      	uxth	r2, r3
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60da      	str	r2, [r3, #12]
 8007548:	e009      	b.n	800755e <UART_SetConfig+0x5ce>
 800754a:	bf00      	nop
 800754c:	40008000 	.word	0x40008000
 8007550:	00f42400 	.word	0x00f42400
 8007554:	0801eef8 	.word	0x0801eef8
      }
      else
      {
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2201      	movs	r2, #1
 8007562:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2201      	movs	r2, #1
 800756a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2200      	movs	r2, #0
 8007572:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2200      	movs	r2, #0
 8007578:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800757a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800757e:	4618      	mov	r0, r3
 8007580:	3730      	adds	r7, #48	@ 0x30
 8007582:	46bd      	mov	sp, r7
 8007584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01a      	beq.n	800769e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007686:	d10a      	bne.n	800769e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	605a      	str	r2, [r3, #4]
  }
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b098      	sub	sp, #96	@ 0x60
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076dc:	f7fd f950 	bl	8004980 <HAL_GetTick>
 80076e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d12f      	bne.n	8007750 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f8:	2200      	movs	r2, #0
 80076fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f88e 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d022      	beq.n	8007750 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800771a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800771e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007728:	647b      	str	r3, [r7, #68]	@ 0x44
 800772a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800772e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2220      	movs	r2, #32
 8007740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e063      	b.n	8007818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b04      	cmp	r3, #4
 800775c:	d149      	bne.n	80077f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800775e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007766:	2200      	movs	r2, #0
 8007768:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f857 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d03c      	beq.n	80077f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	623b      	str	r3, [r7, #32]
   return(result);
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007796:	633b      	str	r3, [r7, #48]	@ 0x30
 8007798:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800779c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e6      	bne.n	8007778 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ca:	61fa      	str	r2, [r7, #28]
 80077cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	69b9      	ldr	r1, [r7, #24]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	617b      	str	r3, [r7, #20]
   return(result);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e012      	b.n	8007818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3758      	adds	r7, #88	@ 0x58
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	e04f      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d04b      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783a:	f7fd f8a1 	bl	8004980 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	429a      	cmp	r2, r3
 8007848:	d302      	bcc.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e04e      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d037      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b80      	cmp	r3, #128	@ 0x80
 8007866:	d034      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d031      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b08      	cmp	r3, #8
 800787a:	d110      	bne.n	800789e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2208      	movs	r2, #8
 8007882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f838 	bl	80078fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2208      	movs	r2, #8
 800788e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e029      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ac:	d111      	bne.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f81e 	bl	80078fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e00f      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69da      	ldr	r2, [r3, #28]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4013      	ands	r3, r2
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	bf0c      	ite	eq
 80078e2:	2301      	moveq	r3, #1
 80078e4:	2300      	movne	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d0a0      	beq.n	8007832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b095      	sub	sp, #84	@ 0x54
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	461a      	mov	r2, r3
 800791e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007920:	643b      	str	r3, [r7, #64]	@ 0x40
 8007922:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800792e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e6      	bne.n	8007902 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	61fb      	str	r3, [r7, #28]
   return(result);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800794a:	f023 0301 	bic.w	r3, r3, #1
 800794e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800795a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800795e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e3      	bne.n	8007934 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007970:	2b01      	cmp	r3, #1
 8007972:	d118      	bne.n	80079a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	60bb      	str	r3, [r7, #8]
   return(result);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f023 0310 	bic.w	r3, r3, #16
 8007988:	647b      	str	r3, [r7, #68]	@ 0x44
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6979      	ldr	r1, [r7, #20]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	613b      	str	r3, [r7, #16]
   return(result);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e6      	bne.n	8007974 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079ba:	bf00      	nop
 80079bc:	3754      	adds	r7, #84	@ 0x54
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <MX_TOF_Init>:
uint32_t current_time = 0;  // Stores current time
uint32_t frame_time = 0;  // Stores time taken for one frame
float measured_fps = 0;   // Measured frame rate (Hz)

void MX_TOF_Init(void)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L8A1_SimpleRanging_Init();
 80079ca:	f000 f809 	bl	80079e0 <MX_53L8A1_SimpleRanging_Init>
  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80079ce:	bf00      	nop
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */
	  //current_time = HAL_GetTick();

	      /* polling mode */

	  MX_53L8A1_SimpleRanging_Process();
 80079d6:	f000 f863 	bl	8007aa0 <MX_53L8A1_SimpleRanging_Process>


  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 80079da:	bf00      	nop
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <MX_53L8A1_SimpleRanging_Init>:

static void MX_53L8A1_SimpleRanging_Init(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
	COM_InitTypeDef COM_Init;
	COM_Init.BaudRate = 115200;    // Example baud rate
 80079e6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80079ea:	603b      	str	r3, [r7, #0]
	COM_Init.WordLength = UART_WORDLENGTH_8B;
 80079ec:	2300      	movs	r3, #0
 80079ee:	607b      	str	r3, [r7, #4]
	COM_Init.StopBits = UART_STOPBITS_1;
 80079f0:	2300      	movs	r3, #0
 80079f2:	813b      	strh	r3, [r7, #8]
	COM_Init.Parity = UART_PARITY_NONE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	817b      	strh	r3, [r7, #10]
	//COM_Init.Mode = UART_MODE_TX_RX;
	COM_Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	81bb      	strh	r3, [r7, #12]

	BSP_COM_Init(COM1, &COM_Init);
 80079fc:	463b      	mov	r3, r7
 80079fe:	4619      	mov	r1, r3
 8007a00:	2000      	movs	r0, #0
 8007a02:	f7fc fe87 	bl	8004714 <BSP_COM_Init>


  /* Initialize button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8007a06:	2101      	movs	r1, #1
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f7fc fe03 	bl	8004614 <BSP_PB_Init>

  /* Sensor reset */
  HAL_GPIO_WritePin(VL53L8A1_PWR_EN_C_PORT, VL53L8A1_PWR_EN_C_PIN, GPIO_PIN_RESET);
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2101      	movs	r1, #1
 8007a12:	481d      	ldr	r0, [pc, #116]	@ (8007a88 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8007a14:	f7fd fbb6 	bl	8005184 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007a18:	2002      	movs	r0, #2
 8007a1a:	f7fc ffbd 	bl	8004998 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_PWR_EN_C_PORT, VL53L8A1_PWR_EN_C_PIN, GPIO_PIN_SET);
 8007a1e:	2201      	movs	r2, #1
 8007a20:	2101      	movs	r1, #1
 8007a22:	4819      	ldr	r0, [pc, #100]	@ (8007a88 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8007a24:	f7fd fbae 	bl	8005184 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007a28:	2002      	movs	r0, #2
 8007a2a:	f7fc ffb5 	bl	8004998 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_LPn_C_PORT, VL53L8A1_LPn_C_PIN, GPIO_PIN_RESET);
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2110      	movs	r1, #16
 8007a32:	4815      	ldr	r0, [pc, #84]	@ (8007a88 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8007a34:	f7fd fba6 	bl	8005184 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007a38:	2002      	movs	r0, #2
 8007a3a:	f7fc ffad 	bl	8004998 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_LPn_C_PORT, VL53L8A1_LPn_C_PIN, GPIO_PIN_SET);
 8007a3e:	2201      	movs	r2, #1
 8007a40:	2110      	movs	r1, #16
 8007a42:	4811      	ldr	r0, [pc, #68]	@ (8007a88 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8007a44:	f7fd fb9e 	bl	8005184 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007a48:	2002      	movs	r0, #2
 8007a4a:	f7fc ffa5 	bl	8004998 <HAL_Delay>

  printf("\033[2H\033[2J");
 8007a4e:	480f      	ldr	r0, [pc, #60]	@ (8007a8c <MX_53L8A1_SimpleRanging_Init+0xac>)
 8007a50:	f000 fb54 	bl	80080fc <iprintf>
  printf("53L8A1 Simple Ranging demo application\n");
 8007a54:	480e      	ldr	r0, [pc, #56]	@ (8007a90 <MX_53L8A1_SimpleRanging_Init+0xb0>)
 8007a56:	f000 fbc1 	bl	80081dc <puts>
  printf("Sensor initialization...\n");
 8007a5a:	480e      	ldr	r0, [pc, #56]	@ (8007a94 <MX_53L8A1_SimpleRanging_Init+0xb4>)
 8007a5c:	f000 fbbe 	bl	80081dc <puts>

  status = VL53L8A1_RANGING_SENSOR_Init(0);
 8007a60:	2000      	movs	r0, #0
 8007a62:	f7f9 fc97 	bl	8001394 <VL53L8A1_RANGING_SENSOR_Init>
 8007a66:	4603      	mov	r3, r0
 8007a68:	4a0b      	ldr	r2, [pc, #44]	@ (8007a98 <MX_53L8A1_SimpleRanging_Init+0xb8>)
 8007a6a:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <MX_53L8A1_SimpleRanging_Init+0xb8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <MX_53L8A1_SimpleRanging_Init+0x9e>
  {
    printf("VL53L8A1_RANGING_SENSOR_Init failed\n");
 8007a74:	4809      	ldr	r0, [pc, #36]	@ (8007a9c <MX_53L8A1_SimpleRanging_Init+0xbc>)
 8007a76:	f000 fbb1 	bl	80081dc <puts>
    while (1);
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <MX_53L8A1_SimpleRanging_Init+0x9a>
  }
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	48000400 	.word	0x48000400
 8007a8c:	080094b8 	.word	0x080094b8
 8007a90:	080094c4 	.word	0x080094c4
 8007a94:	080094ec 	.word	0x080094ec
 8007a98:	20003418 	.word	0x20003418
 8007a9c:	08009508 	.word	0x08009508

08007aa0 <MX_53L8A1_SimpleRanging_Process>:

static void MX_53L8A1_SimpleRanging_Process(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
  uint32_t Id;
  uint32_t measurement_index = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	607b      	str	r3, [r7, #4]

 // printf("deinit is done let init\n");
 // BSP_SPI2_Init(&hspi2);
  //printf("init spi 2\n");

  VL53L8A1_RANGING_SENSOR_ReadID(0, &Id);
 8007aaa:	463b      	mov	r3, r7
 8007aac:	4619      	mov	r1, r3
 8007aae:	2000      	movs	r0, #0
 8007ab0:	f7f9 fc30 	bl	8001314 <VL53L8A1_RANGING_SENSOR_ReadID>
  //static VL53L8CX_Object_t   VL53L8CXObj[0];
  //VL53L8CX_ReadID(&(VL53L8CXObj[0]), &Id);
  printf("Sensor ID: 0x%X\n", Id);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4845      	ldr	r0, [pc, #276]	@ (8007bd0 <MX_53L8A1_SimpleRanging_Process+0x130>)
 8007aba:	f000 fb1f 	bl	80080fc <iprintf>

  VL53L8A1_RANGING_SENSOR_GetCapabilities(0, &Cap);
 8007abe:	4945      	ldr	r1, [pc, #276]	@ (8007bd4 <MX_53L8A1_SimpleRanging_Process+0x134>)
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f7f9 fb8b 	bl	80011dc <VL53L8A1_RANGING_SENSOR_GetCapabilities>
  printf("Capabilities:\n");
 8007ac6:	4844      	ldr	r0, [pc, #272]	@ (8007bd8 <MX_53L8A1_SimpleRanging_Process+0x138>)
 8007ac8:	f000 fb88 	bl	80081dc <puts>
  printf("  Number of Zones: %u\n", Cap.NumberOfZones);
 8007acc:	4b41      	ldr	r3, [pc, #260]	@ (8007bd4 <MX_53L8A1_SimpleRanging_Process+0x134>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4842      	ldr	r0, [pc, #264]	@ (8007bdc <MX_53L8A1_SimpleRanging_Process+0x13c>)
 8007ad4:	f000 fb12 	bl	80080fc <iprintf>
  printf("  Max Targets per Zone: %u\n", Cap.MaxNumberOfTargetsPerZone);
 8007ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bd4 <MX_53L8A1_SimpleRanging_Process+0x134>)
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4619      	mov	r1, r3
 8007ade:	4840      	ldr	r0, [pc, #256]	@ (8007be0 <MX_53L8A1_SimpleRanging_Process+0x140>)
 8007ae0:	f000 fb0c 	bl	80080fc <iprintf>
  printf("  Custom ROI: %u\n", Cap.CustomROI);
 8007ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8007bd4 <MX_53L8A1_SimpleRanging_Process+0x134>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	483e      	ldr	r0, [pc, #248]	@ (8007be4 <MX_53L8A1_SimpleRanging_Process+0x144>)
 8007aec:	f000 fb06 	bl	80080fc <iprintf>
  printf("  Threshold Detection: %u\n", Cap.ThresholdDetection);
 8007af0:	4b38      	ldr	r3, [pc, #224]	@ (8007bd4 <MX_53L8A1_SimpleRanging_Process+0x134>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	4619      	mov	r1, r3
 8007af6:	483c      	ldr	r0, [pc, #240]	@ (8007be8 <MX_53L8A1_SimpleRanging_Process+0x148>)
 8007af8:	f000 fb00 	bl	80080fc <iprintf>


  printf("Sensor ID: 0x%X\n", Id);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	4833      	ldr	r0, [pc, #204]	@ (8007bd0 <MX_53L8A1_SimpleRanging_Process+0x130>)
 8007b02:	f000 fafb 	bl	80080fc <iprintf>
  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8007b06:	4b39      	ldr	r3, [pc, #228]	@ (8007bec <MX_53L8A1_SimpleRanging_Process+0x14c>)
 8007b08:	2203      	movs	r2, #3
 8007b0a:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 8007b0c:	4b37      	ldr	r3, [pc, #220]	@ (8007bec <MX_53L8A1_SimpleRanging_Process+0x14c>)
 8007b0e:	2214      	movs	r2, #20
 8007b10:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8007b12:	4b36      	ldr	r3, [pc, #216]	@ (8007bec <MX_53L8A1_SimpleRanging_Process+0x14c>)
 8007b14:	2232      	movs	r2, #50	@ 0x32
 8007b16:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8007b18:	4b34      	ldr	r3, [pc, #208]	@ (8007bec <MX_53L8A1_SimpleRanging_Process+0x14c>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8007b1e:	4b33      	ldr	r3, [pc, #204]	@ (8007bec <MX_53L8A1_SimpleRanging_Process+0x14c>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L8A1_RANGING_SENSOR_ConfigProfile(0, &Profile);
 8007b24:	4931      	ldr	r1, [pc, #196]	@ (8007bec <MX_53L8A1_SimpleRanging_Process+0x14c>)
 8007b26:	2000      	movs	r0, #0
 8007b28:	f7f9 fbbc 	bl	80012a4 <VL53L8A1_RANGING_SENSOR_ConfigProfile>

  status = VL53L8A1_RANGING_SENSOR_Start(0, RS_MODE_BLOCKING_CONTINUOUS);
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	2000      	movs	r0, #0
 8007b30:	f7f9 fb86 	bl	8001240 <VL53L8A1_RANGING_SENSOR_Start>
 8007b34:	4603      	mov	r3, r0
 8007b36:	4a2e      	ldr	r2, [pc, #184]	@ (8007bf0 <MX_53L8A1_SimpleRanging_Process+0x150>)
 8007b38:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8007b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf0 <MX_53L8A1_SimpleRanging_Process+0x150>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <MX_53L8A1_SimpleRanging_Process+0xac>
  {
    printf("VL53L8A1_RANGING_SENSOR_Start failed\n");
 8007b42:	482c      	ldr	r0, [pc, #176]	@ (8007bf4 <MX_53L8A1_SimpleRanging_Process+0x154>)
 8007b44:	f000 fb4a 	bl	80081dc <puts>
    while (1);
 8007b48:	bf00      	nop
 8007b4a:	e7fd      	b.n	8007b48 <MX_53L8A1_SimpleRanging_Process+0xa8>
  }
  printf("It work\n");
 8007b4c:	482a      	ldr	r0, [pc, #168]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b4e:	f000 fb45 	bl	80081dc <puts>
  printf("It work\n");
 8007b52:	4829      	ldr	r0, [pc, #164]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b54:	f000 fb42 	bl	80081dc <puts>
  printf("It work\n");
 8007b58:	4827      	ldr	r0, [pc, #156]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b5a:	f000 fb3f 	bl	80081dc <puts>
  printf("It work\n");
 8007b5e:	4826      	ldr	r0, [pc, #152]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b60:	f000 fb3c 	bl	80081dc <puts>
  printf("It work\n");
 8007b64:	4824      	ldr	r0, [pc, #144]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b66:	f000 fb39 	bl	80081dc <puts>
  printf("It work\n");
 8007b6a:	4823      	ldr	r0, [pc, #140]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b6c:	f000 fb36 	bl	80081dc <puts>
  printf("It work\n");
 8007b70:	4821      	ldr	r0, [pc, #132]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b72:	f000 fb33 	bl	80081dc <puts>
  printf("It work\n");
 8007b76:	4820      	ldr	r0, [pc, #128]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b78:	f000 fb30 	bl	80081dc <puts>
  printf("It work\n");
 8007b7c:	481e      	ldr	r0, [pc, #120]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b7e:	f000 fb2d 	bl	80081dc <puts>
  printf("It work\n");
 8007b82:	481d      	ldr	r0, [pc, #116]	@ (8007bf8 <MX_53L8A1_SimpleRanging_Process+0x158>)
 8007b84:	f000 fb2a 	bl	80081dc <puts>
  //   uint32_t start_time = HAL_GetTick();

	 // printf("there ha here\n");
      // Get sensor data
    //  uint32_t start_time1 = HAL_GetTick();
      status = VL53L8A1_RANGING_SENSOR_GetDistance(0, &Result);
 8007b88:	491c      	ldr	r1, [pc, #112]	@ (8007bfc <MX_53L8A1_SimpleRanging_Process+0x15c>)
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	f7f9 fcfc 	bl	8001588 <VL53L8A1_RANGING_SENSOR_GetDistance>
 8007b90:	4603      	mov	r3, r0
 8007b92:	4a17      	ldr	r2, [pc, #92]	@ (8007bf0 <MX_53L8A1_SimpleRanging_Process+0x150>)
 8007b94:	6013      	str	r3, [r2, #0]
//printf("Here\n");

      //uint32_t frame_time1 = end_time1 - start_time1;  // in milliseconds
      //float measured_fps = (frame_time1 > 0) ? 1000.0f / frame_time1 : 0;

      if (status == BSP_ERROR_NONE)
 8007b96:	4b16      	ldr	r3, [pc, #88]	@ (8007bf0 <MX_53L8A1_SimpleRanging_Process+0x150>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d108      	bne.n	8007bb0 <MX_53L8A1_SimpleRanging_Process+0x110>
      {
          save_useful_data(&Result);
 8007b9e:	4817      	ldr	r0, [pc, #92]	@ (8007bfc <MX_53L8A1_SimpleRanging_Process+0x15c>)
 8007ba0:	f000 f82e 	bl	8007c00 <save_useful_data>
          print_useful_data_txt(measurement_index);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f8d1 	bl	8007d4c <print_useful_data_txt>
          measurement_index++;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3301      	adds	r3, #1
 8007bae:	607b      	str	r3, [r7, #4]
      }

      // Check for commands, etc.
      if (com_has_data())
 8007bb0:	f000 f9be 	bl	8007f30 <com_has_data>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <MX_53L8A1_SimpleRanging_Process+0x126>
      {
          handle_cmd(get_key());
 8007bba:	f000 f9a5 	bl	8007f08 <get_key>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f981 	bl	8007ec8 <handle_cmd>

      // Optionally, print the measured FPS
     // printf("start time1: %d \n", start_time1);
    //   printf("end time1: %d\n", end_time1);
    //   printf("frame rate: %.2f\n", measured_fps);
      HAL_Delay(POLLING_PERIOD);
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	f7fc fee6 	bl	8004998 <HAL_Delay>
      status = VL53L8A1_RANGING_SENSOR_GetDistance(0, &Result);
 8007bcc:	e7dc      	b.n	8007b88 <MX_53L8A1_SimpleRanging_Process+0xe8>
 8007bce:	bf00      	nop
 8007bd0:	0800952c 	.word	0x0800952c
 8007bd4:	20002ef0 	.word	0x20002ef0
 8007bd8:	08009540 	.word	0x08009540
 8007bdc:	08009550 	.word	0x08009550
 8007be0:	08009568 	.word	0x08009568
 8007be4:	08009584 	.word	0x08009584
 8007be8:	08009598 	.word	0x08009598
 8007bec:	20002f00 	.word	0x20002f00
 8007bf0:	20003418 	.word	0x20003418
 8007bf4:	080095b4 	.word	0x080095b4
 8007bf8:	080095dc 	.word	0x080095dc
 8007bfc:	20002f14 	.word	0x20002f14

08007c00 <save_useful_data>:





void save_useful_data(RANGING_SENSOR_Result_t *Result) {
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
    for (int zone = 0; zone < Result->NumberOfZones; zone++) {
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	e08d      	b.n	8007d2a <save_useful_data+0x12a>
        for (int target = 0; target < RANGING_SENSOR_NB_TARGET_PER_ZONE; target++) {
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	e083      	b.n	8007d1c <save_useful_data+0x11c>
            if (target < Result->ZoneResult[zone].NumberOfTargets) {
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	3304      	adds	r3, #4
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	da4e      	bge.n	8007ccc <save_useful_data+0xcc>
                useful_data[zone][target].distance_mm = Result->ZoneResult[zone].Distance[target];
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	4618      	mov	r0, r3
 8007c44:	493f      	ldr	r1, [pc, #252]	@ (8007d44 <save_useful_data+0x144>)
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	440b      	add	r3, r1
 8007c50:	6018      	str	r0, [r3, #0]
                useful_data[zone][target].status = Result->ZoneResult[zone].Status[target];
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	4413      	add	r3, r2
 8007c60:	3302      	adds	r3, #2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	4936      	ldr	r1, [pc, #216]	@ (8007d44 <save_useful_data+0x144>)
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	440b      	add	r3, r1
 8007c76:	3304      	adds	r3, #4
 8007c78:	6018      	str	r0, [r3, #0]
                useful_data[zone][target].signal = Result->ZoneResult[zone].Signal[target];
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3304      	adds	r3, #4
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	482c      	ldr	r0, [pc, #176]	@ (8007d44 <save_useful_data+0x144>)
 8007c94:	68f9      	ldr	r1, [r7, #12]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	440b      	add	r3, r1
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	4403      	add	r3, r0
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	601a      	str	r2, [r3, #0]
                useful_data[zone][target].ambient = Result->ZoneResult[zone].Ambient[target];
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	4413      	add	r3, r2
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4822      	ldr	r0, [pc, #136]	@ (8007d44 <save_useful_data+0x144>)
 8007cbc:	68f9      	ldr	r1, [r7, #12]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	440b      	add	r3, r1
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	4403      	add	r3, r0
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	e024      	b.n	8007d16 <save_useful_data+0x116>
            } else {
                useful_data[zone][target].distance_mm = -1;
 8007ccc:	491d      	ldr	r1, [pc, #116]	@ (8007d44 <save_useful_data+0x144>)
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	440b      	add	r3, r1
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	601a      	str	r2, [r3, #0]
                useful_data[zone][target].status = -1;
 8007cde:	4919      	ldr	r1, [pc, #100]	@ (8007d44 <save_useful_data+0x144>)
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	440b      	add	r3, r1
 8007cea:	3304      	adds	r3, #4
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	601a      	str	r2, [r3, #0]
                useful_data[zone][target].signal = -1;
 8007cf2:	4914      	ldr	r1, [pc, #80]	@ (8007d44 <save_useful_data+0x144>)
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	440b      	add	r3, r1
 8007cfe:	330c      	adds	r3, #12
 8007d00:	4a11      	ldr	r2, [pc, #68]	@ (8007d48 <save_useful_data+0x148>)
 8007d02:	601a      	str	r2, [r3, #0]
                useful_data[zone][target].ambient = -1;
 8007d04:	490f      	ldr	r1, [pc, #60]	@ (8007d44 <save_useful_data+0x144>)
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	440b      	add	r3, r1
 8007d10:	3308      	adds	r3, #8
 8007d12:	4a0d      	ldr	r2, [pc, #52]	@ (8007d48 <save_useful_data+0x148>)
 8007d14:	601a      	str	r2, [r3, #0]
        for (int target = 0; target < RANGING_SENSOR_NB_TARGET_PER_ZONE; target++) {
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60bb      	str	r3, [r7, #8]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f43f af78 	beq.w	8007c14 <save_useful_data+0x14>
    for (int zone = 0; zone < Result->NumberOfZones; zone++) {
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	f63f af6c 	bhi.w	8007c0e <save_useful_data+0xe>
            }
        }
    }
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	20002af0 	.word	0x20002af0
 8007d48:	bf800000 	.word	0xbf800000

08007d4c <print_useful_data_txt>:
void print_useful_data_txt(uint32_t measurement_index) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
    uint8_t zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8007d54:	4b24      	ldr	r3, [pc, #144]	@ (8007de8 <print_useful_data_txt+0x9c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d003      	beq.n	8007d64 <print_useful_data_txt+0x18>
                              (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 8007d5c:	4b22      	ldr	r3, [pc, #136]	@ (8007de8 <print_useful_data_txt+0x9c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
    uint8_t zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d101      	bne.n	8007d68 <print_useful_data_txt+0x1c>
 8007d64:	2308      	movs	r3, #8
 8007d66:	e000      	b.n	8007d6a <print_useful_data_txt+0x1e>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	73fb      	strb	r3, [r7, #15]

    // Print measurement number
    printf("\nMeasurement %lu:\n", (long)measurement_index);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	481e      	ldr	r0, [pc, #120]	@ (8007dec <print_useful_data_txt+0xa0>)
 8007d72:	f000 f9c3 	bl	80080fc <iprintf>
     //printf("prev_time: %.2f \n", prev_time);



    // Print distance table
    for (int row = 0; row < zones_per_line; row++) {
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e02c      	b.n	8007dd6 <print_useful_data_txt+0x8a>
        for (int col = 0; col < zones_per_line; col++) {
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	613b      	str	r3, [r7, #16]
 8007d80:	e01f      	b.n	8007dc2 <print_useful_data_txt+0x76>
            int index = row * zones_per_line + col;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	fb02 f303 	mul.w	r3, r2, r3
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60bb      	str	r3, [r7, #8]
            if (useful_data[index][0].distance_mm != -1) {
 8007d90:	4a17      	ldr	r2, [pc, #92]	@ (8007df0 <print_useful_data_txt+0xa4>)
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	4413      	add	r3, r2
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d009      	beq.n	8007db4 <print_useful_data_txt+0x68>
                printf("%5ld ", (long)useful_data[index][0].distance_mm);
 8007da0:	4a13      	ldr	r2, [pc, #76]	@ (8007df0 <print_useful_data_txt+0xa4>)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	4413      	add	r3, r2
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4619      	mov	r1, r3
 8007dac:	4811      	ldr	r0, [pc, #68]	@ (8007df4 <print_useful_data_txt+0xa8>)
 8007dae:	f000 f9a5 	bl	80080fc <iprintf>
 8007db2:	e003      	b.n	8007dbc <print_useful_data_txt+0x70>
            } else {
                printf("%5s ", "X"); // Print "X" if no data
 8007db4:	4910      	ldr	r1, [pc, #64]	@ (8007df8 <print_useful_data_txt+0xac>)
 8007db6:	4811      	ldr	r0, [pc, #68]	@ (8007dfc <print_useful_data_txt+0xb0>)
 8007db8:	f000 f9a0 	bl	80080fc <iprintf>
        for (int col = 0; col < zones_per_line; col++) {
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	dbdb      	blt.n	8007d82 <print_useful_data_txt+0x36>
            }
        }
        printf("\n");  // New line after each row
 8007dca:	200a      	movs	r0, #10
 8007dcc:	f000 f9a8 	bl	8008120 <putchar>
    for (int row = 0; row < zones_per_line; row++) {
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	dbce      	blt.n	8007d7c <print_useful_data_txt+0x30>
    }
}
 8007dde:	bf00      	nop
 8007de0:	bf00      	nop
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20002f00 	.word	0x20002f00
 8007dec:	080096ec 	.word	0x080096ec
 8007df0:	20002af0 	.word	0x20002af0
 8007df4:	080096dc 	.word	0x080096dc
 8007df8:	080096b0 	.word	0x080096b0
 8007dfc:	080096e4 	.word	0x080096e4

08007e00 <toggle_resolution>:




static void toggle_resolution(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  VL53L8A1_RANGING_SENSOR_Stop(0);
 8007e04:	2000      	movs	r0, #0
 8007e06:	f7f9 fbfd 	bl	8001604 <VL53L8A1_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 8007e0a:	4b16      	ldr	r3, [pc, #88]	@ (8007e64 <toggle_resolution+0x64>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d81b      	bhi.n	8007e4c <toggle_resolution+0x4c>
 8007e14:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <toggle_resolution+0x1c>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e35 	.word	0x08007e35
 8007e20:	08007e2d 	.word	0x08007e2d
 8007e24:	08007e45 	.word	0x08007e45
 8007e28:	08007e3d 	.word	0x08007e3d
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <toggle_resolution+0x64>)
 8007e2e:	2204      	movs	r2, #4
 8007e30:	601a      	str	r2, [r3, #0]
      break;
 8007e32:	e00c      	b.n	8007e4e <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8007e34:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <toggle_resolution+0x64>)
 8007e36:	2203      	movs	r2, #3
 8007e38:	601a      	str	r2, [r3, #0]
      break;
 8007e3a:	e008      	b.n	8007e4e <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8007e3c:	4b09      	ldr	r3, [pc, #36]	@ (8007e64 <toggle_resolution+0x64>)
 8007e3e:	2202      	movs	r2, #2
 8007e40:	601a      	str	r2, [r3, #0]
      break;
 8007e42:	e004      	b.n	8007e4e <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8007e44:	4b07      	ldr	r3, [pc, #28]	@ (8007e64 <toggle_resolution+0x64>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
      break;
 8007e4a:	e000      	b.n	8007e4e <toggle_resolution+0x4e>

    default:
      break;
 8007e4c:	bf00      	nop
  }

  VL53L8A1_RANGING_SENSOR_ConfigProfile(0, &Profile);
 8007e4e:	4905      	ldr	r1, [pc, #20]	@ (8007e64 <toggle_resolution+0x64>)
 8007e50:	2000      	movs	r0, #0
 8007e52:	f7f9 fa27 	bl	80012a4 <VL53L8A1_RANGING_SENSOR_ConfigProfile>
  VL53L8A1_RANGING_SENSOR_Start(0, RS_MODE_BLOCKING_CONTINUOUS);
 8007e56:	2101      	movs	r1, #1
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f7f9 f9f1 	bl	8001240 <VL53L8A1_RANGING_SENSOR_Start>
}
 8007e5e:	bf00      	nop
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20002f00 	.word	0x20002f00

08007e68 <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  VL53L8A1_RANGING_SENSOR_Stop(0);
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f7f9 fbc9 	bl	8001604 <VL53L8A1_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 8007e72:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb0 <toggle_signal_and_ambient+0x48>)
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bf0c      	ite	eq
 8007e7a:	2301      	moveq	r3, #1
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <toggle_signal_and_ambient+0x48>)
 8007e84:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 8007e86:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb0 <toggle_signal_and_ambient+0x48>)
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bf0c      	ite	eq
 8007e8e:	2301      	moveq	r3, #1
 8007e90:	2300      	movne	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <toggle_signal_and_ambient+0x48>)
 8007e98:	611a      	str	r2, [r3, #16]

  VL53L8A1_RANGING_SENSOR_ConfigProfile(0, &Profile);
 8007e9a:	4905      	ldr	r1, [pc, #20]	@ (8007eb0 <toggle_signal_and_ambient+0x48>)
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	f7f9 fa01 	bl	80012a4 <VL53L8A1_RANGING_SENSOR_ConfigProfile>
  VL53L8A1_RANGING_SENSOR_Start(0, RS_MODE_BLOCKING_CONTINUOUS);
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f7f9 f9cb 	bl	8001240 <VL53L8A1_RANGING_SENSOR_Start>
}
 8007eaa:	bf00      	nop
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20002f00 	.word	0x20002f00

08007eb4 <clear_screen>:

static void clear_screen(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  printf("%c[2J", 27); /* 27 is ESC command */
 8007eb8:	211b      	movs	r1, #27
 8007eba:	4802      	ldr	r0, [pc, #8]	@ (8007ec4 <clear_screen+0x10>)
 8007ebc:	f000 f91e 	bl	80080fc <iprintf>
}
 8007ec0:	bf00      	nop
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	08009724 	.word	0x08009724

08007ec8 <handle_cmd>:
  printf(" 'c' : clear screen\n");
  printf("\n");
}

static void handle_cmd(uint8_t cmd)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
 8007ed4:	2b73      	cmp	r3, #115	@ 0x73
 8007ed6:	d00a      	beq.n	8007eee <handle_cmd+0x26>
 8007ed8:	2b73      	cmp	r3, #115	@ 0x73
 8007eda:	dc10      	bgt.n	8007efe <handle_cmd+0x36>
 8007edc:	2b63      	cmp	r3, #99	@ 0x63
 8007ede:	d00b      	beq.n	8007ef8 <handle_cmd+0x30>
 8007ee0:	2b72      	cmp	r3, #114	@ 0x72
 8007ee2:	d10c      	bne.n	8007efe <handle_cmd+0x36>
  {
    case 'r':
      toggle_resolution();
 8007ee4:	f7ff ff8c 	bl	8007e00 <toggle_resolution>
      clear_screen();
 8007ee8:	f7ff ffe4 	bl	8007eb4 <clear_screen>
      break;
 8007eec:	e008      	b.n	8007f00 <handle_cmd+0x38>

    case 's':
      toggle_signal_and_ambient();
 8007eee:	f7ff ffbb 	bl	8007e68 <toggle_signal_and_ambient>
      clear_screen();
 8007ef2:	f7ff ffdf 	bl	8007eb4 <clear_screen>
      break;
 8007ef6:	e003      	b.n	8007f00 <handle_cmd+0x38>

    case 'c':
      clear_screen();
 8007ef8:	f7ff ffdc 	bl	8007eb4 <clear_screen>
      break;
 8007efc:	e000      	b.n	8007f00 <handle_cmd+0x38>

    default:
      break;
 8007efe:	bf00      	nop
  }
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <get_key>:

static uint8_t get_key(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 8007f12:	1df9      	adds	r1, r7, #7
 8007f14:	f04f 33ff 	mov.w	r3, #4294967295
 8007f18:	2201      	movs	r2, #1
 8007f1a:	4804      	ldr	r0, [pc, #16]	@ (8007f2c <get_key+0x24>)
 8007f1c:	f7fe ff70 	bl	8006e00 <HAL_UART_Receive>

  return cmd;
 8007f20:	79fb      	ldrb	r3, [r7, #7]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20002a54 	.word	0x20002a54

08007f30 <com_has_data>:

static uint32_t com_has_data(void)
{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8007f34:	4b07      	ldr	r3, [pc, #28]	@ (8007f54 <com_has_data+0x24>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20002a54 	.word	0x20002a54

08007f58 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8007f62:	4b04      	ldr	r3, [pc, #16]	@ (8007f74 <BSP_PB_Callback+0x1c>)
 8007f64:	2201      	movs	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	2000341c 	.word	0x2000341c

08007f78 <std>:
 8007f78:	2300      	movs	r3, #0
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f86:	6083      	str	r3, [r0, #8]
 8007f88:	8181      	strh	r1, [r0, #12]
 8007f8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f8c:	81c2      	strh	r2, [r0, #14]
 8007f8e:	6183      	str	r3, [r0, #24]
 8007f90:	4619      	mov	r1, r3
 8007f92:	2208      	movs	r2, #8
 8007f94:	305c      	adds	r0, #92	@ 0x5c
 8007f96:	f000 fa01 	bl	800839c <memset>
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <std+0x58>)
 8007f9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <std+0x5c>)
 8007fa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd8 <std+0x60>)
 8007fa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fdc <std+0x64>)
 8007fa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007faa:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe0 <std+0x68>)
 8007fac:	6224      	str	r4, [r4, #32]
 8007fae:	429c      	cmp	r4, r3
 8007fb0:	d006      	beq.n	8007fc0 <std+0x48>
 8007fb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fb6:	4294      	cmp	r4, r2
 8007fb8:	d002      	beq.n	8007fc0 <std+0x48>
 8007fba:	33d0      	adds	r3, #208	@ 0xd0
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	d105      	bne.n	8007fcc <std+0x54>
 8007fc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fc8:	f000 ba60 	b.w	800848c <__retarget_lock_init_recursive>
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	bf00      	nop
 8007fd0:	080081ed 	.word	0x080081ed
 8007fd4:	0800820f 	.word	0x0800820f
 8007fd8:	08008247 	.word	0x08008247
 8007fdc:	0800826b 	.word	0x0800826b
 8007fe0:	20003420 	.word	0x20003420

08007fe4 <stdio_exit_handler>:
 8007fe4:	4a02      	ldr	r2, [pc, #8]	@ (8007ff0 <stdio_exit_handler+0xc>)
 8007fe6:	4903      	ldr	r1, [pc, #12]	@ (8007ff4 <stdio_exit_handler+0x10>)
 8007fe8:	4803      	ldr	r0, [pc, #12]	@ (8007ff8 <stdio_exit_handler+0x14>)
 8007fea:	f000 b869 	b.w	80080c0 <_fwalk_sglue>
 8007fee:	bf00      	nop
 8007ff0:	20000058 	.word	0x20000058
 8007ff4:	08008d49 	.word	0x08008d49
 8007ff8:	20000068 	.word	0x20000068

08007ffc <cleanup_stdio>:
 8007ffc:	6841      	ldr	r1, [r0, #4]
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8008030 <cleanup_stdio+0x34>)
 8008000:	4299      	cmp	r1, r3
 8008002:	b510      	push	{r4, lr}
 8008004:	4604      	mov	r4, r0
 8008006:	d001      	beq.n	800800c <cleanup_stdio+0x10>
 8008008:	f000 fe9e 	bl	8008d48 <_fflush_r>
 800800c:	68a1      	ldr	r1, [r4, #8]
 800800e:	4b09      	ldr	r3, [pc, #36]	@ (8008034 <cleanup_stdio+0x38>)
 8008010:	4299      	cmp	r1, r3
 8008012:	d002      	beq.n	800801a <cleanup_stdio+0x1e>
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fe97 	bl	8008d48 <_fflush_r>
 800801a:	68e1      	ldr	r1, [r4, #12]
 800801c:	4b06      	ldr	r3, [pc, #24]	@ (8008038 <cleanup_stdio+0x3c>)
 800801e:	4299      	cmp	r1, r3
 8008020:	d004      	beq.n	800802c <cleanup_stdio+0x30>
 8008022:	4620      	mov	r0, r4
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f000 be8e 	b.w	8008d48 <_fflush_r>
 800802c:	bd10      	pop	{r4, pc}
 800802e:	bf00      	nop
 8008030:	20003420 	.word	0x20003420
 8008034:	20003488 	.word	0x20003488
 8008038:	200034f0 	.word	0x200034f0

0800803c <global_stdio_init.part.0>:
 800803c:	b510      	push	{r4, lr}
 800803e:	4b0b      	ldr	r3, [pc, #44]	@ (800806c <global_stdio_init.part.0+0x30>)
 8008040:	4c0b      	ldr	r4, [pc, #44]	@ (8008070 <global_stdio_init.part.0+0x34>)
 8008042:	4a0c      	ldr	r2, [pc, #48]	@ (8008074 <global_stdio_init.part.0+0x38>)
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	4620      	mov	r0, r4
 8008048:	2200      	movs	r2, #0
 800804a:	2104      	movs	r1, #4
 800804c:	f7ff ff94 	bl	8007f78 <std>
 8008050:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008054:	2201      	movs	r2, #1
 8008056:	2109      	movs	r1, #9
 8008058:	f7ff ff8e 	bl	8007f78 <std>
 800805c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008060:	2202      	movs	r2, #2
 8008062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008066:	2112      	movs	r1, #18
 8008068:	f7ff bf86 	b.w	8007f78 <std>
 800806c:	20003558 	.word	0x20003558
 8008070:	20003420 	.word	0x20003420
 8008074:	08007fe5 	.word	0x08007fe5

08008078 <__sfp_lock_acquire>:
 8008078:	4801      	ldr	r0, [pc, #4]	@ (8008080 <__sfp_lock_acquire+0x8>)
 800807a:	f000 ba08 	b.w	800848e <__retarget_lock_acquire_recursive>
 800807e:	bf00      	nop
 8008080:	20003561 	.word	0x20003561

08008084 <__sfp_lock_release>:
 8008084:	4801      	ldr	r0, [pc, #4]	@ (800808c <__sfp_lock_release+0x8>)
 8008086:	f000 ba03 	b.w	8008490 <__retarget_lock_release_recursive>
 800808a:	bf00      	nop
 800808c:	20003561 	.word	0x20003561

08008090 <__sinit>:
 8008090:	b510      	push	{r4, lr}
 8008092:	4604      	mov	r4, r0
 8008094:	f7ff fff0 	bl	8008078 <__sfp_lock_acquire>
 8008098:	6a23      	ldr	r3, [r4, #32]
 800809a:	b11b      	cbz	r3, 80080a4 <__sinit+0x14>
 800809c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a0:	f7ff bff0 	b.w	8008084 <__sfp_lock_release>
 80080a4:	4b04      	ldr	r3, [pc, #16]	@ (80080b8 <__sinit+0x28>)
 80080a6:	6223      	str	r3, [r4, #32]
 80080a8:	4b04      	ldr	r3, [pc, #16]	@ (80080bc <__sinit+0x2c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f5      	bne.n	800809c <__sinit+0xc>
 80080b0:	f7ff ffc4 	bl	800803c <global_stdio_init.part.0>
 80080b4:	e7f2      	b.n	800809c <__sinit+0xc>
 80080b6:	bf00      	nop
 80080b8:	08007ffd 	.word	0x08007ffd
 80080bc:	20003558 	.word	0x20003558

080080c0 <_fwalk_sglue>:
 80080c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c4:	4607      	mov	r7, r0
 80080c6:	4688      	mov	r8, r1
 80080c8:	4614      	mov	r4, r2
 80080ca:	2600      	movs	r6, #0
 80080cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080d0:	f1b9 0901 	subs.w	r9, r9, #1
 80080d4:	d505      	bpl.n	80080e2 <_fwalk_sglue+0x22>
 80080d6:	6824      	ldr	r4, [r4, #0]
 80080d8:	2c00      	cmp	r4, #0
 80080da:	d1f7      	bne.n	80080cc <_fwalk_sglue+0xc>
 80080dc:	4630      	mov	r0, r6
 80080de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e2:	89ab      	ldrh	r3, [r5, #12]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d907      	bls.n	80080f8 <_fwalk_sglue+0x38>
 80080e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080ec:	3301      	adds	r3, #1
 80080ee:	d003      	beq.n	80080f8 <_fwalk_sglue+0x38>
 80080f0:	4629      	mov	r1, r5
 80080f2:	4638      	mov	r0, r7
 80080f4:	47c0      	blx	r8
 80080f6:	4306      	orrs	r6, r0
 80080f8:	3568      	adds	r5, #104	@ 0x68
 80080fa:	e7e9      	b.n	80080d0 <_fwalk_sglue+0x10>

080080fc <iprintf>:
 80080fc:	b40f      	push	{r0, r1, r2, r3}
 80080fe:	b507      	push	{r0, r1, r2, lr}
 8008100:	4906      	ldr	r1, [pc, #24]	@ (800811c <iprintf+0x20>)
 8008102:	ab04      	add	r3, sp, #16
 8008104:	6808      	ldr	r0, [r1, #0]
 8008106:	f853 2b04 	ldr.w	r2, [r3], #4
 800810a:	6881      	ldr	r1, [r0, #8]
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	f000 faf1 	bl	80086f4 <_vfiprintf_r>
 8008112:	b003      	add	sp, #12
 8008114:	f85d eb04 	ldr.w	lr, [sp], #4
 8008118:	b004      	add	sp, #16
 800811a:	4770      	bx	lr
 800811c:	20000064 	.word	0x20000064

08008120 <putchar>:
 8008120:	4b02      	ldr	r3, [pc, #8]	@ (800812c <putchar+0xc>)
 8008122:	4601      	mov	r1, r0
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	6882      	ldr	r2, [r0, #8]
 8008128:	f000 be98 	b.w	8008e5c <_putc_r>
 800812c:	20000064 	.word	0x20000064

08008130 <_puts_r>:
 8008130:	6a03      	ldr	r3, [r0, #32]
 8008132:	b570      	push	{r4, r5, r6, lr}
 8008134:	6884      	ldr	r4, [r0, #8]
 8008136:	4605      	mov	r5, r0
 8008138:	460e      	mov	r6, r1
 800813a:	b90b      	cbnz	r3, 8008140 <_puts_r+0x10>
 800813c:	f7ff ffa8 	bl	8008090 <__sinit>
 8008140:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008142:	07db      	lsls	r3, r3, #31
 8008144:	d405      	bmi.n	8008152 <_puts_r+0x22>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	0598      	lsls	r0, r3, #22
 800814a:	d402      	bmi.n	8008152 <_puts_r+0x22>
 800814c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800814e:	f000 f99e 	bl	800848e <__retarget_lock_acquire_recursive>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	0719      	lsls	r1, r3, #28
 8008156:	d502      	bpl.n	800815e <_puts_r+0x2e>
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d135      	bne.n	80081ca <_puts_r+0x9a>
 800815e:	4621      	mov	r1, r4
 8008160:	4628      	mov	r0, r5
 8008162:	f000 f8c5 	bl	80082f0 <__swsetup_r>
 8008166:	b380      	cbz	r0, 80081ca <_puts_r+0x9a>
 8008168:	f04f 35ff 	mov.w	r5, #4294967295
 800816c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800816e:	07da      	lsls	r2, r3, #31
 8008170:	d405      	bmi.n	800817e <_puts_r+0x4e>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	059b      	lsls	r3, r3, #22
 8008176:	d402      	bmi.n	800817e <_puts_r+0x4e>
 8008178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800817a:	f000 f989 	bl	8008490 <__retarget_lock_release_recursive>
 800817e:	4628      	mov	r0, r5
 8008180:	bd70      	pop	{r4, r5, r6, pc}
 8008182:	2b00      	cmp	r3, #0
 8008184:	da04      	bge.n	8008190 <_puts_r+0x60>
 8008186:	69a2      	ldr	r2, [r4, #24]
 8008188:	429a      	cmp	r2, r3
 800818a:	dc17      	bgt.n	80081bc <_puts_r+0x8c>
 800818c:	290a      	cmp	r1, #10
 800818e:	d015      	beq.n	80081bc <_puts_r+0x8c>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	6022      	str	r2, [r4, #0]
 8008196:	7019      	strb	r1, [r3, #0]
 8008198:	68a3      	ldr	r3, [r4, #8]
 800819a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800819e:	3b01      	subs	r3, #1
 80081a0:	60a3      	str	r3, [r4, #8]
 80081a2:	2900      	cmp	r1, #0
 80081a4:	d1ed      	bne.n	8008182 <_puts_r+0x52>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da11      	bge.n	80081ce <_puts_r+0x9e>
 80081aa:	4622      	mov	r2, r4
 80081ac:	210a      	movs	r1, #10
 80081ae:	4628      	mov	r0, r5
 80081b0:	f000 f85f 	bl	8008272 <__swbuf_r>
 80081b4:	3001      	adds	r0, #1
 80081b6:	d0d7      	beq.n	8008168 <_puts_r+0x38>
 80081b8:	250a      	movs	r5, #10
 80081ba:	e7d7      	b.n	800816c <_puts_r+0x3c>
 80081bc:	4622      	mov	r2, r4
 80081be:	4628      	mov	r0, r5
 80081c0:	f000 f857 	bl	8008272 <__swbuf_r>
 80081c4:	3001      	adds	r0, #1
 80081c6:	d1e7      	bne.n	8008198 <_puts_r+0x68>
 80081c8:	e7ce      	b.n	8008168 <_puts_r+0x38>
 80081ca:	3e01      	subs	r6, #1
 80081cc:	e7e4      	b.n	8008198 <_puts_r+0x68>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	6022      	str	r2, [r4, #0]
 80081d4:	220a      	movs	r2, #10
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	e7ee      	b.n	80081b8 <_puts_r+0x88>
	...

080081dc <puts>:
 80081dc:	4b02      	ldr	r3, [pc, #8]	@ (80081e8 <puts+0xc>)
 80081de:	4601      	mov	r1, r0
 80081e0:	6818      	ldr	r0, [r3, #0]
 80081e2:	f7ff bfa5 	b.w	8008130 <_puts_r>
 80081e6:	bf00      	nop
 80081e8:	20000064 	.word	0x20000064

080081ec <__sread>:
 80081ec:	b510      	push	{r4, lr}
 80081ee:	460c      	mov	r4, r1
 80081f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f4:	f000 f8fc 	bl	80083f0 <_read_r>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	bfab      	itete	ge
 80081fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008200:	181b      	addge	r3, r3, r0
 8008202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008206:	bfac      	ite	ge
 8008208:	6563      	strge	r3, [r4, #84]	@ 0x54
 800820a:	81a3      	strhlt	r3, [r4, #12]
 800820c:	bd10      	pop	{r4, pc}

0800820e <__swrite>:
 800820e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008212:	461f      	mov	r7, r3
 8008214:	898b      	ldrh	r3, [r1, #12]
 8008216:	05db      	lsls	r3, r3, #23
 8008218:	4605      	mov	r5, r0
 800821a:	460c      	mov	r4, r1
 800821c:	4616      	mov	r6, r2
 800821e:	d505      	bpl.n	800822c <__swrite+0x1e>
 8008220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008224:	2302      	movs	r3, #2
 8008226:	2200      	movs	r2, #0
 8008228:	f000 f8d0 	bl	80083cc <_lseek_r>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008232:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	4632      	mov	r2, r6
 800823a:	463b      	mov	r3, r7
 800823c:	4628      	mov	r0, r5
 800823e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008242:	f000 b8e7 	b.w	8008414 <_write_r>

08008246 <__sseek>:
 8008246:	b510      	push	{r4, lr}
 8008248:	460c      	mov	r4, r1
 800824a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824e:	f000 f8bd 	bl	80083cc <_lseek_r>
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	bf15      	itete	ne
 8008258:	6560      	strne	r0, [r4, #84]	@ 0x54
 800825a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800825e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008262:	81a3      	strheq	r3, [r4, #12]
 8008264:	bf18      	it	ne
 8008266:	81a3      	strhne	r3, [r4, #12]
 8008268:	bd10      	pop	{r4, pc}

0800826a <__sclose>:
 800826a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826e:	f000 b89d 	b.w	80083ac <_close_r>

08008272 <__swbuf_r>:
 8008272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008274:	460e      	mov	r6, r1
 8008276:	4614      	mov	r4, r2
 8008278:	4605      	mov	r5, r0
 800827a:	b118      	cbz	r0, 8008284 <__swbuf_r+0x12>
 800827c:	6a03      	ldr	r3, [r0, #32]
 800827e:	b90b      	cbnz	r3, 8008284 <__swbuf_r+0x12>
 8008280:	f7ff ff06 	bl	8008090 <__sinit>
 8008284:	69a3      	ldr	r3, [r4, #24]
 8008286:	60a3      	str	r3, [r4, #8]
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	071a      	lsls	r2, r3, #28
 800828c:	d501      	bpl.n	8008292 <__swbuf_r+0x20>
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	b943      	cbnz	r3, 80082a4 <__swbuf_r+0x32>
 8008292:	4621      	mov	r1, r4
 8008294:	4628      	mov	r0, r5
 8008296:	f000 f82b 	bl	80082f0 <__swsetup_r>
 800829a:	b118      	cbz	r0, 80082a4 <__swbuf_r+0x32>
 800829c:	f04f 37ff 	mov.w	r7, #4294967295
 80082a0:	4638      	mov	r0, r7
 80082a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	6922      	ldr	r2, [r4, #16]
 80082a8:	1a98      	subs	r0, r3, r2
 80082aa:	6963      	ldr	r3, [r4, #20]
 80082ac:	b2f6      	uxtb	r6, r6
 80082ae:	4283      	cmp	r3, r0
 80082b0:	4637      	mov	r7, r6
 80082b2:	dc05      	bgt.n	80082c0 <__swbuf_r+0x4e>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 fd46 	bl	8008d48 <_fflush_r>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d1ed      	bne.n	800829c <__swbuf_r+0x2a>
 80082c0:	68a3      	ldr	r3, [r4, #8]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	6022      	str	r2, [r4, #0]
 80082cc:	701e      	strb	r6, [r3, #0]
 80082ce:	6962      	ldr	r2, [r4, #20]
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d004      	beq.n	80082e0 <__swbuf_r+0x6e>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	07db      	lsls	r3, r3, #31
 80082da:	d5e1      	bpl.n	80082a0 <__swbuf_r+0x2e>
 80082dc:	2e0a      	cmp	r6, #10
 80082de:	d1df      	bne.n	80082a0 <__swbuf_r+0x2e>
 80082e0:	4621      	mov	r1, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 fd30 	bl	8008d48 <_fflush_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d0d9      	beq.n	80082a0 <__swbuf_r+0x2e>
 80082ec:	e7d6      	b.n	800829c <__swbuf_r+0x2a>
	...

080082f0 <__swsetup_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4b29      	ldr	r3, [pc, #164]	@ (8008398 <__swsetup_r+0xa8>)
 80082f4:	4605      	mov	r5, r0
 80082f6:	6818      	ldr	r0, [r3, #0]
 80082f8:	460c      	mov	r4, r1
 80082fa:	b118      	cbz	r0, 8008304 <__swsetup_r+0x14>
 80082fc:	6a03      	ldr	r3, [r0, #32]
 80082fe:	b90b      	cbnz	r3, 8008304 <__swsetup_r+0x14>
 8008300:	f7ff fec6 	bl	8008090 <__sinit>
 8008304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008308:	0719      	lsls	r1, r3, #28
 800830a:	d422      	bmi.n	8008352 <__swsetup_r+0x62>
 800830c:	06da      	lsls	r2, r3, #27
 800830e:	d407      	bmi.n	8008320 <__swsetup_r+0x30>
 8008310:	2209      	movs	r2, #9
 8008312:	602a      	str	r2, [r5, #0]
 8008314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	e033      	b.n	8008388 <__swsetup_r+0x98>
 8008320:	0758      	lsls	r0, r3, #29
 8008322:	d512      	bpl.n	800834a <__swsetup_r+0x5a>
 8008324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008326:	b141      	cbz	r1, 800833a <__swsetup_r+0x4a>
 8008328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800832c:	4299      	cmp	r1, r3
 800832e:	d002      	beq.n	8008336 <__swsetup_r+0x46>
 8008330:	4628      	mov	r0, r5
 8008332:	f000 f8bd 	bl	80084b0 <_free_r>
 8008336:	2300      	movs	r3, #0
 8008338:	6363      	str	r3, [r4, #52]	@ 0x34
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	2300      	movs	r3, #0
 8008344:	6063      	str	r3, [r4, #4]
 8008346:	6923      	ldr	r3, [r4, #16]
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f043 0308 	orr.w	r3, r3, #8
 8008350:	81a3      	strh	r3, [r4, #12]
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	b94b      	cbnz	r3, 800836a <__swsetup_r+0x7a>
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800835c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008360:	d003      	beq.n	800836a <__swsetup_r+0x7a>
 8008362:	4621      	mov	r1, r4
 8008364:	4628      	mov	r0, r5
 8008366:	f000 fd3d 	bl	8008de4 <__smakebuf_r>
 800836a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836e:	f013 0201 	ands.w	r2, r3, #1
 8008372:	d00a      	beq.n	800838a <__swsetup_r+0x9a>
 8008374:	2200      	movs	r2, #0
 8008376:	60a2      	str	r2, [r4, #8]
 8008378:	6962      	ldr	r2, [r4, #20]
 800837a:	4252      	negs	r2, r2
 800837c:	61a2      	str	r2, [r4, #24]
 800837e:	6922      	ldr	r2, [r4, #16]
 8008380:	b942      	cbnz	r2, 8008394 <__swsetup_r+0xa4>
 8008382:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008386:	d1c5      	bne.n	8008314 <__swsetup_r+0x24>
 8008388:	bd38      	pop	{r3, r4, r5, pc}
 800838a:	0799      	lsls	r1, r3, #30
 800838c:	bf58      	it	pl
 800838e:	6962      	ldrpl	r2, [r4, #20]
 8008390:	60a2      	str	r2, [r4, #8]
 8008392:	e7f4      	b.n	800837e <__swsetup_r+0x8e>
 8008394:	2000      	movs	r0, #0
 8008396:	e7f7      	b.n	8008388 <__swsetup_r+0x98>
 8008398:	20000064 	.word	0x20000064

0800839c <memset>:
 800839c:	4402      	add	r2, r0
 800839e:	4603      	mov	r3, r0
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d100      	bne.n	80083a6 <memset+0xa>
 80083a4:	4770      	bx	lr
 80083a6:	f803 1b01 	strb.w	r1, [r3], #1
 80083aa:	e7f9      	b.n	80083a0 <memset+0x4>

080083ac <_close_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4d06      	ldr	r5, [pc, #24]	@ (80083c8 <_close_r+0x1c>)
 80083b0:	2300      	movs	r3, #0
 80083b2:	4604      	mov	r4, r0
 80083b4:	4608      	mov	r0, r1
 80083b6:	602b      	str	r3, [r5, #0]
 80083b8:	f7f8 fe69 	bl	800108e <_close>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d102      	bne.n	80083c6 <_close_r+0x1a>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	b103      	cbz	r3, 80083c6 <_close_r+0x1a>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	2000355c 	.word	0x2000355c

080083cc <_lseek_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d07      	ldr	r5, [pc, #28]	@ (80083ec <_lseek_r+0x20>)
 80083d0:	4604      	mov	r4, r0
 80083d2:	4608      	mov	r0, r1
 80083d4:	4611      	mov	r1, r2
 80083d6:	2200      	movs	r2, #0
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7f8 fe7e 	bl	80010dc <_lseek>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_lseek_r+0x1e>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_lseek_r+0x1e>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	2000355c 	.word	0x2000355c

080083f0 <_read_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	@ (8008410 <_read_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7f8 fe0c 	bl	800101c <_read>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_read_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_read_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	2000355c 	.word	0x2000355c

08008414 <_write_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d07      	ldr	r5, [pc, #28]	@ (8008434 <_write_r+0x20>)
 8008418:	4604      	mov	r4, r0
 800841a:	4608      	mov	r0, r1
 800841c:	4611      	mov	r1, r2
 800841e:	2200      	movs	r2, #0
 8008420:	602a      	str	r2, [r5, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f7f8 fe17 	bl	8001056 <_write>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_write_r+0x1e>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_write_r+0x1e>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	2000355c 	.word	0x2000355c

08008438 <__errno>:
 8008438:	4b01      	ldr	r3, [pc, #4]	@ (8008440 <__errno+0x8>)
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000064 	.word	0x20000064

08008444 <__libc_init_array>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	4d0d      	ldr	r5, [pc, #52]	@ (800847c <__libc_init_array+0x38>)
 8008448:	4c0d      	ldr	r4, [pc, #52]	@ (8008480 <__libc_init_array+0x3c>)
 800844a:	1b64      	subs	r4, r4, r5
 800844c:	10a4      	asrs	r4, r4, #2
 800844e:	2600      	movs	r6, #0
 8008450:	42a6      	cmp	r6, r4
 8008452:	d109      	bne.n	8008468 <__libc_init_array+0x24>
 8008454:	4d0b      	ldr	r5, [pc, #44]	@ (8008484 <__libc_init_array+0x40>)
 8008456:	4c0c      	ldr	r4, [pc, #48]	@ (8008488 <__libc_init_array+0x44>)
 8008458:	f000 fd66 	bl	8008f28 <_init>
 800845c:	1b64      	subs	r4, r4, r5
 800845e:	10a4      	asrs	r4, r4, #2
 8008460:	2600      	movs	r6, #0
 8008462:	42a6      	cmp	r6, r4
 8008464:	d105      	bne.n	8008472 <__libc_init_array+0x2e>
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	f855 3b04 	ldr.w	r3, [r5], #4
 800846c:	4798      	blx	r3
 800846e:	3601      	adds	r6, #1
 8008470:	e7ee      	b.n	8008450 <__libc_init_array+0xc>
 8008472:	f855 3b04 	ldr.w	r3, [r5], #4
 8008476:	4798      	blx	r3
 8008478:	3601      	adds	r6, #1
 800847a:	e7f2      	b.n	8008462 <__libc_init_array+0x1e>
 800847c:	0801ef4c 	.word	0x0801ef4c
 8008480:	0801ef4c 	.word	0x0801ef4c
 8008484:	0801ef4c 	.word	0x0801ef4c
 8008488:	0801ef50 	.word	0x0801ef50

0800848c <__retarget_lock_init_recursive>:
 800848c:	4770      	bx	lr

0800848e <__retarget_lock_acquire_recursive>:
 800848e:	4770      	bx	lr

08008490 <__retarget_lock_release_recursive>:
 8008490:	4770      	bx	lr

08008492 <memcpy>:
 8008492:	440a      	add	r2, r1
 8008494:	4291      	cmp	r1, r2
 8008496:	f100 33ff 	add.w	r3, r0, #4294967295
 800849a:	d100      	bne.n	800849e <memcpy+0xc>
 800849c:	4770      	bx	lr
 800849e:	b510      	push	{r4, lr}
 80084a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a8:	4291      	cmp	r1, r2
 80084aa:	d1f9      	bne.n	80084a0 <memcpy+0xe>
 80084ac:	bd10      	pop	{r4, pc}
	...

080084b0 <_free_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4605      	mov	r5, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d041      	beq.n	800853c <_free_r+0x8c>
 80084b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084bc:	1f0c      	subs	r4, r1, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bfb8      	it	lt
 80084c2:	18e4      	addlt	r4, r4, r3
 80084c4:	f000 f8e0 	bl	8008688 <__malloc_lock>
 80084c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008540 <_free_r+0x90>)
 80084ca:	6813      	ldr	r3, [r2, #0]
 80084cc:	b933      	cbnz	r3, 80084dc <_free_r+0x2c>
 80084ce:	6063      	str	r3, [r4, #4]
 80084d0:	6014      	str	r4, [r2, #0]
 80084d2:	4628      	mov	r0, r5
 80084d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d8:	f000 b8dc 	b.w	8008694 <__malloc_unlock>
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d908      	bls.n	80084f2 <_free_r+0x42>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	1821      	adds	r1, r4, r0
 80084e4:	428b      	cmp	r3, r1
 80084e6:	bf01      	itttt	eq
 80084e8:	6819      	ldreq	r1, [r3, #0]
 80084ea:	685b      	ldreq	r3, [r3, #4]
 80084ec:	1809      	addeq	r1, r1, r0
 80084ee:	6021      	streq	r1, [r4, #0]
 80084f0:	e7ed      	b.n	80084ce <_free_r+0x1e>
 80084f2:	461a      	mov	r2, r3
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	b10b      	cbz	r3, 80084fc <_free_r+0x4c>
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	d9fa      	bls.n	80084f2 <_free_r+0x42>
 80084fc:	6811      	ldr	r1, [r2, #0]
 80084fe:	1850      	adds	r0, r2, r1
 8008500:	42a0      	cmp	r0, r4
 8008502:	d10b      	bne.n	800851c <_free_r+0x6c>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	4401      	add	r1, r0
 8008508:	1850      	adds	r0, r2, r1
 800850a:	4283      	cmp	r3, r0
 800850c:	6011      	str	r1, [r2, #0]
 800850e:	d1e0      	bne.n	80084d2 <_free_r+0x22>
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	6053      	str	r3, [r2, #4]
 8008516:	4408      	add	r0, r1
 8008518:	6010      	str	r0, [r2, #0]
 800851a:	e7da      	b.n	80084d2 <_free_r+0x22>
 800851c:	d902      	bls.n	8008524 <_free_r+0x74>
 800851e:	230c      	movs	r3, #12
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	e7d6      	b.n	80084d2 <_free_r+0x22>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	1821      	adds	r1, r4, r0
 8008528:	428b      	cmp	r3, r1
 800852a:	bf04      	itt	eq
 800852c:	6819      	ldreq	r1, [r3, #0]
 800852e:	685b      	ldreq	r3, [r3, #4]
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	bf04      	itt	eq
 8008534:	1809      	addeq	r1, r1, r0
 8008536:	6021      	streq	r1, [r4, #0]
 8008538:	6054      	str	r4, [r2, #4]
 800853a:	e7ca      	b.n	80084d2 <_free_r+0x22>
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	20003568 	.word	0x20003568

08008544 <sbrk_aligned>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	4e0f      	ldr	r6, [pc, #60]	@ (8008584 <sbrk_aligned+0x40>)
 8008548:	460c      	mov	r4, r1
 800854a:	6831      	ldr	r1, [r6, #0]
 800854c:	4605      	mov	r5, r0
 800854e:	b911      	cbnz	r1, 8008556 <sbrk_aligned+0x12>
 8008550:	f000 fcda 	bl	8008f08 <_sbrk_r>
 8008554:	6030      	str	r0, [r6, #0]
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f000 fcd5 	bl	8008f08 <_sbrk_r>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	d103      	bne.n	800856a <sbrk_aligned+0x26>
 8008562:	f04f 34ff 	mov.w	r4, #4294967295
 8008566:	4620      	mov	r0, r4
 8008568:	bd70      	pop	{r4, r5, r6, pc}
 800856a:	1cc4      	adds	r4, r0, #3
 800856c:	f024 0403 	bic.w	r4, r4, #3
 8008570:	42a0      	cmp	r0, r4
 8008572:	d0f8      	beq.n	8008566 <sbrk_aligned+0x22>
 8008574:	1a21      	subs	r1, r4, r0
 8008576:	4628      	mov	r0, r5
 8008578:	f000 fcc6 	bl	8008f08 <_sbrk_r>
 800857c:	3001      	adds	r0, #1
 800857e:	d1f2      	bne.n	8008566 <sbrk_aligned+0x22>
 8008580:	e7ef      	b.n	8008562 <sbrk_aligned+0x1e>
 8008582:	bf00      	nop
 8008584:	20003564 	.word	0x20003564

08008588 <_malloc_r>:
 8008588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800858c:	1ccd      	adds	r5, r1, #3
 800858e:	f025 0503 	bic.w	r5, r5, #3
 8008592:	3508      	adds	r5, #8
 8008594:	2d0c      	cmp	r5, #12
 8008596:	bf38      	it	cc
 8008598:	250c      	movcc	r5, #12
 800859a:	2d00      	cmp	r5, #0
 800859c:	4606      	mov	r6, r0
 800859e:	db01      	blt.n	80085a4 <_malloc_r+0x1c>
 80085a0:	42a9      	cmp	r1, r5
 80085a2:	d904      	bls.n	80085ae <_malloc_r+0x26>
 80085a4:	230c      	movs	r3, #12
 80085a6:	6033      	str	r3, [r6, #0]
 80085a8:	2000      	movs	r0, #0
 80085aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008684 <_malloc_r+0xfc>
 80085b2:	f000 f869 	bl	8008688 <__malloc_lock>
 80085b6:	f8d8 3000 	ldr.w	r3, [r8]
 80085ba:	461c      	mov	r4, r3
 80085bc:	bb44      	cbnz	r4, 8008610 <_malloc_r+0x88>
 80085be:	4629      	mov	r1, r5
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff ffbf 	bl	8008544 <sbrk_aligned>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	4604      	mov	r4, r0
 80085ca:	d158      	bne.n	800867e <_malloc_r+0xf6>
 80085cc:	f8d8 4000 	ldr.w	r4, [r8]
 80085d0:	4627      	mov	r7, r4
 80085d2:	2f00      	cmp	r7, #0
 80085d4:	d143      	bne.n	800865e <_malloc_r+0xd6>
 80085d6:	2c00      	cmp	r4, #0
 80085d8:	d04b      	beq.n	8008672 <_malloc_r+0xea>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	4639      	mov	r1, r7
 80085de:	4630      	mov	r0, r6
 80085e0:	eb04 0903 	add.w	r9, r4, r3
 80085e4:	f000 fc90 	bl	8008f08 <_sbrk_r>
 80085e8:	4581      	cmp	r9, r0
 80085ea:	d142      	bne.n	8008672 <_malloc_r+0xea>
 80085ec:	6821      	ldr	r1, [r4, #0]
 80085ee:	1a6d      	subs	r5, r5, r1
 80085f0:	4629      	mov	r1, r5
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7ff ffa6 	bl	8008544 <sbrk_aligned>
 80085f8:	3001      	adds	r0, #1
 80085fa:	d03a      	beq.n	8008672 <_malloc_r+0xea>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	442b      	add	r3, r5
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	f8d8 3000 	ldr.w	r3, [r8]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	bb62      	cbnz	r2, 8008664 <_malloc_r+0xdc>
 800860a:	f8c8 7000 	str.w	r7, [r8]
 800860e:	e00f      	b.n	8008630 <_malloc_r+0xa8>
 8008610:	6822      	ldr	r2, [r4, #0]
 8008612:	1b52      	subs	r2, r2, r5
 8008614:	d420      	bmi.n	8008658 <_malloc_r+0xd0>
 8008616:	2a0b      	cmp	r2, #11
 8008618:	d917      	bls.n	800864a <_malloc_r+0xc2>
 800861a:	1961      	adds	r1, r4, r5
 800861c:	42a3      	cmp	r3, r4
 800861e:	6025      	str	r5, [r4, #0]
 8008620:	bf18      	it	ne
 8008622:	6059      	strne	r1, [r3, #4]
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	bf08      	it	eq
 8008628:	f8c8 1000 	streq.w	r1, [r8]
 800862c:	5162      	str	r2, [r4, r5]
 800862e:	604b      	str	r3, [r1, #4]
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f82f 	bl	8008694 <__malloc_unlock>
 8008636:	f104 000b 	add.w	r0, r4, #11
 800863a:	1d23      	adds	r3, r4, #4
 800863c:	f020 0007 	bic.w	r0, r0, #7
 8008640:	1ac2      	subs	r2, r0, r3
 8008642:	bf1c      	itt	ne
 8008644:	1a1b      	subne	r3, r3, r0
 8008646:	50a3      	strne	r3, [r4, r2]
 8008648:	e7af      	b.n	80085aa <_malloc_r+0x22>
 800864a:	6862      	ldr	r2, [r4, #4]
 800864c:	42a3      	cmp	r3, r4
 800864e:	bf0c      	ite	eq
 8008650:	f8c8 2000 	streq.w	r2, [r8]
 8008654:	605a      	strne	r2, [r3, #4]
 8008656:	e7eb      	b.n	8008630 <_malloc_r+0xa8>
 8008658:	4623      	mov	r3, r4
 800865a:	6864      	ldr	r4, [r4, #4]
 800865c:	e7ae      	b.n	80085bc <_malloc_r+0x34>
 800865e:	463c      	mov	r4, r7
 8008660:	687f      	ldr	r7, [r7, #4]
 8008662:	e7b6      	b.n	80085d2 <_malloc_r+0x4a>
 8008664:	461a      	mov	r2, r3
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	42a3      	cmp	r3, r4
 800866a:	d1fb      	bne.n	8008664 <_malloc_r+0xdc>
 800866c:	2300      	movs	r3, #0
 800866e:	6053      	str	r3, [r2, #4]
 8008670:	e7de      	b.n	8008630 <_malloc_r+0xa8>
 8008672:	230c      	movs	r3, #12
 8008674:	6033      	str	r3, [r6, #0]
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f80c 	bl	8008694 <__malloc_unlock>
 800867c:	e794      	b.n	80085a8 <_malloc_r+0x20>
 800867e:	6005      	str	r5, [r0, #0]
 8008680:	e7d6      	b.n	8008630 <_malloc_r+0xa8>
 8008682:	bf00      	nop
 8008684:	20003568 	.word	0x20003568

08008688 <__malloc_lock>:
 8008688:	4801      	ldr	r0, [pc, #4]	@ (8008690 <__malloc_lock+0x8>)
 800868a:	f7ff bf00 	b.w	800848e <__retarget_lock_acquire_recursive>
 800868e:	bf00      	nop
 8008690:	20003560 	.word	0x20003560

08008694 <__malloc_unlock>:
 8008694:	4801      	ldr	r0, [pc, #4]	@ (800869c <__malloc_unlock+0x8>)
 8008696:	f7ff befb 	b.w	8008490 <__retarget_lock_release_recursive>
 800869a:	bf00      	nop
 800869c:	20003560 	.word	0x20003560

080086a0 <__sfputc_r>:
 80086a0:	6893      	ldr	r3, [r2, #8]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	b410      	push	{r4}
 80086a8:	6093      	str	r3, [r2, #8]
 80086aa:	da08      	bge.n	80086be <__sfputc_r+0x1e>
 80086ac:	6994      	ldr	r4, [r2, #24]
 80086ae:	42a3      	cmp	r3, r4
 80086b0:	db01      	blt.n	80086b6 <__sfputc_r+0x16>
 80086b2:	290a      	cmp	r1, #10
 80086b4:	d103      	bne.n	80086be <__sfputc_r+0x1e>
 80086b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ba:	f7ff bdda 	b.w	8008272 <__swbuf_r>
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	1c58      	adds	r0, r3, #1
 80086c2:	6010      	str	r0, [r2, #0]
 80086c4:	7019      	strb	r1, [r3, #0]
 80086c6:	4608      	mov	r0, r1
 80086c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <__sfputs_r>:
 80086ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d0:	4606      	mov	r6, r0
 80086d2:	460f      	mov	r7, r1
 80086d4:	4614      	mov	r4, r2
 80086d6:	18d5      	adds	r5, r2, r3
 80086d8:	42ac      	cmp	r4, r5
 80086da:	d101      	bne.n	80086e0 <__sfputs_r+0x12>
 80086dc:	2000      	movs	r0, #0
 80086de:	e007      	b.n	80086f0 <__sfputs_r+0x22>
 80086e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e4:	463a      	mov	r2, r7
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7ff ffda 	bl	80086a0 <__sfputc_r>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d1f3      	bne.n	80086d8 <__sfputs_r+0xa>
 80086f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086f4 <_vfiprintf_r>:
 80086f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	460d      	mov	r5, r1
 80086fa:	b09d      	sub	sp, #116	@ 0x74
 80086fc:	4614      	mov	r4, r2
 80086fe:	4698      	mov	r8, r3
 8008700:	4606      	mov	r6, r0
 8008702:	b118      	cbz	r0, 800870c <_vfiprintf_r+0x18>
 8008704:	6a03      	ldr	r3, [r0, #32]
 8008706:	b90b      	cbnz	r3, 800870c <_vfiprintf_r+0x18>
 8008708:	f7ff fcc2 	bl	8008090 <__sinit>
 800870c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800870e:	07d9      	lsls	r1, r3, #31
 8008710:	d405      	bmi.n	800871e <_vfiprintf_r+0x2a>
 8008712:	89ab      	ldrh	r3, [r5, #12]
 8008714:	059a      	lsls	r2, r3, #22
 8008716:	d402      	bmi.n	800871e <_vfiprintf_r+0x2a>
 8008718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800871a:	f7ff feb8 	bl	800848e <__retarget_lock_acquire_recursive>
 800871e:	89ab      	ldrh	r3, [r5, #12]
 8008720:	071b      	lsls	r3, r3, #28
 8008722:	d501      	bpl.n	8008728 <_vfiprintf_r+0x34>
 8008724:	692b      	ldr	r3, [r5, #16]
 8008726:	b99b      	cbnz	r3, 8008750 <_vfiprintf_r+0x5c>
 8008728:	4629      	mov	r1, r5
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff fde0 	bl	80082f0 <__swsetup_r>
 8008730:	b170      	cbz	r0, 8008750 <_vfiprintf_r+0x5c>
 8008732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008734:	07dc      	lsls	r4, r3, #31
 8008736:	d504      	bpl.n	8008742 <_vfiprintf_r+0x4e>
 8008738:	f04f 30ff 	mov.w	r0, #4294967295
 800873c:	b01d      	add	sp, #116	@ 0x74
 800873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	0598      	lsls	r0, r3, #22
 8008746:	d4f7      	bmi.n	8008738 <_vfiprintf_r+0x44>
 8008748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800874a:	f7ff fea1 	bl	8008490 <__retarget_lock_release_recursive>
 800874e:	e7f3      	b.n	8008738 <_vfiprintf_r+0x44>
 8008750:	2300      	movs	r3, #0
 8008752:	9309      	str	r3, [sp, #36]	@ 0x24
 8008754:	2320      	movs	r3, #32
 8008756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800875a:	f8cd 800c 	str.w	r8, [sp, #12]
 800875e:	2330      	movs	r3, #48	@ 0x30
 8008760:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008910 <_vfiprintf_r+0x21c>
 8008764:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008768:	f04f 0901 	mov.w	r9, #1
 800876c:	4623      	mov	r3, r4
 800876e:	469a      	mov	sl, r3
 8008770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008774:	b10a      	cbz	r2, 800877a <_vfiprintf_r+0x86>
 8008776:	2a25      	cmp	r2, #37	@ 0x25
 8008778:	d1f9      	bne.n	800876e <_vfiprintf_r+0x7a>
 800877a:	ebba 0b04 	subs.w	fp, sl, r4
 800877e:	d00b      	beq.n	8008798 <_vfiprintf_r+0xa4>
 8008780:	465b      	mov	r3, fp
 8008782:	4622      	mov	r2, r4
 8008784:	4629      	mov	r1, r5
 8008786:	4630      	mov	r0, r6
 8008788:	f7ff ffa1 	bl	80086ce <__sfputs_r>
 800878c:	3001      	adds	r0, #1
 800878e:	f000 80a7 	beq.w	80088e0 <_vfiprintf_r+0x1ec>
 8008792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008794:	445a      	add	r2, fp
 8008796:	9209      	str	r2, [sp, #36]	@ 0x24
 8008798:	f89a 3000 	ldrb.w	r3, [sl]
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 809f 	beq.w	80088e0 <_vfiprintf_r+0x1ec>
 80087a2:	2300      	movs	r3, #0
 80087a4:	f04f 32ff 	mov.w	r2, #4294967295
 80087a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ac:	f10a 0a01 	add.w	sl, sl, #1
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	9307      	str	r3, [sp, #28]
 80087b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80087ba:	4654      	mov	r4, sl
 80087bc:	2205      	movs	r2, #5
 80087be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c2:	4853      	ldr	r0, [pc, #332]	@ (8008910 <_vfiprintf_r+0x21c>)
 80087c4:	f7f7 fd2c 	bl	8000220 <memchr>
 80087c8:	9a04      	ldr	r2, [sp, #16]
 80087ca:	b9d8      	cbnz	r0, 8008804 <_vfiprintf_r+0x110>
 80087cc:	06d1      	lsls	r1, r2, #27
 80087ce:	bf44      	itt	mi
 80087d0:	2320      	movmi	r3, #32
 80087d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087d6:	0713      	lsls	r3, r2, #28
 80087d8:	bf44      	itt	mi
 80087da:	232b      	movmi	r3, #43	@ 0x2b
 80087dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e0:	f89a 3000 	ldrb.w	r3, [sl]
 80087e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e6:	d015      	beq.n	8008814 <_vfiprintf_r+0x120>
 80087e8:	9a07      	ldr	r2, [sp, #28]
 80087ea:	4654      	mov	r4, sl
 80087ec:	2000      	movs	r0, #0
 80087ee:	f04f 0c0a 	mov.w	ip, #10
 80087f2:	4621      	mov	r1, r4
 80087f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f8:	3b30      	subs	r3, #48	@ 0x30
 80087fa:	2b09      	cmp	r3, #9
 80087fc:	d94b      	bls.n	8008896 <_vfiprintf_r+0x1a2>
 80087fe:	b1b0      	cbz	r0, 800882e <_vfiprintf_r+0x13a>
 8008800:	9207      	str	r2, [sp, #28]
 8008802:	e014      	b.n	800882e <_vfiprintf_r+0x13a>
 8008804:	eba0 0308 	sub.w	r3, r0, r8
 8008808:	fa09 f303 	lsl.w	r3, r9, r3
 800880c:	4313      	orrs	r3, r2
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	46a2      	mov	sl, r4
 8008812:	e7d2      	b.n	80087ba <_vfiprintf_r+0xc6>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	1d19      	adds	r1, r3, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	9103      	str	r1, [sp, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfbb      	ittet	lt
 8008820:	425b      	neglt	r3, r3
 8008822:	f042 0202 	orrlt.w	r2, r2, #2
 8008826:	9307      	strge	r3, [sp, #28]
 8008828:	9307      	strlt	r3, [sp, #28]
 800882a:	bfb8      	it	lt
 800882c:	9204      	strlt	r2, [sp, #16]
 800882e:	7823      	ldrb	r3, [r4, #0]
 8008830:	2b2e      	cmp	r3, #46	@ 0x2e
 8008832:	d10a      	bne.n	800884a <_vfiprintf_r+0x156>
 8008834:	7863      	ldrb	r3, [r4, #1]
 8008836:	2b2a      	cmp	r3, #42	@ 0x2a
 8008838:	d132      	bne.n	80088a0 <_vfiprintf_r+0x1ac>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	1d1a      	adds	r2, r3, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	9203      	str	r2, [sp, #12]
 8008842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008846:	3402      	adds	r4, #2
 8008848:	9305      	str	r3, [sp, #20]
 800884a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008920 <_vfiprintf_r+0x22c>
 800884e:	7821      	ldrb	r1, [r4, #0]
 8008850:	2203      	movs	r2, #3
 8008852:	4650      	mov	r0, sl
 8008854:	f7f7 fce4 	bl	8000220 <memchr>
 8008858:	b138      	cbz	r0, 800886a <_vfiprintf_r+0x176>
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	eba0 000a 	sub.w	r0, r0, sl
 8008860:	2240      	movs	r2, #64	@ 0x40
 8008862:	4082      	lsls	r2, r0
 8008864:	4313      	orrs	r3, r2
 8008866:	3401      	adds	r4, #1
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800886e:	4829      	ldr	r0, [pc, #164]	@ (8008914 <_vfiprintf_r+0x220>)
 8008870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008874:	2206      	movs	r2, #6
 8008876:	f7f7 fcd3 	bl	8000220 <memchr>
 800887a:	2800      	cmp	r0, #0
 800887c:	d03f      	beq.n	80088fe <_vfiprintf_r+0x20a>
 800887e:	4b26      	ldr	r3, [pc, #152]	@ (8008918 <_vfiprintf_r+0x224>)
 8008880:	bb1b      	cbnz	r3, 80088ca <_vfiprintf_r+0x1d6>
 8008882:	9b03      	ldr	r3, [sp, #12]
 8008884:	3307      	adds	r3, #7
 8008886:	f023 0307 	bic.w	r3, r3, #7
 800888a:	3308      	adds	r3, #8
 800888c:	9303      	str	r3, [sp, #12]
 800888e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008890:	443b      	add	r3, r7
 8008892:	9309      	str	r3, [sp, #36]	@ 0x24
 8008894:	e76a      	b.n	800876c <_vfiprintf_r+0x78>
 8008896:	fb0c 3202 	mla	r2, ip, r2, r3
 800889a:	460c      	mov	r4, r1
 800889c:	2001      	movs	r0, #1
 800889e:	e7a8      	b.n	80087f2 <_vfiprintf_r+0xfe>
 80088a0:	2300      	movs	r3, #0
 80088a2:	3401      	adds	r4, #1
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	4619      	mov	r1, r3
 80088a8:	f04f 0c0a 	mov.w	ip, #10
 80088ac:	4620      	mov	r0, r4
 80088ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b2:	3a30      	subs	r2, #48	@ 0x30
 80088b4:	2a09      	cmp	r2, #9
 80088b6:	d903      	bls.n	80088c0 <_vfiprintf_r+0x1cc>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0c6      	beq.n	800884a <_vfiprintf_r+0x156>
 80088bc:	9105      	str	r1, [sp, #20]
 80088be:	e7c4      	b.n	800884a <_vfiprintf_r+0x156>
 80088c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088c4:	4604      	mov	r4, r0
 80088c6:	2301      	movs	r3, #1
 80088c8:	e7f0      	b.n	80088ac <_vfiprintf_r+0x1b8>
 80088ca:	ab03      	add	r3, sp, #12
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	462a      	mov	r2, r5
 80088d0:	4b12      	ldr	r3, [pc, #72]	@ (800891c <_vfiprintf_r+0x228>)
 80088d2:	a904      	add	r1, sp, #16
 80088d4:	4630      	mov	r0, r6
 80088d6:	f3af 8000 	nop.w
 80088da:	4607      	mov	r7, r0
 80088dc:	1c78      	adds	r0, r7, #1
 80088de:	d1d6      	bne.n	800888e <_vfiprintf_r+0x19a>
 80088e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e2:	07d9      	lsls	r1, r3, #31
 80088e4:	d405      	bmi.n	80088f2 <_vfiprintf_r+0x1fe>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	059a      	lsls	r2, r3, #22
 80088ea:	d402      	bmi.n	80088f2 <_vfiprintf_r+0x1fe>
 80088ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ee:	f7ff fdcf 	bl	8008490 <__retarget_lock_release_recursive>
 80088f2:	89ab      	ldrh	r3, [r5, #12]
 80088f4:	065b      	lsls	r3, r3, #25
 80088f6:	f53f af1f 	bmi.w	8008738 <_vfiprintf_r+0x44>
 80088fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088fc:	e71e      	b.n	800873c <_vfiprintf_r+0x48>
 80088fe:	ab03      	add	r3, sp, #12
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	462a      	mov	r2, r5
 8008904:	4b05      	ldr	r3, [pc, #20]	@ (800891c <_vfiprintf_r+0x228>)
 8008906:	a904      	add	r1, sp, #16
 8008908:	4630      	mov	r0, r6
 800890a:	f000 f879 	bl	8008a00 <_printf_i>
 800890e:	e7e4      	b.n	80088da <_vfiprintf_r+0x1e6>
 8008910:	0801ef10 	.word	0x0801ef10
 8008914:	0801ef1a 	.word	0x0801ef1a
 8008918:	00000000 	.word	0x00000000
 800891c:	080086cf 	.word	0x080086cf
 8008920:	0801ef16 	.word	0x0801ef16

08008924 <_printf_common>:
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	4616      	mov	r6, r2
 800892a:	4698      	mov	r8, r3
 800892c:	688a      	ldr	r2, [r1, #8]
 800892e:	690b      	ldr	r3, [r1, #16]
 8008930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008934:	4293      	cmp	r3, r2
 8008936:	bfb8      	it	lt
 8008938:	4613      	movlt	r3, r2
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008940:	4607      	mov	r7, r0
 8008942:	460c      	mov	r4, r1
 8008944:	b10a      	cbz	r2, 800894a <_printf_common+0x26>
 8008946:	3301      	adds	r3, #1
 8008948:	6033      	str	r3, [r6, #0]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	0699      	lsls	r1, r3, #26
 800894e:	bf42      	ittt	mi
 8008950:	6833      	ldrmi	r3, [r6, #0]
 8008952:	3302      	addmi	r3, #2
 8008954:	6033      	strmi	r3, [r6, #0]
 8008956:	6825      	ldr	r5, [r4, #0]
 8008958:	f015 0506 	ands.w	r5, r5, #6
 800895c:	d106      	bne.n	800896c <_printf_common+0x48>
 800895e:	f104 0a19 	add.w	sl, r4, #25
 8008962:	68e3      	ldr	r3, [r4, #12]
 8008964:	6832      	ldr	r2, [r6, #0]
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	42ab      	cmp	r3, r5
 800896a:	dc26      	bgt.n	80089ba <_printf_common+0x96>
 800896c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008970:	6822      	ldr	r2, [r4, #0]
 8008972:	3b00      	subs	r3, #0
 8008974:	bf18      	it	ne
 8008976:	2301      	movne	r3, #1
 8008978:	0692      	lsls	r2, r2, #26
 800897a:	d42b      	bmi.n	80089d4 <_printf_common+0xb0>
 800897c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008980:	4641      	mov	r1, r8
 8008982:	4638      	mov	r0, r7
 8008984:	47c8      	blx	r9
 8008986:	3001      	adds	r0, #1
 8008988:	d01e      	beq.n	80089c8 <_printf_common+0xa4>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	6922      	ldr	r2, [r4, #16]
 800898e:	f003 0306 	and.w	r3, r3, #6
 8008992:	2b04      	cmp	r3, #4
 8008994:	bf02      	ittt	eq
 8008996:	68e5      	ldreq	r5, [r4, #12]
 8008998:	6833      	ldreq	r3, [r6, #0]
 800899a:	1aed      	subeq	r5, r5, r3
 800899c:	68a3      	ldr	r3, [r4, #8]
 800899e:	bf0c      	ite	eq
 80089a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a4:	2500      	movne	r5, #0
 80089a6:	4293      	cmp	r3, r2
 80089a8:	bfc4      	itt	gt
 80089aa:	1a9b      	subgt	r3, r3, r2
 80089ac:	18ed      	addgt	r5, r5, r3
 80089ae:	2600      	movs	r6, #0
 80089b0:	341a      	adds	r4, #26
 80089b2:	42b5      	cmp	r5, r6
 80089b4:	d11a      	bne.n	80089ec <_printf_common+0xc8>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e008      	b.n	80089cc <_printf_common+0xa8>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4652      	mov	r2, sl
 80089be:	4641      	mov	r1, r8
 80089c0:	4638      	mov	r0, r7
 80089c2:	47c8      	blx	r9
 80089c4:	3001      	adds	r0, #1
 80089c6:	d103      	bne.n	80089d0 <_printf_common+0xac>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d0:	3501      	adds	r5, #1
 80089d2:	e7c6      	b.n	8008962 <_printf_common+0x3e>
 80089d4:	18e1      	adds	r1, r4, r3
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	2030      	movs	r0, #48	@ 0x30
 80089da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089de:	4422      	add	r2, r4
 80089e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089e8:	3302      	adds	r3, #2
 80089ea:	e7c7      	b.n	800897c <_printf_common+0x58>
 80089ec:	2301      	movs	r3, #1
 80089ee:	4622      	mov	r2, r4
 80089f0:	4641      	mov	r1, r8
 80089f2:	4638      	mov	r0, r7
 80089f4:	47c8      	blx	r9
 80089f6:	3001      	adds	r0, #1
 80089f8:	d0e6      	beq.n	80089c8 <_printf_common+0xa4>
 80089fa:	3601      	adds	r6, #1
 80089fc:	e7d9      	b.n	80089b2 <_printf_common+0x8e>
	...

08008a00 <_printf_i>:
 8008a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	7e0f      	ldrb	r7, [r1, #24]
 8008a06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a08:	2f78      	cmp	r7, #120	@ 0x78
 8008a0a:	4691      	mov	r9, r2
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	469a      	mov	sl, r3
 8008a12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a16:	d807      	bhi.n	8008a28 <_printf_i+0x28>
 8008a18:	2f62      	cmp	r7, #98	@ 0x62
 8008a1a:	d80a      	bhi.n	8008a32 <_printf_i+0x32>
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	f000 80d2 	beq.w	8008bc6 <_printf_i+0x1c6>
 8008a22:	2f58      	cmp	r7, #88	@ 0x58
 8008a24:	f000 80b9 	beq.w	8008b9a <_printf_i+0x19a>
 8008a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a30:	e03a      	b.n	8008aa8 <_printf_i+0xa8>
 8008a32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a36:	2b15      	cmp	r3, #21
 8008a38:	d8f6      	bhi.n	8008a28 <_printf_i+0x28>
 8008a3a:	a101      	add	r1, pc, #4	@ (adr r1, 8008a40 <_printf_i+0x40>)
 8008a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a40:	08008a99 	.word	0x08008a99
 8008a44:	08008aad 	.word	0x08008aad
 8008a48:	08008a29 	.word	0x08008a29
 8008a4c:	08008a29 	.word	0x08008a29
 8008a50:	08008a29 	.word	0x08008a29
 8008a54:	08008a29 	.word	0x08008a29
 8008a58:	08008aad 	.word	0x08008aad
 8008a5c:	08008a29 	.word	0x08008a29
 8008a60:	08008a29 	.word	0x08008a29
 8008a64:	08008a29 	.word	0x08008a29
 8008a68:	08008a29 	.word	0x08008a29
 8008a6c:	08008bad 	.word	0x08008bad
 8008a70:	08008ad7 	.word	0x08008ad7
 8008a74:	08008b67 	.word	0x08008b67
 8008a78:	08008a29 	.word	0x08008a29
 8008a7c:	08008a29 	.word	0x08008a29
 8008a80:	08008bcf 	.word	0x08008bcf
 8008a84:	08008a29 	.word	0x08008a29
 8008a88:	08008ad7 	.word	0x08008ad7
 8008a8c:	08008a29 	.word	0x08008a29
 8008a90:	08008a29 	.word	0x08008a29
 8008a94:	08008b6f 	.word	0x08008b6f
 8008a98:	6833      	ldr	r3, [r6, #0]
 8008a9a:	1d1a      	adds	r2, r3, #4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6032      	str	r2, [r6, #0]
 8008aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e09d      	b.n	8008be8 <_printf_i+0x1e8>
 8008aac:	6833      	ldr	r3, [r6, #0]
 8008aae:	6820      	ldr	r0, [r4, #0]
 8008ab0:	1d19      	adds	r1, r3, #4
 8008ab2:	6031      	str	r1, [r6, #0]
 8008ab4:	0606      	lsls	r6, r0, #24
 8008ab6:	d501      	bpl.n	8008abc <_printf_i+0xbc>
 8008ab8:	681d      	ldr	r5, [r3, #0]
 8008aba:	e003      	b.n	8008ac4 <_printf_i+0xc4>
 8008abc:	0645      	lsls	r5, r0, #25
 8008abe:	d5fb      	bpl.n	8008ab8 <_printf_i+0xb8>
 8008ac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ac4:	2d00      	cmp	r5, #0
 8008ac6:	da03      	bge.n	8008ad0 <_printf_i+0xd0>
 8008ac8:	232d      	movs	r3, #45	@ 0x2d
 8008aca:	426d      	negs	r5, r5
 8008acc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ad0:	4859      	ldr	r0, [pc, #356]	@ (8008c38 <_printf_i+0x238>)
 8008ad2:	230a      	movs	r3, #10
 8008ad4:	e011      	b.n	8008afa <_printf_i+0xfa>
 8008ad6:	6821      	ldr	r1, [r4, #0]
 8008ad8:	6833      	ldr	r3, [r6, #0]
 8008ada:	0608      	lsls	r0, r1, #24
 8008adc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ae0:	d402      	bmi.n	8008ae8 <_printf_i+0xe8>
 8008ae2:	0649      	lsls	r1, r1, #25
 8008ae4:	bf48      	it	mi
 8008ae6:	b2ad      	uxthmi	r5, r5
 8008ae8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008aea:	4853      	ldr	r0, [pc, #332]	@ (8008c38 <_printf_i+0x238>)
 8008aec:	6033      	str	r3, [r6, #0]
 8008aee:	bf14      	ite	ne
 8008af0:	230a      	movne	r3, #10
 8008af2:	2308      	moveq	r3, #8
 8008af4:	2100      	movs	r1, #0
 8008af6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008afa:	6866      	ldr	r6, [r4, #4]
 8008afc:	60a6      	str	r6, [r4, #8]
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	bfa2      	ittt	ge
 8008b02:	6821      	ldrge	r1, [r4, #0]
 8008b04:	f021 0104 	bicge.w	r1, r1, #4
 8008b08:	6021      	strge	r1, [r4, #0]
 8008b0a:	b90d      	cbnz	r5, 8008b10 <_printf_i+0x110>
 8008b0c:	2e00      	cmp	r6, #0
 8008b0e:	d04b      	beq.n	8008ba8 <_printf_i+0x1a8>
 8008b10:	4616      	mov	r6, r2
 8008b12:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b16:	fb03 5711 	mls	r7, r3, r1, r5
 8008b1a:	5dc7      	ldrb	r7, [r0, r7]
 8008b1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b20:	462f      	mov	r7, r5
 8008b22:	42bb      	cmp	r3, r7
 8008b24:	460d      	mov	r5, r1
 8008b26:	d9f4      	bls.n	8008b12 <_printf_i+0x112>
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d10b      	bne.n	8008b44 <_printf_i+0x144>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	07df      	lsls	r7, r3, #31
 8008b30:	d508      	bpl.n	8008b44 <_printf_i+0x144>
 8008b32:	6923      	ldr	r3, [r4, #16]
 8008b34:	6861      	ldr	r1, [r4, #4]
 8008b36:	4299      	cmp	r1, r3
 8008b38:	bfde      	ittt	le
 8008b3a:	2330      	movle	r3, #48	@ 0x30
 8008b3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b44:	1b92      	subs	r2, r2, r6
 8008b46:	6122      	str	r2, [r4, #16]
 8008b48:	f8cd a000 	str.w	sl, [sp]
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	aa03      	add	r2, sp, #12
 8008b50:	4621      	mov	r1, r4
 8008b52:	4640      	mov	r0, r8
 8008b54:	f7ff fee6 	bl	8008924 <_printf_common>
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d14a      	bne.n	8008bf2 <_printf_i+0x1f2>
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	b004      	add	sp, #16
 8008b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	f043 0320 	orr.w	r3, r3, #32
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	4833      	ldr	r0, [pc, #204]	@ (8008c3c <_printf_i+0x23c>)
 8008b70:	2778      	movs	r7, #120	@ 0x78
 8008b72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	6831      	ldr	r1, [r6, #0]
 8008b7a:	061f      	lsls	r7, r3, #24
 8008b7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b80:	d402      	bmi.n	8008b88 <_printf_i+0x188>
 8008b82:	065f      	lsls	r7, r3, #25
 8008b84:	bf48      	it	mi
 8008b86:	b2ad      	uxthmi	r5, r5
 8008b88:	6031      	str	r1, [r6, #0]
 8008b8a:	07d9      	lsls	r1, r3, #31
 8008b8c:	bf44      	itt	mi
 8008b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8008b92:	6023      	strmi	r3, [r4, #0]
 8008b94:	b11d      	cbz	r5, 8008b9e <_printf_i+0x19e>
 8008b96:	2310      	movs	r3, #16
 8008b98:	e7ac      	b.n	8008af4 <_printf_i+0xf4>
 8008b9a:	4827      	ldr	r0, [pc, #156]	@ (8008c38 <_printf_i+0x238>)
 8008b9c:	e7e9      	b.n	8008b72 <_printf_i+0x172>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	f023 0320 	bic.w	r3, r3, #32
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	e7f6      	b.n	8008b96 <_printf_i+0x196>
 8008ba8:	4616      	mov	r6, r2
 8008baa:	e7bd      	b.n	8008b28 <_printf_i+0x128>
 8008bac:	6833      	ldr	r3, [r6, #0]
 8008bae:	6825      	ldr	r5, [r4, #0]
 8008bb0:	6961      	ldr	r1, [r4, #20]
 8008bb2:	1d18      	adds	r0, r3, #4
 8008bb4:	6030      	str	r0, [r6, #0]
 8008bb6:	062e      	lsls	r6, r5, #24
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	d501      	bpl.n	8008bc0 <_printf_i+0x1c0>
 8008bbc:	6019      	str	r1, [r3, #0]
 8008bbe:	e002      	b.n	8008bc6 <_printf_i+0x1c6>
 8008bc0:	0668      	lsls	r0, r5, #25
 8008bc2:	d5fb      	bpl.n	8008bbc <_printf_i+0x1bc>
 8008bc4:	8019      	strh	r1, [r3, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	4616      	mov	r6, r2
 8008bcc:	e7bc      	b.n	8008b48 <_printf_i+0x148>
 8008bce:	6833      	ldr	r3, [r6, #0]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	6032      	str	r2, [r6, #0]
 8008bd4:	681e      	ldr	r6, [r3, #0]
 8008bd6:	6862      	ldr	r2, [r4, #4]
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7f7 fb20 	bl	8000220 <memchr>
 8008be0:	b108      	cbz	r0, 8008be6 <_printf_i+0x1e6>
 8008be2:	1b80      	subs	r0, r0, r6
 8008be4:	6060      	str	r0, [r4, #4]
 8008be6:	6863      	ldr	r3, [r4, #4]
 8008be8:	6123      	str	r3, [r4, #16]
 8008bea:	2300      	movs	r3, #0
 8008bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bf0:	e7aa      	b.n	8008b48 <_printf_i+0x148>
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	4632      	mov	r2, r6
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	47d0      	blx	sl
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d0ad      	beq.n	8008b5c <_printf_i+0x15c>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	079b      	lsls	r3, r3, #30
 8008c04:	d413      	bmi.n	8008c2e <_printf_i+0x22e>
 8008c06:	68e0      	ldr	r0, [r4, #12]
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	4298      	cmp	r0, r3
 8008c0c:	bfb8      	it	lt
 8008c0e:	4618      	movlt	r0, r3
 8008c10:	e7a6      	b.n	8008b60 <_printf_i+0x160>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4632      	mov	r2, r6
 8008c16:	4649      	mov	r1, r9
 8008c18:	4640      	mov	r0, r8
 8008c1a:	47d0      	blx	sl
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d09d      	beq.n	8008b5c <_printf_i+0x15c>
 8008c20:	3501      	adds	r5, #1
 8008c22:	68e3      	ldr	r3, [r4, #12]
 8008c24:	9903      	ldr	r1, [sp, #12]
 8008c26:	1a5b      	subs	r3, r3, r1
 8008c28:	42ab      	cmp	r3, r5
 8008c2a:	dcf2      	bgt.n	8008c12 <_printf_i+0x212>
 8008c2c:	e7eb      	b.n	8008c06 <_printf_i+0x206>
 8008c2e:	2500      	movs	r5, #0
 8008c30:	f104 0619 	add.w	r6, r4, #25
 8008c34:	e7f5      	b.n	8008c22 <_printf_i+0x222>
 8008c36:	bf00      	nop
 8008c38:	0801ef21 	.word	0x0801ef21
 8008c3c:	0801ef32 	.word	0x0801ef32

08008c40 <__sflush_r>:
 8008c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c48:	0716      	lsls	r6, r2, #28
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	d454      	bmi.n	8008cfa <__sflush_r+0xba>
 8008c50:	684b      	ldr	r3, [r1, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dc02      	bgt.n	8008c5c <__sflush_r+0x1c>
 8008c56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dd48      	ble.n	8008cee <__sflush_r+0xae>
 8008c5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c5e:	2e00      	cmp	r6, #0
 8008c60:	d045      	beq.n	8008cee <__sflush_r+0xae>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c68:	682f      	ldr	r7, [r5, #0]
 8008c6a:	6a21      	ldr	r1, [r4, #32]
 8008c6c:	602b      	str	r3, [r5, #0]
 8008c6e:	d030      	beq.n	8008cd2 <__sflush_r+0x92>
 8008c70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	0759      	lsls	r1, r3, #29
 8008c76:	d505      	bpl.n	8008c84 <__sflush_r+0x44>
 8008c78:	6863      	ldr	r3, [r4, #4]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c7e:	b10b      	cbz	r3, 8008c84 <__sflush_r+0x44>
 8008c80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	2300      	movs	r3, #0
 8008c86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c88:	6a21      	ldr	r1, [r4, #32]
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b0      	blx	r6
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	d106      	bne.n	8008ca2 <__sflush_r+0x62>
 8008c94:	6829      	ldr	r1, [r5, #0]
 8008c96:	291d      	cmp	r1, #29
 8008c98:	d82b      	bhi.n	8008cf2 <__sflush_r+0xb2>
 8008c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8008d44 <__sflush_r+0x104>)
 8008c9c:	410a      	asrs	r2, r1
 8008c9e:	07d6      	lsls	r6, r2, #31
 8008ca0:	d427      	bmi.n	8008cf2 <__sflush_r+0xb2>
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	6062      	str	r2, [r4, #4]
 8008ca6:	04d9      	lsls	r1, r3, #19
 8008ca8:	6922      	ldr	r2, [r4, #16]
 8008caa:	6022      	str	r2, [r4, #0]
 8008cac:	d504      	bpl.n	8008cb8 <__sflush_r+0x78>
 8008cae:	1c42      	adds	r2, r0, #1
 8008cb0:	d101      	bne.n	8008cb6 <__sflush_r+0x76>
 8008cb2:	682b      	ldr	r3, [r5, #0]
 8008cb4:	b903      	cbnz	r3, 8008cb8 <__sflush_r+0x78>
 8008cb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cba:	602f      	str	r7, [r5, #0]
 8008cbc:	b1b9      	cbz	r1, 8008cee <__sflush_r+0xae>
 8008cbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	d002      	beq.n	8008ccc <__sflush_r+0x8c>
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f7ff fbf2 	bl	80084b0 <_free_r>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cd0:	e00d      	b.n	8008cee <__sflush_r+0xae>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b0      	blx	r6
 8008cd8:	4602      	mov	r2, r0
 8008cda:	1c50      	adds	r0, r2, #1
 8008cdc:	d1c9      	bne.n	8008c72 <__sflush_r+0x32>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0c6      	beq.n	8008c72 <__sflush_r+0x32>
 8008ce4:	2b1d      	cmp	r3, #29
 8008ce6:	d001      	beq.n	8008cec <__sflush_r+0xac>
 8008ce8:	2b16      	cmp	r3, #22
 8008cea:	d11e      	bne.n	8008d2a <__sflush_r+0xea>
 8008cec:	602f      	str	r7, [r5, #0]
 8008cee:	2000      	movs	r0, #0
 8008cf0:	e022      	b.n	8008d38 <__sflush_r+0xf8>
 8008cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cf6:	b21b      	sxth	r3, r3
 8008cf8:	e01b      	b.n	8008d32 <__sflush_r+0xf2>
 8008cfa:	690f      	ldr	r7, [r1, #16]
 8008cfc:	2f00      	cmp	r7, #0
 8008cfe:	d0f6      	beq.n	8008cee <__sflush_r+0xae>
 8008d00:	0793      	lsls	r3, r2, #30
 8008d02:	680e      	ldr	r6, [r1, #0]
 8008d04:	bf08      	it	eq
 8008d06:	694b      	ldreq	r3, [r1, #20]
 8008d08:	600f      	str	r7, [r1, #0]
 8008d0a:	bf18      	it	ne
 8008d0c:	2300      	movne	r3, #0
 8008d0e:	eba6 0807 	sub.w	r8, r6, r7
 8008d12:	608b      	str	r3, [r1, #8]
 8008d14:	f1b8 0f00 	cmp.w	r8, #0
 8008d18:	dde9      	ble.n	8008cee <__sflush_r+0xae>
 8008d1a:	6a21      	ldr	r1, [r4, #32]
 8008d1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d1e:	4643      	mov	r3, r8
 8008d20:	463a      	mov	r2, r7
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b0      	blx	r6
 8008d26:	2800      	cmp	r0, #0
 8008d28:	dc08      	bgt.n	8008d3c <__sflush_r+0xfc>
 8008d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3c:	4407      	add	r7, r0
 8008d3e:	eba8 0800 	sub.w	r8, r8, r0
 8008d42:	e7e7      	b.n	8008d14 <__sflush_r+0xd4>
 8008d44:	dfbffffe 	.word	0xdfbffffe

08008d48 <_fflush_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	690b      	ldr	r3, [r1, #16]
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	b913      	cbnz	r3, 8008d58 <_fflush_r+0x10>
 8008d52:	2500      	movs	r5, #0
 8008d54:	4628      	mov	r0, r5
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	b118      	cbz	r0, 8008d62 <_fflush_r+0x1a>
 8008d5a:	6a03      	ldr	r3, [r0, #32]
 8008d5c:	b90b      	cbnz	r3, 8008d62 <_fflush_r+0x1a>
 8008d5e:	f7ff f997 	bl	8008090 <__sinit>
 8008d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0f3      	beq.n	8008d52 <_fflush_r+0xa>
 8008d6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d6c:	07d0      	lsls	r0, r2, #31
 8008d6e:	d404      	bmi.n	8008d7a <_fflush_r+0x32>
 8008d70:	0599      	lsls	r1, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_fflush_r+0x32>
 8008d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d76:	f7ff fb8a 	bl	800848e <__retarget_lock_acquire_recursive>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7ff ff5f 	bl	8008c40 <__sflush_r>
 8008d82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d84:	07da      	lsls	r2, r3, #31
 8008d86:	4605      	mov	r5, r0
 8008d88:	d4e4      	bmi.n	8008d54 <_fflush_r+0xc>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	059b      	lsls	r3, r3, #22
 8008d8e:	d4e1      	bmi.n	8008d54 <_fflush_r+0xc>
 8008d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d92:	f7ff fb7d 	bl	8008490 <__retarget_lock_release_recursive>
 8008d96:	e7dd      	b.n	8008d54 <_fflush_r+0xc>

08008d98 <__swhatbuf_r>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da0:	2900      	cmp	r1, #0
 8008da2:	b096      	sub	sp, #88	@ 0x58
 8008da4:	4615      	mov	r5, r2
 8008da6:	461e      	mov	r6, r3
 8008da8:	da0d      	bge.n	8008dc6 <__swhatbuf_r+0x2e>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008db0:	f04f 0100 	mov.w	r1, #0
 8008db4:	bf14      	ite	ne
 8008db6:	2340      	movne	r3, #64	@ 0x40
 8008db8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	6031      	str	r1, [r6, #0]
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	b016      	add	sp, #88	@ 0x58
 8008dc4:	bd70      	pop	{r4, r5, r6, pc}
 8008dc6:	466a      	mov	r2, sp
 8008dc8:	f000 f87c 	bl	8008ec4 <_fstat_r>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	dbec      	blt.n	8008daa <__swhatbuf_r+0x12>
 8008dd0:	9901      	ldr	r1, [sp, #4]
 8008dd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dda:	4259      	negs	r1, r3
 8008ddc:	4159      	adcs	r1, r3
 8008dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008de2:	e7eb      	b.n	8008dbc <__swhatbuf_r+0x24>

08008de4 <__smakebuf_r>:
 8008de4:	898b      	ldrh	r3, [r1, #12]
 8008de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de8:	079d      	lsls	r5, r3, #30
 8008dea:	4606      	mov	r6, r0
 8008dec:	460c      	mov	r4, r1
 8008dee:	d507      	bpl.n	8008e00 <__smakebuf_r+0x1c>
 8008df0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	6123      	str	r3, [r4, #16]
 8008df8:	2301      	movs	r3, #1
 8008dfa:	6163      	str	r3, [r4, #20]
 8008dfc:	b003      	add	sp, #12
 8008dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e00:	ab01      	add	r3, sp, #4
 8008e02:	466a      	mov	r2, sp
 8008e04:	f7ff ffc8 	bl	8008d98 <__swhatbuf_r>
 8008e08:	9f00      	ldr	r7, [sp, #0]
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7ff fbba 	bl	8008588 <_malloc_r>
 8008e14:	b948      	cbnz	r0, 8008e2a <__smakebuf_r+0x46>
 8008e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e1a:	059a      	lsls	r2, r3, #22
 8008e1c:	d4ee      	bmi.n	8008dfc <__smakebuf_r+0x18>
 8008e1e:	f023 0303 	bic.w	r3, r3, #3
 8008e22:	f043 0302 	orr.w	r3, r3, #2
 8008e26:	81a3      	strh	r3, [r4, #12]
 8008e28:	e7e2      	b.n	8008df0 <__smakebuf_r+0xc>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	6020      	str	r0, [r4, #0]
 8008e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	9b01      	ldr	r3, [sp, #4]
 8008e36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e3a:	b15b      	cbz	r3, 8008e54 <__smakebuf_r+0x70>
 8008e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e40:	4630      	mov	r0, r6
 8008e42:	f000 f851 	bl	8008ee8 <_isatty_r>
 8008e46:	b128      	cbz	r0, 8008e54 <__smakebuf_r+0x70>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f023 0303 	bic.w	r3, r3, #3
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	431d      	orrs	r5, r3
 8008e58:	81a5      	strh	r5, [r4, #12]
 8008e5a:	e7cf      	b.n	8008dfc <__smakebuf_r+0x18>

08008e5c <_putc_r>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	460d      	mov	r5, r1
 8008e60:	4614      	mov	r4, r2
 8008e62:	4606      	mov	r6, r0
 8008e64:	b118      	cbz	r0, 8008e6e <_putc_r+0x12>
 8008e66:	6a03      	ldr	r3, [r0, #32]
 8008e68:	b90b      	cbnz	r3, 8008e6e <_putc_r+0x12>
 8008e6a:	f7ff f911 	bl	8008090 <__sinit>
 8008e6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e70:	07d8      	lsls	r0, r3, #31
 8008e72:	d405      	bmi.n	8008e80 <_putc_r+0x24>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	0599      	lsls	r1, r3, #22
 8008e78:	d402      	bmi.n	8008e80 <_putc_r+0x24>
 8008e7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e7c:	f7ff fb07 	bl	800848e <__retarget_lock_acquire_recursive>
 8008e80:	68a3      	ldr	r3, [r4, #8]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	60a3      	str	r3, [r4, #8]
 8008e88:	da05      	bge.n	8008e96 <_putc_r+0x3a>
 8008e8a:	69a2      	ldr	r2, [r4, #24]
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	db12      	blt.n	8008eb6 <_putc_r+0x5a>
 8008e90:	b2eb      	uxtb	r3, r5
 8008e92:	2b0a      	cmp	r3, #10
 8008e94:	d00f      	beq.n	8008eb6 <_putc_r+0x5a>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	6022      	str	r2, [r4, #0]
 8008e9c:	701d      	strb	r5, [r3, #0]
 8008e9e:	b2ed      	uxtb	r5, r5
 8008ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ea2:	07da      	lsls	r2, r3, #31
 8008ea4:	d405      	bmi.n	8008eb2 <_putc_r+0x56>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	059b      	lsls	r3, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_putc_r+0x56>
 8008eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eae:	f7ff faef 	bl	8008490 <__retarget_lock_release_recursive>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	bd70      	pop	{r4, r5, r6, pc}
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7ff f9d9 	bl	8008272 <__swbuf_r>
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	e7ed      	b.n	8008ea0 <_putc_r+0x44>

08008ec4 <_fstat_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	@ (8008ee4 <_fstat_r+0x20>)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	4611      	mov	r1, r2
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	f7f8 f8e8 	bl	80010a6 <_fstat>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d102      	bne.n	8008ee0 <_fstat_r+0x1c>
 8008eda:	682b      	ldr	r3, [r5, #0]
 8008edc:	b103      	cbz	r3, 8008ee0 <_fstat_r+0x1c>
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	bf00      	nop
 8008ee4:	2000355c 	.word	0x2000355c

08008ee8 <_isatty_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	@ (8008f04 <_isatty_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7f8 f8e7 	bl	80010c6 <_isatty>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_isatty_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_isatty_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	2000355c 	.word	0x2000355c

08008f08 <_sbrk_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d06      	ldr	r5, [pc, #24]	@ (8008f24 <_sbrk_r+0x1c>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	f7f8 f8f0 	bl	80010f8 <_sbrk>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_sbrk_r+0x1a>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_sbrk_r+0x1a>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	2000355c 	.word	0x2000355c

08008f28 <_init>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	bf00      	nop
 8008f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2e:	bc08      	pop	{r3}
 8008f30:	469e      	mov	lr, r3
 8008f32:	4770      	bx	lr

08008f34 <_fini>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr
