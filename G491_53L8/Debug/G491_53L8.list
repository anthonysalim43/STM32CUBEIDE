
G491_53L8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c7c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015a38  08008e5c  08008e5c  00009e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e894  0801e894  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801e894  0801e894  0001f894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e89c  0801e89c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e89c  0801e89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e8a0  0801e8a0  0001f8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  0801e8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030b8  200000b4  0801e958  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000316c  0801e958  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e82  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003228  00000000  00000000  00034f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00038190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d71  00000000  00000000  00039328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002115d  00000000  00000000  0003a099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3da  00000000  00000000  0005b1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6933  00000000  00000000  000755d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bf03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f3c  00000000  00000000  0013bf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00140e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000b4 	.word	0x200000b4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008e44 	.word	0x08008e44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000b8 	.word	0x200000b8
 800021c:	08008e44 	.word	0x08008e44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f003 ff66 	bl	8004484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f82a 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f874 	bl	80006a8 <MX_GPIO_Init>
  MX_TOF_Init();
 80005c0:	f007 f92f 	bl	8007822 <MX_TOF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f003 fde7 	bl	8004198 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005ca:	2101      	movs	r1, #1
 80005cc:	2000      	movs	r0, #0
 80005ce:	f003 fe19 	bl	8004204 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <main+0x5c>)
 80005d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <main+0x5c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <main+0x5c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <main+0x5c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <main+0x5c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005f2:	4906      	ldr	r1, [pc, #24]	@ (800060c <main+0x5c>)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f003 fe73 	bl	80042e0 <BSP_COM_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <main+0x54>
  {
    Error_Handler();
 8000600:	f000 f8fc 	bl	80007fc <Error_Handler>
  while (1)
  {

    /* USER CODE END WHILE */

  MX_TOF_Process();
 8000604:	f007 f913 	bl	800782e <MX_TOF_Process>
 8000608:	e7fc      	b.n	8000604 <main+0x54>
 800060a:	bf00      	nop
 800060c:	200000d0 	.word	0x200000d0

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2238      	movs	r2, #56	@ 0x38
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fe4a 	bl	80082b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000632:	2000      	movs	r0, #0
 8000634:	f005 fa0c 	bl	8005a50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2340      	movs	r3, #64	@ 0x40
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064e:	2304      	movs	r3, #4
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000652:	2355      	movs	r3, #85	@ 0x55
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	4618      	mov	r0, r3
 8000668:	f005 faa6 	bl	8005bb8 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000672:	f000 f8c3 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fda4 	bl	80061dc <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069a:	f000 f8af 	bl	80007fc <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b4d      	ldr	r3, [pc, #308]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a4c      	ldr	r2, [pc, #304]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b4a      	ldr	r3, [pc, #296]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d6:	4b47      	ldr	r3, [pc, #284]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a46      	ldr	r2, [pc, #280]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b44      	ldr	r3, [pc, #272]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0320 	and.w	r3, r3, #32
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b41      	ldr	r3, [pc, #260]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a40      	ldr	r2, [pc, #256]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b3e      	ldr	r3, [pc, #248]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b3b      	ldr	r3, [pc, #236]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a3a      	ldr	r2, [pc, #232]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <MX_GPIO_Init+0x14c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f004 fae3 	bl	8004cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_PWR__GPIO_Port, TOF_PWR__Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2101      	movs	r1, #1
 800072e:	4832      	ldr	r0, [pc, #200]	@ (80007f8 <MX_GPIO_Init+0x150>)
 8000730:	f004 fade 	bl	8004cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_I2C_RST_Pin|TOF_LPn_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2118      	movs	r1, #24
 8000738:	482f      	ldr	r0, [pc, #188]	@ (80007f8 <MX_GPIO_Init+0x150>)
 800073a:	f004 fad9 	bl	8004cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOF_INT_Pin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 800073e:	2310      	movs	r3, #16
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000742:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000756:	f004 f867 	bl	8004828 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075a:	2320      	movs	r3, #32
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000774:	f004 f858 	bl	8004828 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_PWR__Pin */
  GPIO_InitStruct.Pin = TOF_PWR__Pin;
 8000778:	2301      	movs	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_PWR__GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	481a      	ldr	r0, [pc, #104]	@ (80007f8 <MX_GPIO_Init+0x150>)
 8000790:	f004 f84a 	bl	8004828 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_I2C_RST_Pin */
  GPIO_InitStruct.Pin = TOF_I2C_RST_Pin;
 8000794:	2308      	movs	r3, #8
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_I2C_RST_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4813      	ldr	r0, [pc, #76]	@ (80007f8 <MX_GPIO_Init+0x150>)
 80007ac:	f004 f83c 	bl	8004828 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_LPn_Pin */
  GPIO_InitStruct.Pin = TOF_LPn_Pin;
 80007b0:	2310      	movs	r3, #16
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_LPn_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_GPIO_Init+0x150>)
 80007c8:	f004 f82e 	bl	8004828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	200a      	movs	r0, #10
 80007d2:	f003 ffc4 	bl	800475e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007d6:	200a      	movs	r0, #10
 80007d8:	f003 ffdb 	bl	8004792 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2028      	movs	r0, #40	@ 0x28
 80007e2:	f003 ffbc 	bl	800475e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f003 ffd3 	bl	8004792 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	@ 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000400 	.word	0x48000400

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <HAL_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	@ 0x60
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	@ 0x58
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800083e:	f005 f9ab 	bl	8005b98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <NMI_Handler+0x4>

08000858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <MemManage_Handler+0x4>

08000868 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <UsageFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f003 fe3f 	bl	8004528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}

080008ae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 80008b2:	2010      	movs	r0, #16
 80008b4:	f004 fa34 	bl	8004d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008c4:	f004 fa2c 	bl	8004d20 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80008d6:	4b19      	ldr	r3, [pc, #100]	@ (800093c <BSP_I2C1_Init+0x70>)
 80008d8:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <BSP_I2C1_Init+0x74>)
 80008da:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <BSP_I2C1_Init+0x78>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	4918      	ldr	r1, [pc, #96]	@ (8000944 <BSP_I2C1_Init+0x78>)
 80008e4:	600a      	str	r2, [r1, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d122      	bne.n	8000930 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80008ea:	4814      	ldr	r0, [pc, #80]	@ (800093c <BSP_I2C1_Init+0x70>)
 80008ec:	f004 fd3c 	bl	8005368 <HAL_I2C_GetState>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d11c      	bne.n	8000930 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80008f6:	4811      	ldr	r0, [pc, #68]	@ (800093c <BSP_I2C1_Init+0x70>)
 80008f8:	f000 f8fe 	bl	8000af8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d116      	bne.n	8000930 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	@ (800093c <BSP_I2C1_Init+0x70>)
 8000904:	f000 f8b4 	bl	8000a70 <MX_I2C1_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800090e:	f06f 0307 	mvn.w	r3, #7
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	e00c      	b.n	8000930 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	@ (800093c <BSP_I2C1_Init+0x70>)
 800091a:	f005 f801 	bl	8005920 <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000924:	f06f 0307 	mvn.w	r3, #7
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	e001      	b.n	8000930 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000e0 	.word	0x200000e0
 8000940:	40005400 	.word	0x40005400
 8000944:	20000134 	.word	0x20000134

08000948 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <BSP_I2C1_DeInit+0x48>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <BSP_I2C1_DeInit+0x48>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <BSP_I2C1_DeInit+0x48>)
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <BSP_I2C1_DeInit+0x48>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10b      	bne.n	8000984 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <BSP_I2C1_DeInit+0x4c>)
 800096e:	f000 f919 	bl	8000ba4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000972:	4808      	ldr	r0, [pc, #32]	@ (8000994 <BSP_I2C1_DeInit+0x4c>)
 8000974:	f004 fa87 	bl	8004e86 <HAL_I2C_DeInit>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800097e:	f06f 0307 	mvn.w	r3, #7
 8000982:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000134 	.word	0x20000134
 8000994:	200000e0 	.word	0x200000e0

08000998 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af04      	add	r7, sp, #16
 800099e:	60ba      	str	r2, [r7, #8]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	81fb      	strh	r3, [r7, #14]
 80009a6:	460b      	mov	r3, r1
 80009a8:	81bb      	strh	r3, [r7, #12]
 80009aa:	4613      	mov	r3, r2
 80009ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80009b2:	89ba      	ldrh	r2, [r7, #12]
 80009b4:	89f9      	ldrh	r1, [r7, #14]
 80009b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2302      	movs	r3, #2
 80009c6:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <BSP_I2C1_WriteReg16+0x60>)
 80009c8:	f004 faa0 	bl	8004f0c <HAL_I2C_Mem_Write>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00c      	beq.n	80009ec <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80009d2:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <BSP_I2C1_WriteReg16+0x60>)
 80009d4:	f004 fcd6 	bl	8005384 <HAL_I2C_GetError>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d103      	bne.n	80009e6 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80009de:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e002      	b.n	80009ec <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80009e6:	f06f 0303 	mvn.w	r3, #3
 80009ea:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80009ec:	697b      	ldr	r3, [r7, #20]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000e0 	.word	0x200000e0

080009fc <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af04      	add	r7, sp, #16
 8000a02:	60ba      	str	r2, [r7, #8]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4603      	mov	r3, r0
 8000a08:	81fb      	strh	r3, [r7, #14]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	81bb      	strh	r3, [r7, #12]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000a16:	89ba      	ldrh	r2, [r7, #12]
 8000a18:	89f9      	ldrh	r1, [r7, #14]
 8000a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2302      	movs	r3, #2
 8000a2a:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <BSP_I2C1_ReadReg16+0x60>)
 8000a2c:	f004 fb82 	bl	8005134 <HAL_I2C_Mem_Read>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00c      	beq.n	8000a50 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000a36:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <BSP_I2C1_ReadReg16+0x60>)
 8000a38:	f004 fca4 	bl	8005384 <HAL_I2C_GetError>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d003      	beq.n	8000a4a <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000a42:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	e002      	b.n	8000a50 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000a4a:	f06f 0303 	mvn.w	r3, #3
 8000a4e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000a50:	697b      	ldr	r3, [r7, #20]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000e0 	.word	0x200000e0

08000a60 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000a64:	f003 fd72 	bl	800454c <HAL_GetTick>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000af0 <MX_I2C1_Init+0x80>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x40621236;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	@ (8000af4 <MX_I2C1_Init+0x84>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2201      	movs	r2, #1
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f004 f94c 	bl	8004d50 <HAL_I2C_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f004 ff2b 	bl	8005920 <HAL_I2CEx_ConfigAnalogFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f004 ff6d 	bl	80059b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40621236 	.word	0x40621236

08000af8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09e      	sub	sp, #120	@ 0x78
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2250      	movs	r2, #80	@ 0x50
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 fbd5 	bl	80082b8 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b0e:	2340      	movs	r3, #64	@ 0x40
 8000b10:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fd7a 	bl	8006614 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <I2C1_MspInit+0xa4>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b24:	4a1d      	ldr	r2, [pc, #116]	@ (8000b9c <I2C1_MspInit+0xa4>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <I2C1_MspInit+0xa4>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3e:	2312      	movs	r3, #18
 8000b40:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000b4e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b52:	4619      	mov	r1, r3
 8000b54:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <I2C1_MspInit+0xa8>)
 8000b56:	f003 fe67 	bl	8004828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000b5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b5e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	2312      	movs	r3, #18
 8000b62:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000b70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b74:	4619      	mov	r1, r3
 8000b76:	480a      	ldr	r0, [pc, #40]	@ (8000ba0 <I2C1_MspInit+0xa8>)
 8000b78:	f003 fe56 	bl	8004828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <I2C1_MspInit+0xa4>)
 8000b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b80:	4a06      	ldr	r2, [pc, #24]	@ (8000b9c <I2C1_MspInit+0xa4>)
 8000b82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <I2C1_MspInit+0xa4>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000b94:	bf00      	nop
 8000b96:	3778      	adds	r7, #120	@ 0x78
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <I2C1_MspDeInit+0x30>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb0:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <I2C1_MspDeInit+0x30>)
 8000bb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000bb6:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000bb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bbc:	4806      	ldr	r0, [pc, #24]	@ (8000bd8 <I2C1_MspDeInit+0x34>)
 8000bbe:	f003 ffb5 	bl	8004b2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000bc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <I2C1_MspDeInit+0x34>)
 8000bc8:	f003 ffb0 	bl	8004b2c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48000400 	.word	0x48000400

08000bdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e00a      	b.n	8000c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bee:	f3af 8000 	nop.w
 8000bf2:	4601      	mov	r1, r0
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	b2ca      	uxtb	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbf0      	blt.n	8000bee <_read+0x12>
  }

  return len;
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e009      	b.n	8000c3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fbb7 	bl	80043a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf1      	blt.n	8000c28 <_write+0x12>
  }
  return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_close>:

int _close(int file)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c76:	605a      	str	r2, [r3, #4]
  return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_isatty>:

int _isatty(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <_sbrk+0x5c>)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <_sbrk+0x60>)
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <_sbrk+0x64>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <_sbrk+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d207      	bcs.n	8000cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce8:	f007 fb34 	bl	8008354 <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2001c000 	.word	0x2001c000
 8000d18:	00000400 	.word	0x00000400
 8000d1c:	20000138 	.word	0x20000138
 8000d20:	20003170 	.word	0x20003170

08000d24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d4c:	f7ff ffea 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d76:	f007 faf3 	bl	8008360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d7a:	f7ff fc19 	bl	80005b0 <main>

08000d7e <LoopForever>:

LoopForever:
    b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000d8c:	0801e8a4 	.word	0x0801e8a4
  ldr r2, =_sbss
 8000d90:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000d94:	2000316c 	.word	0x2000316c

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>

08000d9a <VL53L8A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d903      	bls.n	8000db0 <VL53L8A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000da8:	f06f 0301 	mvn.w	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	e003      	b.n	8000db8 <VL53L8A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L8CX_Probe(Instance);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f8f5 	bl	8000fa0 <VL53L8CX_Probe>
 8000db6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000db8:	68fb      	ldr	r3, [r7, #12]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <VL53L8A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d903      	bls.n	8000ddc <VL53L8A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dd4:	f06f 0301 	mvn.w	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e012      	b.n	8000e02 <VL53L8A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ReadID(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <VL53L8A1_RANGING_SENSOR_ReadID+0x48>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	490b      	ldr	r1, [pc, #44]	@ (8000e10 <VL53L8A1_RANGING_SENSOR_ReadID+0x4c>)
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dea:	6839      	ldr	r1, [r7, #0]
 8000dec:	4610      	mov	r0, r2
 8000dee:	4798      	blx	r3
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da03      	bge.n	8000dfe <VL53L8A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000df6:	f06f 0304 	mvn.w	r3, #4
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e001      	b.n	8000e02 <VL53L8A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000148 	.word	0x20000148
 8000e10:	2000013c 	.word	0x2000013c

08000e14 <VL53L8A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d903      	bls.n	8000e2c <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e24:	f06f 0301 	mvn.w	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	e012      	b.n	8000e52 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x48>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	490b      	ldr	r1, [pc, #44]	@ (8000e60 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4798      	blx	r3
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	da03      	bge.n	8000e4e <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000e46:	f06f 0304 	mvn.w	r3, #4
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e001      	b.n	8000e52 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000148 	.word	0x20000148
 8000e60:	2000013c 	.word	0x2000013c

08000e64 <VL53L8A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d903      	bls.n	8000e7c <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e74:	f06f 0301 	mvn.w	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	e012      	b.n	8000ea2 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x48>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	490b      	ldr	r1, [pc, #44]	@ (8000eb0 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4798      	blx	r3
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da03      	bge.n	8000e9e <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000e96:	f06f 0304 	mvn.w	r3, #4
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e001      	b.n	8000ea2 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000148 	.word	0x20000148
 8000eb0:	2000013c 	.word	0x2000013c

08000eb4 <VL53L8A1_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d903      	bls.n	8000ecc <VL53L8A1_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ec4:	f06f 0301 	mvn.w	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	e012      	b.n	8000ef2 <VL53L8A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->GetDistance(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <VL53L8A1_RANGING_SENSOR_GetDistance+0x48>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	490b      	ldr	r1, [pc, #44]	@ (8000f00 <VL53L8A1_RANGING_SENSOR_GetDistance+0x4c>)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000eda:	6839      	ldr	r1, [r7, #0]
 8000edc:	4610      	mov	r0, r2
 8000ede:	4798      	blx	r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da03      	bge.n	8000eee <VL53L8A1_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000ee6:	f06f 0304 	mvn.w	r3, #4
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e001      	b.n	8000ef2 <VL53L8A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000148 	.word	0x20000148
 8000f00:	2000013c 	.word	0x2000013c

08000f04 <VL53L8A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d903      	bls.n	8000f1c <VL53L8A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f14:	f06f 0301 	mvn.w	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	e012      	b.n	8000f42 <VL53L8A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->Start(VL53L8A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <VL53L8A1_RANGING_SENSOR_Start+0x48>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	490b      	ldr	r1, [pc, #44]	@ (8000f50 <VL53L8A1_RANGING_SENSOR_Start+0x4c>)
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4798      	blx	r3
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da03      	bge.n	8000f3e <VL53L8A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000f36:	f06f 0304 	mvn.w	r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	e001      	b.n	8000f42 <VL53L8A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000148 	.word	0x20000148
 8000f50:	2000013c 	.word	0x2000013c

08000f54 <VL53L8A1_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d903      	bls.n	8000f6a <VL53L8A1_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f62:	f06f 0301 	mvn.w	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e011      	b.n	8000f8e <VL53L8A1_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->Stop(VL53L8A1_RANGING_SENSOR_CompObj[Instance]) < 0)
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <VL53L8A1_RANGING_SENSOR_Stop+0x44>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f70:	490a      	ldr	r1, [pc, #40]	@ (8000f9c <VL53L8A1_RANGING_SENSOR_Stop+0x48>)
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4798      	blx	r3
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da03      	bge.n	8000f8a <VL53L8A1_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000f82:	f06f 0304 	mvn.w	r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e001      	b.n	8000f8e <VL53L8A1_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000148 	.word	0x20000148
 8000f9c:	2000013c 	.word	0x2000013c

08000fa0 <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 8000fa8:	2352      	movs	r3, #82	@ 0x52
 8000faa:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L8A1_I2C_INIT;
 8000fac:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <VL53L8CX_Probe+0xf0>)
 8000fae:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L8A1_I2C_DEINIT;
 8000fb0:	4b38      	ldr	r3, [pc, #224]	@ (8001094 <VL53L8CX_Probe+0xf4>)
 8000fb2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L8A1_I2C_WRITEREG;
 8000fb4:	4b38      	ldr	r3, [pc, #224]	@ (8001098 <VL53L8CX_Probe+0xf8>)
 8000fb6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L8A1_I2C_READREG;
 8000fb8:	4b38      	ldr	r3, [pc, #224]	@ (800109c <VL53L8CX_Probe+0xfc>)
 8000fba:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L8A1_GETTICK;
 8000fbc:	4b38      	ldr	r3, [pc, #224]	@ (80010a0 <VL53L8CX_Probe+0x100>)
 8000fbe:	623b      	str	r3, [r7, #32]

  if (VL53L8CX_RegisterBusIO(&(VL53L8CXObj[Instance]), &IOCtx) != VL53L8CX_OK)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	4a36      	ldr	r2, [pc, #216]	@ (80010a4 <VL53L8CX_Probe+0x104>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	f107 020c 	add.w	r2, r7, #12
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fbb0 	bl	800373a <VL53L8CX_RegisterBusIO>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <VL53L8CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000fe0:	f06f 0304 	mvn.w	r3, #4
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe6:	e04d      	b.n	8001084 <VL53L8CX_Probe+0xe4>
  }
  else
  {
    VL53L8A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <VL53L8CX_Probe+0x108>)
 8000fea:	4a30      	ldr	r2, [pc, #192]	@ (80010ac <VL53L8CX_Probe+0x10c>)
 8000fec:	601a      	str	r2, [r3, #0]
    VL53L8A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L8CXObj[Instance]);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80010a4 <VL53L8CX_Probe+0x104>)
 8000ffa:	441a      	add	r2, r3
 8000ffc:	492c      	ldr	r1, [pc, #176]	@ (80010b0 <VL53L8CX_Probe+0x110>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L8CX_ReadID(&(VL53L8CXObj[Instance]), &id) != VL53L8CX_OK)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	4a25      	ldr	r2, [pc, #148]	@ (80010a4 <VL53L8CX_Probe+0x104>)
 8001010:	4413      	add	r3, r2
 8001012:	f107 0208 	add.w	r2, r7, #8
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fc3e 	bl	800389a <VL53L8CX_ReadID>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <VL53L8CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001024:	f06f 0304 	mvn.w	r3, #4
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
 800102a:	e02b      	b.n	8001084 <VL53L8CX_Probe+0xe4>
    }
    else if (id != VL53L8CX_ID)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f24f 020c 	movw	r2, #61452	@ 0xf00c
 8001032:	4293      	cmp	r3, r2
 8001034:	d003      	beq.n	800103e <VL53L8CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001036:	f06f 0306 	mvn.w	r3, #6
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
 800103c:	e022      	b.n	8001084 <VL53L8CX_Probe+0xe4>
    }
    else if (VL53L8A1_RANGING_SENSOR_Drv->Init(VL53L8A1_RANGING_SENSOR_CompObj[Instance]) != VL53L8CX_OK)
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <VL53L8CX_Probe+0x108>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	491a      	ldr	r1, [pc, #104]	@ (80010b0 <VL53L8CX_Probe+0x110>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800104c:	4610      	mov	r0, r2
 800104e:	4798      	blx	r3
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <VL53L8CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001056:	f06f 0304 	mvn.w	r3, #4
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
 800105c:	e012      	b.n	8001084 <VL53L8CX_Probe+0xe4>
    }
    else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance],
 800105e:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <VL53L8CX_Probe+0x108>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4912      	ldr	r1, [pc, #72]	@ (80010b0 <VL53L8CX_Probe+0x110>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800106c:	4911      	ldr	r1, [pc, #68]	@ (80010b4 <VL53L8CX_Probe+0x114>)
 800106e:	4610      	mov	r0, r2
 8001070:	4798      	blx	r3
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <VL53L8CX_Probe+0xe0>
                                                          &VL53L8A1_RANGING_SENSOR_Cap) != VL53L8CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001078:	f06f 0304 	mvn.w	r3, #4
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
 800107e:	e001      	b.n	8001084 <VL53L8CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001086:	4618      	mov	r0, r3
 8001088:	3728      	adds	r7, #40	@ 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	080008cd 	.word	0x080008cd
 8001094:	08000949 	.word	0x08000949
 8001098:	08000999 	.word	0x08000999
 800109c:	080009fd 	.word	0x080009fd
 80010a0:	08000a61 	.word	0x08000a61
 80010a4:	2000015c 	.word	0x2000015c
 80010a8:	20000148 	.word	0x20000148
 80010ac:	20000004 	.word	0x20000004
 80010b0:	2000013c 	.word	0x2000013c
 80010b4:	2000014c 	.word	0x2000014c

080010b8 <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4608      	mov	r0, r1
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	70fb      	strb	r3, [r7, #3]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70bb      	strb	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 80010da:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	8839      	ldrh	r1, [r7, #0]
 80010e6:	f002 fac1 	bl	800366c <VL53L8CX_RdMulti>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	73fb      	strb	r3, [r7, #15]
		status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	210a      	movs	r1, #10
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 fb04 	bl	8003706 <VL53L8CX_WaitMs>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	4313      	orrs	r3, r2
 8001106:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	2bc7      	cmp	r3, #199	@ 0xc7
 800110c:	d904      	bls.n	8001118 <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
			break;
 8001116:	e01a      	b.n	800114e <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2b03      	cmp	r3, #3
 800111c:	d909      	bls.n	8001132 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8001124:	2b7e      	cmp	r3, #126	@ 0x7e
 8001126:	d904      	bls.n	8001132 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800112e:	73fb      	strb	r3, [r7, #15]
			break;
 8001130:	e00d      	b.n	800114e <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	3301      	adds	r3, #1
 8001136:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8001138:	78bb      	ldrb	r3, [r7, #2]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8001142:	7e3b      	ldrb	r3, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	b2db      	uxtb	r3, r3
 8001148:	7f3a      	ldrb	r2, [r7, #28]
 800114a:	429a      	cmp	r2, r3
 800114c:	d1c5      	bne.n	80010da <_vl53l8cx_poll_for_answer+0x22>

	return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f107 020b 	add.w	r2, r7, #11
 800116e:	2106      	movs	r1, #6
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fa39 	bl	80035e8 <VL53L8CX_RdByte>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	4313      	orrs	r3, r2
 800117e:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	da10      	bge.n	80011aa <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f107 020a 	add.w	r2, r7, #10
 800118e:	2107      	movs	r1, #7
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fa29 	bl	80035e8 <VL53L8CX_RdByte>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	4313      	orrs	r3, r2
 800119e:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d111      	bne.n	80011ce <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)VL53L8CX_WaitMs(&(p_dev->platform), 1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2101      	movs	r1, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 faa9 	bl	8003706 <VL53L8CX_WaitMs>
		timeout++;
 80011b4:	89bb      	ldrh	r3, [r7, #12]
 80011b6:	3301      	adds	r3, #1
 80011b8:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 80011ba:	7afb      	ldrb	r3, [r7, #11]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d106      	bne.n	80011d2 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 80011c4:	89bb      	ldrh	r3, [r7, #12]
 80011c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011ca:	d3cd      	bcc.n	8001168 <_vl53l8cx_poll_for_mcu_boot+0x10>
 80011cc:	e002      	b.n	80011d4 <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 80011ce:	bf00      	nop
 80011d0:	e000      	b.n	80011d4 <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 80011d2:	bf00      	nop

   return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0ea      	sub	sp, #424	@ 0x1a8
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011ee:	6018      	str	r0, [r3, #0]
 80011f0:	460a      	mov	r2, r1
 80011f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011f6:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80011fa:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8001202:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001206:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800120a:	4ad9      	ldr	r2, [pc, #868]	@ (8001570 <_vl53l8cx_send_offset_data+0x390>)
 800120c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001210:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8001214:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001218:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800121c:	4ad5      	ldr	r2, [pc, #852]	@ (8001574 <_vl53l8cx_send_offset_data+0x394>)
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8001226:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800122a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001234:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001238:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8001240:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001244:	4619      	mov	r1, r3
 8001246:	f007 f8b2 	bl	80083ae <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 800124a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800124e:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b10      	cmp	r3, #16
 8001256:	f040 8122 	bne.w	800149e <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800125a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800125e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 8001268:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800126c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001270:	cb03      	ldmia	r3!, {r0, r1}
 8001272:	6010      	str	r0, [r2, #0]
 8001274:	6051      	str	r1, [r2, #4]
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001276:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800127a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001284:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001288:	4618      	mov	r0, r3
 800128a:	f002 fa06 	bl	800369a <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800128e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001292:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 800129c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80012a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a4:	4618      	mov	r0, r3
 80012a6:	f007 f882 	bl	80083ae <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 80012aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	2280      	movs	r2, #128	@ 0x80
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 f875 	bl	80083ae <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80012ca:	e0ac      	b.n	8001426 <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80012d2:	e09c      	b.n	800140e <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 80012d4:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80012d8:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	005a      	lsls	r2, r3, #1
 80012e2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 80012ee:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80012f2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	1c59      	adds	r1, r3, #1
 80012fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001306:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800130a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 800130c:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001310:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	3304      	adds	r3, #4
 800131a:	0059      	lsls	r1, r3, #1
 800131c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001324:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001328:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 800132a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800132e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	f103 0109 	add.w	r1, r3, #9
 800133c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001344:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001348:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800134a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800134e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8001356:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001358:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800135c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8001364:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001368:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	005a      	lsls	r2, r3, #1
 8001372:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001376:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800137a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800137e:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8001380:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001384:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001394:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001398:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800139c:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800139e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80013a2:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80013a6:	00d2      	lsls	r2, r2, #3
 80013a8:	440a      	add	r2, r1
 80013aa:	3204      	adds	r2, #4
 80013ac:	0051      	lsls	r1, r2, #1
 80013ae:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80013b2:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80013b6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80013ba:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 80013bc:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80013c0:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80013c4:	00d2      	lsls	r2, r2, #3
 80013c6:	440a      	add	r2, r1
 80013c8:	0052      	lsls	r2, r2, #1
 80013ca:	f102 0109 	add.w	r1, r2, #9
 80013ce:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80013d2:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80013d6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80013da:	4413      	add	r3, r2
                                  /(int16_t)4;
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <_vl53l8cx_send_offset_data+0x202>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 80013e6:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80013ea:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	441a      	add	r2, r3
 80013f2:	b209      	sxth	r1, r1
 80013f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80013f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80013fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8001400:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8001404:	b2db      	uxtb	r3, r3
 8001406:	3301      	adds	r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800140e:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8001412:	2b03      	cmp	r3, #3
 8001414:	f77f af5e 	ble.w	80012d4 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8001418:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3301      	adds	r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8001426:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800142a:	2b03      	cmp	r3, #3
 800142c:	f77f af4e 	ble.w	80012cc <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	3320      	adds	r3, #32
 8001436:	2260      	movs	r2, #96	@ 0x60
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f006 ff3c 	bl	80082b8 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8001440:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001444:	3340      	adds	r3, #64	@ 0x40
 8001446:	22c0      	movs	r2, #192	@ 0xc0
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f006 ff34 	bl	80082b8 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8001450:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001454:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800145e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8001462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001466:	4618      	mov	r0, r3
 8001468:	f006 ffa1 	bl	80083ae <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 800146c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001470:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800147a:	f107 0118 	add.w	r1, r7, #24
 800147e:	2280      	movs	r2, #128	@ 0x80
 8001480:	4618      	mov	r0, r3
 8001482:	f006 ff94 	bl	80083ae <memcpy>
		range_grid, sizeof(range_grid));
            VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001486:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800148a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001494:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001498:	4618      	mov	r0, r3
 800149a:	f002 f8fe 	bl	800369a <VL53L8CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800149e:	2300      	movs	r3, #0
 80014a0:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80014a4:	e01b      	b.n	80014de <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80014a6:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80014aa:	f103 0208 	add.w	r2, r3, #8
 80014ae:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80014b2:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80014b6:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80014ba:	6809      	ldr	r1, [r1, #0]
 80014bc:	440a      	add	r2, r1
 80014be:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 80014c2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80014c6:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	460a      	mov	r2, r1
 80014d0:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80014d4:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80014d8:	3301      	adds	r3, #1
 80014da:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80014de:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80014e2:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 80014e6:	d3de      	bcc.n	80014a6 <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80014e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80014ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 80014f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80014fa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80014fe:	cb03      	ldmia	r3!, {r0, r1}
 8001500:	6010      	str	r0, [r2, #0]
 8001502:	6051      	str	r1, [r2, #4]
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8001504:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001508:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001512:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800151c:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8001520:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8001524:	f002 f88b 	bl	800363e <VL53L8CX_WrMulti>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001530:	4313      	orrs	r3, r2
 8001532:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8001536:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800153a:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 800153e:	2303      	movs	r3, #3
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	23ff      	movs	r3, #255	@ 0xff
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800154a:	2201      	movs	r2, #1
 800154c:	2104      	movs	r1, #4
 800154e:	6800      	ldr	r0, [r0, #0]
 8001550:	f7ff fdb2 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800155c:	4313      	orrs	r3, r2
 800155e:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001562:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8001566:	4618      	mov	r0, r3
 8001568:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	08008e5c 	.word	0x08008e5c
 8001574:	08008e64 	.word	0x08008e64

08001578 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0ca      	sub	sp, #296	@ 0x128
 800157c:	af02      	add	r7, sp, #8
 800157e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001582:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001586:	6018      	str	r0, [r3, #0]
 8001588:	460a      	mov	r2, r1
 800158a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800158e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8001592:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800159a:	4a9a      	ldr	r2, [pc, #616]	@ (8001804 <_vl53l8cx_send_xtalk_data+0x28c>)
 800159c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80015a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80015a8:	4a97      	ldr	r2, [pc, #604]	@ (8001808 <_vl53l8cx_send_xtalk_data+0x290>)
 80015aa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80015ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80015b6:	4b95      	ldr	r3, [pc, #596]	@ (800180c <_vl53l8cx_send_xtalk_data+0x294>)
 80015b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80015bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 80015ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80015d8:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80015dc:	4619      	mov	r1, r3
 80015de:	f006 fee6 	bl	80083ae <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 80015e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015e6:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b10      	cmp	r3, #16
 80015ee:	f040 80d2 	bne.w	8001796 <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80015f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8001600:	461a      	mov	r2, r3
 8001602:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001606:	cb03      	ldmia	r3!, {r0, r1}
 8001608:	6010      	str	r0, [r2, #0]
 800160a:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 800160c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001610:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 800161a:	461a      	mov	r2, r3
 800161c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001620:	cb03      	ldmia	r3!, {r0, r1}
 8001622:	6010      	str	r0, [r2, #0]
 8001624:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001626:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800162a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001634:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001638:	4618      	mov	r0, r3
 800163a:	f002 f82e 	bl	800369a <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 800163e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001642:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001654:	4618      	mov	r0, r3
 8001656:	f006 feaa 	bl	80083ae <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800165a:	2300      	movs	r3, #0
 800165c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001660:	e05d      	b.n	800171e <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001668:	e04e      	b.n	8001708 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800166a:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 800166e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	005a      	lsls	r2, r3, #1
 8001678:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800167c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001680:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001684:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001688:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	1c59      	adds	r1, r3, #1
 8001694:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001698:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800169c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016a0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80016a2:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80016a6:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3304      	adds	r3, #4
 80016b0:	0059      	lsls	r1, r3, #1
 80016b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016be:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80016c0:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80016c4:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	f103 0109 	add.w	r1, r3, #9
 80016d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016de:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80016e0:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80016e4:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80016ec:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80016ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016f2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80016fa:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001708:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800170c:	2b03      	cmp	r3, #3
 800170e:	ddac      	ble.n	800166a <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8001710:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800171e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001722:	2b03      	cmp	r3, #3
 8001724:	dd9d      	ble.n	8001662 <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	3340      	adds	r3, #64	@ 0x40
 800172c:	22c0      	movs	r2, #192	@ 0xc0
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f006 fdc1 	bl	80082b8 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8001736:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800173a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 8001744:	f107 0108 	add.w	r1, r7, #8
 8001748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800174c:	4618      	mov	r0, r3
 800174e:	f006 fe2e 	bl	80083ae <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001752:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001756:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001760:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001764:	4618      	mov	r0, r3
 8001766:	f001 ff98 	bl	800369a <VL53L8CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800176a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800176e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8001778:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800177c:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800177e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001782:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 800178c:	2204      	movs	r2, #4
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f006 fd91 	bl	80082b8 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8001796:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800179a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800179e:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 80017a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 80017ae:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80017b2:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 80017b6:	f001 ff42 	bl	800363e <VL53L8CX_WrMulti>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80017c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017cc:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 80017d0:	2303      	movs	r3, #3
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	23ff      	movs	r3, #255	@ 0xff
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80017dc:	2201      	movs	r2, #1
 80017de:	2104      	movs	r1, #4
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	f7ff fc69 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80017ee:	4313      	orrs	r3, r2
 80017f0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80017f4:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	08008e6c 	.word	0x08008e6c
 8001808:	08008e74 	.word	0x08008e74
 800180c:	0001fca0 	.word	0x0001fca0

08001810 <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af02      	add	r7, sp, #8
 8001816:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 800181c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001820:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8001822:	2301      	movs	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
	uint32_t crc_checksum = 0x00;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a80      	ldr	r2, [pc, #512]	@ (8001a30 <vl53l8cx_init+0x220>)
 800182e:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a80      	ldr	r2, [pc, #512]	@ (8001a34 <vl53l8cx_init+0x224>)
 8001834:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2abc 	strb.w	r2, [r3, #2748]	@ 0xabc

	/* SW reboot sequence */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fee3 	bl	8003612 <VL53L8CX_WrByte>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	4313      	orrs	r3, r2
 8001854:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2204      	movs	r2, #4
 800185a:	2109      	movs	r1, #9
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fed8 	bl	8003612 <VL53L8CX_WrByte>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	4313      	orrs	r3, r2
 800186a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2240      	movs	r2, #64	@ 0x40
 8001870:	210f      	movs	r1, #15
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fecd 	bl	8003612 <VL53L8CX_WrByte>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	4313      	orrs	r3, r2
 8001880:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2203      	movs	r2, #3
 8001886:	210a      	movs	r1, #10
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fec2 	bl	8003612 <VL53L8CX_WrByte>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	4313      	orrs	r3, r2
 8001896:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f107 0216 	add.w	r2, r7, #22
 800189e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fea0 	bl	80035e8 <VL53L8CX_RdByte>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	210c      	movs	r1, #12
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 feaa 	bl	8003612 <VL53L8CX_WrByte>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f240 1101 	movw	r1, #257	@ 0x101
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 fe9e 	bl	8003612 <VL53L8CX_WrByte>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	4313      	orrs	r3, r2
 80018de:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 fe92 	bl	8003612 <VL53L8CX_WrByte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001900:	4618      	mov	r0, r3
 8001902:	f001 fe86 	bl	8003612 <VL53L8CX_WrByte>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	4313      	orrs	r3, r2
 800190e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fe7a 	bl	8003612 <VL53L8CX_WrByte>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	4313      	orrs	r3, r2
 8001926:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fe6e 	bl	8003612 <VL53L8CX_WrByte>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	4313      	orrs	r3, r2
 800193e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001948:	4618      	mov	r0, r3
 800194a:	f001 fe62 	bl	8003612 <VL53L8CX_WrByte>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	4313      	orrs	r3, r2
 8001956:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f240 1103 	movw	r1, #259	@ 0x103
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fe56 	bl	8003612 <VL53L8CX_WrByte>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	4313      	orrs	r3, r2
 800196e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	210c      	movs	r1, #12
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fe4b 	bl	8003612 <VL53L8CX_WrByte>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	4313      	orrs	r3, r2
 8001984:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2243      	movs	r2, #67	@ 0x43
 800198a:	210f      	movs	r1, #15
 800198c:	4618      	mov	r0, r3
 800198e:	f001 fe40 	bl	8003612 <VL53L8CX_WrByte>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	4313      	orrs	r3, r2
 800199a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 1);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2101      	movs	r1, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 feb0 	bl	8003706 <VL53L8CX_WaitMs>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2240      	movs	r2, #64	@ 0x40
 80019b4:	210f      	movs	r1, #15
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fe2b 	bl	8003612 <VL53L8CX_WrByte>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	210a      	movs	r1, #10
 80019cc:	4618      	mov	r0, r3
 80019ce:	f001 fe20 	bl	8003612 <VL53L8CX_WrByte>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	4313      	orrs	r3, r2
 80019da:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 100);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2164      	movs	r1, #100	@ 0x64
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fe90 	bl	8003706 <VL53L8CX_WaitMs>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fe0a 	bl	8003612 <VL53L8CX_WrByte>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	23ff      	movs	r3, #255	@ 0xff
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2306      	movs	r3, #6
 8001a12:	2200      	movs	r2, #0
 8001a14:	2101      	movs	r1, #1
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fb4e 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 8309 	bne.w	8002040 <vl53l8cx_init+0x830>
 8001a2e:	e003      	b.n	8001a38 <vl53l8cx_init+0x228>
 8001a30:	0801e514 	.word	0x0801e514
 8001a34:	0801e148 	.word	0x0801e148
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	210e      	movs	r1, #14
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 fde7 	bl	8003612 <VL53L8CX_WrByte>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 fddb 	bl	8003612 <VL53L8CX_WrByte>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fdcf 	bl	8003612 <VL53L8CX_WrByte>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x01);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	2106      	movs	r1, #6
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fdc4 	bl	8003612 <VL53L8CX_WrByte>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 8001a94:	2304      	movs	r3, #4
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	23ff      	movs	r3, #255	@ 0xff
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2321      	movs	r3, #33	@ 0x21
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fb08 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 fda9 	bl	8003612 <VL53L8CX_WrByte>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f107 0216 	add.w	r2, r7, #22
 8001ad0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fd87 	bl	80035e8 <VL53L8CX_RdByte>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	210c      	movs	r1, #12
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fd91 	bl	8003612 <VL53L8CX_WrByte>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fd85 	bl	8003612 <VL53L8CX_WrByte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f240 1101 	movw	r1, #257	@ 0x101
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fd79 	bl	8003612 <VL53L8CX_WrByte>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fd6d 	bl	8003612 <VL53L8CX_WrByte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 fd61 	bl	8003612 <VL53L8CX_WrByte>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 fd55 	bl	8003612 <VL53L8CX_WrByte>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 fd49 	bl	8003612 <VL53L8CX_WrByte>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fd3d 	bl	8003612 <VL53L8CX_WrByte>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f240 1103 	movw	r1, #259	@ 0x103
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fd31 	bl	8003612 <VL53L8CX_WrByte>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f244 010f 	movw	r1, #16399	@ 0x400f
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 fd25 	bl	8003612 <VL53L8CX_WrByte>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2243      	movs	r2, #67	@ 0x43
 8001bd6:	f240 211a 	movw	r1, #538	@ 0x21a
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fd19 	bl	8003612 <VL53L8CX_WrByte>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2203      	movs	r2, #3
 8001bee:	f240 211a 	movw	r1, #538	@ 0x21a
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fd0d 	bl	8003612 <VL53L8CX_WrByte>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f240 211a 	movw	r1, #538	@ 0x21a
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fd01 	bl	8003612 <VL53L8CX_WrByte>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f240 211a 	movw	r1, #538	@ 0x21a
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 fcf5 	bl	8003612 <VL53L8CX_WrByte>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f240 2119 	movw	r1, #537	@ 0x219
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 fce9 	bl	8003612 <VL53L8CX_WrByte>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f240 211b 	movw	r1, #539	@ 0x21b
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fcdd 	bl	8003612 <VL53L8CX_WrByte>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fcd1 	bl	8003612 <VL53L8CX_WrByte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f107 0216 	add.w	r2, r7, #22
 8001c80:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fcaf 	bl	80035e8 <VL53L8CX_RdByte>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fcb8 	bl	8003612 <VL53L8CX_WrByte>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L8CX */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2209      	movs	r2, #9
 8001cb0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 fcac 	bl	8003612 <VL53L8CX_WrByte>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cca:	4ade      	ldr	r2, [pc, #888]	@ (8002044 <vl53l8cx_init+0x834>)
 8001ccc:	2100      	movs	r1, #0
 8001cce:	f001 fcb6 	bl	800363e <VL53L8CX_WrMulti>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	220a      	movs	r2, #10
 8001ce0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 fc94 	bl	8003612 <VL53L8CX_WrByte>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cfa:	4ad3      	ldr	r2, [pc, #844]	@ (8002048 <vl53l8cx_init+0x838>)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f001 fc9e 	bl	800363e <VL53L8CX_WrMulti>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	220b      	movs	r2, #11
 8001d10:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 fc7c 	bl	8003612 <VL53L8CX_WrByte>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001d2a:	4ac8      	ldr	r2, [pc, #800]	@ (800204c <vl53l8cx_init+0x83c>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	f001 fc86 	bl	800363e <VL53L8CX_WrMulti>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 fc64 	bl	8003612 <VL53L8CX_WrByte>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 fc58 	bl	8003612 <VL53L8CX_WrByte>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x03);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2203      	movs	r2, #3
 8001d70:	2106      	movs	r1, #6
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 fc4d 	bl	8003612 <VL53L8CX_WrByte>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WaitMs(&(p_dev->platform), 5);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2105      	movs	r1, #5
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fcbd 	bl	8003706 <VL53L8CX_WaitMs>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fc37 	bl	8003612 <VL53L8CX_WrByte>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f107 0216 	add.w	r2, r7, #22
 8001db4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 fc15 	bl	80035e8 <VL53L8CX_RdByte>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	210c      	movs	r1, #12
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fc1f 	bl	8003612 <VL53L8CX_WrByte>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 fc13 	bl	8003612 <VL53L8CX_WrByte>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fc07 	bl	8003612 <VL53L8CX_WrByte>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f240 1115 	movw	r1, #277	@ 0x115
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 fbfb 	bl	8003612 <VL53L8CX_WrByte>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2242      	movs	r2, #66	@ 0x42
 8001e2a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 fbef 	bl	8003612 <VL53L8CX_WrByte>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f240 1117 	movw	r1, #279	@ 0x117
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fbe3 	bl	8003612 <VL53L8CX_WrByte>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	210b      	movs	r1, #11
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fbd8 	bl	8003612 <VL53L8CX_WrByte>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f107 0216 	add.w	r2, r7, #22
 8001e72:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 fbb6 	bl	80035e8 <VL53L8CX_RdByte>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	210c      	movs	r1, #12
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fbc0 	bl	8003612 <VL53L8CX_WrByte>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	210b      	movs	r1, #11
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 fbb5 	bl	8003612 <VL53L8CX_WrByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff f950 	bl	8001158 <_vl53l8cx_poll_for_mcu_boot>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 80c9 	bne.w	800205c <vl53l8cx_init+0x84c>
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fb9d 	bl	8003612 <VL53L8CX_WrByte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	75fb      	strb	r3, [r7, #23]

	/* Firmware checksum */
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8001ee2:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 4);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8001eea:	2304      	movs	r3, #4
 8001eec:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8001ef0:	f001 fbbc 	bl	800366c <VL53L8CX_RdMulti>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	75fb      	strb	r3, [r7, #23]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, 4);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001f04:	2104      	movs	r1, #4
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fbc7 	bl	800369a <VL53L8CX_SwapBuffer>
	memcpy((uint8_t*)&crc_checksum, &(p_dev->temp_buffer[0]), 4);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60bb      	str	r3, [r7, #8]
	if (crc_checksum != (uint32_t)0xc0b6c9e)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4a4d      	ldr	r2, [pc, #308]	@ (8002050 <vl53l8cx_init+0x840>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <vl53l8cx_init+0x718>
	{
		status |= VL53L8CX_STATUS_FW_CHECKSUM_FAIL;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	f043 0305 	orr.w	r3, r3, #5
 8001f24:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8001f26:	e09a      	b.n	800205e <vl53l8cx_init+0x84e>
	}

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	2328      	movs	r3, #40	@ 0x28
 8001f2c:	4a49      	ldr	r2, [pc, #292]	@ (8002054 <vl53l8cx_init+0x844>)
 8001f2e:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8001f32:	f001 fb84 	bl	800363e <VL53L8CX_WrMulti>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 8001f40:	2302      	movs	r3, #2
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	23ff      	movs	r3, #255	@ 0xff
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2104      	movs	r1, #4
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff f8b1 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8001f60:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8001f68:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8001f6c:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8001f70:	f001 fb7c 	bl	800366c <VL53L8CX_RdMulti>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f103 0020 	add.w	r0, r3, #32
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001f8a:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f006 fa0d 	bl	80083ae <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8001f94:	2110      	movs	r1, #16
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff f922 	bl	80011e0 <_vl53l8cx_send_offset_data>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001fac:	4a2a      	ldr	r2, [pc, #168]	@ (8002058 <vl53l8cx_init+0x848>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f006 f9f9 	bl	80083ae <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fada 	bl	8001578 <_vl53l8cx_send_xtalk_data>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2c34,
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8001fd8:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8001fdc:	f001 fb2f 	bl	800363e <VL53L8CX_WrMulti>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8001fea:	2303      	movs	r3, #3
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	23ff      	movs	r3, #255	@ 0xff
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff f85c 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	4313      	orrs	r3, r2
 8002008:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 800200a:	f107 0110 	add.w	r1, r7, #16
 800200e:	2304      	movs	r3, #4
 8002010:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f001 f87f 	bl	8003118 <vl53l8cx_dci_write_data>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	4313      	orrs	r3, r2
 8002022:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002024:	f107 010c 	add.w	r1, r7, #12
 8002028:	2304      	movs	r3, #4
 800202a:	f64d 1264 	movw	r2, #55652	@ 0xd964
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f001 f872 	bl	8003118 <vl53l8cx_dci_write_data>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	4313      	orrs	r3, r2
 800203c:	75fb      	strb	r3, [r7, #23]
 800203e:	e00e      	b.n	800205e <vl53l8cx_init+0x84e>
		goto exit;
 8002040:	bf00      	nop
 8002042:	e00c      	b.n	800205e <vl53l8cx_init+0x84e>
 8002044:	08009148 	.word	0x08009148
 8002048:	08011148 	.word	0x08011148
 800204c:	08019148 	.word	0x08019148
 8002050:	0c0b6c9e 	.word	0x0c0b6c9e
 8002054:	0801e81c 	.word	0x0801e81c
 8002058:	0801e514 	.word	0x0801e514
		goto exit;
 800205c:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <vl53l8cx_set_i2c_address>:

uint8_t vl53l8cx_set_i2c_address(
		VL53L8CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fac6 	bl	8003612 <VL53L8CX_WrByte>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	4313      	orrs	r3, r2
 800208e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	b29b      	uxth	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	2104      	movs	r1, #4
 800209e:	f001 fab8 	bl	8003612 <VL53L8CX_WrByte>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	801a      	strh	r2, [r3, #0]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 faa9 	bl	8003612 <VL53L8CX_WrByte>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	73fb      	strb	r3, [r7, #15]

	return status;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <vl53l8cx_get_power_mode>:

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fa91 	bl	8003612 <VL53L8CX_WrByte>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f107 020e 	add.w	r2, r7, #14
 8002100:	2109      	movs	r1, #9
 8002102:	4618      	mov	r0, r3
 8002104:	f001 fa70 	bl	80035e8 <VL53L8CX_RdByte>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	4313      	orrs	r3, r2
 8002110:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d005      	beq.n	8002124 <vl53l8cx_get_power_mode+0x50>
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11a      	bne.n	8002152 <vl53l8cx_get_power_mode+0x7e>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
			break;
 8002122:	e01c      	b.n	800215e <vl53l8cx_get_power_mode+0x8a>
		case 0x2:
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &tmp);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f107 020e 	add.w	r2, r7, #14
 800212a:	210f      	movs	r1, #15
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fa5b 	bl	80035e8 <VL53L8CX_RdByte>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	4313      	orrs	r3, r2
 800213a:	73fb      	strb	r3, [r7, #15]
			if(tmp == 0x43)
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	2b43      	cmp	r3, #67	@ 0x43
 8002140:	d103      	bne.n	800214a <vl53l8cx_get_power_mode+0x76>
			{
				*p_power_mode = VL53L8CX_POWER_MODE_DEEP_SLEEP;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]
			else
			{
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
			}

			break;
 8002148:	e009      	b.n	800215e <vl53l8cx_get_power_mode+0x8a>
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
			break;
 8002150:	e005      	b.n	800215e <vl53l8cx_get_power_mode+0x8a>
		default:
			*p_power_mode = 0;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 8002158:	23ff      	movs	r3, #255	@ 0xff
 800215a:	73fb      	strb	r3, [r7, #15]
			break;
 800215c:	bf00      	nop
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fa53 	bl	8003612 <VL53L8CX_WrByte>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	4313      	orrs	r3, r2
 8002174:	73fb      	strb	r3, [r7, #15]

	return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, stored_mode, status = VL53L8CX_STATUS_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 8002190:	f107 030e 	add.w	r3, r7, #14
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ff9c 	bl	80020d4 <vl53l8cx_get_power_mode>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 80021a6:	7bbb      	ldrb	r3, [r7, #14]
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	f000 80c0 	beq.w	8002330 <vl53l8cx_set_power_mode+0x1b0>
	{
	switch(power_mode)
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d07a      	beq.n	80022ac <vl53l8cx_set_power_mode+0x12c>
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f300 80aa 	bgt.w	8002310 <vl53l8cx_set_power_mode+0x190>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d04e      	beq.n	800225e <vl53l8cx_set_power_mode+0xde>
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	f040 80a5 	bne.w	8002310 <vl53l8cx_set_power_mode+0x190>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 fa1f 	bl	8003612 <VL53L8CX_WrByte>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	4313      	orrs	r3, r2
 80021dc:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	2109      	movs	r1, #9
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fa14 	bl	8003612 <VL53L8CX_WrByte>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &stored_mode);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f107 020d 	add.w	r2, r7, #13
 80021fa:	210f      	movs	r1, #15
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 f9f3 	bl	80035e8 <VL53L8CX_RdByte>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	4313      	orrs	r3, r2
 800220a:	73fb      	strb	r3, [r7, #15]
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 800220c:	7b7b      	ldrb	r3, [r7, #13]
 800220e:	2b43      	cmp	r3, #67	@ 0x43
 8002210:	d10a      	bne.n	8002228 <vl53l8cx_set_power_mode+0xa8>
			{
				status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2240      	movs	r2, #64	@ 0x40
 8002216:	210f      	movs	r1, #15
 8002218:	4618      	mov	r0, r3
 800221a:	f001 f9fa 	bl	8003612 <VL53L8CX_WrByte>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	4313      	orrs	r3, r2
 8002226:	73fb      	strb	r3, [r7, #15]
			}
			status |= _vl53l8cx_poll_for_answer(
 8002228:	2301      	movs	r3, #1
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2301      	movs	r3, #1
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2306      	movs	r3, #6
 8002232:	2200      	movs	r2, #0
 8002234:	2101      	movs	r1, #1
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe ff3e 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	4313      	orrs	r3, r2
 8002244:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8002246:	7b7b      	ldrb	r3, [r7, #13]
 8002248:	2b43      	cmp	r3, #67	@ 0x43
 800224a:	d164      	bne.n	8002316 <vl53l8cx_set_power_mode+0x196>
			{
				status |= vl53l8cx_init(p_dev);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff fadf 	bl	8001810 <vl53l8cx_init>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	4313      	orrs	r3, r2
 800225a:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800225c:	e05b      	b.n	8002316 <vl53l8cx_set_power_mode+0x196>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002266:	4618      	mov	r0, r3
 8002268:	f001 f9d3 	bl	8003612 <VL53L8CX_WrByte>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4313      	orrs	r3, r2
 8002274:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	2109      	movs	r1, #9
 800227c:	4618      	mov	r0, r3
 800227e:	f001 f9c8 	bl	8003612 <VL53L8CX_WrByte>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	4313      	orrs	r3, r2
 800228a:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 800228c:	2300      	movs	r3, #0
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	2301      	movs	r3, #1
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2306      	movs	r3, #6
 8002296:	2200      	movs	r2, #0
 8002298:	2101      	movs	r1, #1
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe ff0c 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 80022aa:	e035      	b.n	8002318 <vl53l8cx_set_power_mode+0x198>

		case VL53L8CX_POWER_MODE_DEEP_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80022b4:	4618      	mov	r0, r3
 80022b6:	f001 f9ac 	bl	8003612 <VL53L8CX_WrByte>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	2109      	movs	r1, #9
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 f9a1 	bl	8003612 <VL53L8CX_WrByte>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 80022da:	2300      	movs	r3, #0
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	2301      	movs	r3, #1
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2306      	movs	r3, #6
 80022e4:	2200      	movs	r2, #0
 80022e6:	2101      	movs	r1, #1
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe fee5 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	73fb      	strb	r3, [r7, #15]
					p_dev, 1, 0, 0x06, 0x01, 0);
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2243      	movs	r2, #67	@ 0x43
 80022fc:	210f      	movs	r1, #15
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 f987 	bl	8003612 <VL53L8CX_WrByte>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4313      	orrs	r3, r2
 800230c:	73fb      	strb	r3, [r7, #15]
			break;
 800230e:	e003      	b.n	8002318 <vl53l8cx_set_power_mode+0x198>

		default:
			status = VL53L8CX_STATUS_ERROR;
 8002310:	23ff      	movs	r3, #255	@ 0xff
 8002312:	73fb      	strb	r3, [r7, #15]
			break;
 8002314:	e000      	b.n	8002318 <vl53l8cx_set_power_mode+0x198>
			break;
 8002316:	bf00      	nop
		}
		status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f976 	bl	8003612 <VL53L8CX_WrByte>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	4313      	orrs	r3, r2
 800232e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b09c      	sub	sp, #112	@ 0x70
 8002340:	af02      	add	r7, sp, #8
 8002342:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800234a:	2300      	movs	r3, #0
 800234c:	653b      	str	r3, [r7, #80]	@ 0x50
 800234e:	2300      	movs	r3, #0
 8002350:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8002352:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002356:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 8002358:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fcaa 	bl	8002cb8 <vl53l8cx_get_resolution>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800236c:	4313      	orrs	r3, r2
 800236e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	22ff      	movs	r2, #255	@ 0xff
 800237c:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800237e:	4bb8      	ldr	r3, [pc, #736]	@ (8002660 <vl53l8cx_start_ranging+0x324>)
 8002380:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 800238a:	4bb6      	ldr	r3, [pc, #728]	@ (8002664 <vl53l8cx_start_ranging+0x328>)
 800238c:	f107 040c 	add.w	r4, r7, #12
 8002390:	461d      	mov	r5, r3
 8002392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800239e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80023a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a4:	3308      	adds	r3, #8
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 80023a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023aa:	3310      	adds	r3, #16
 80023ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80023ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023b0:	3320      	adds	r3, #32
 80023b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80023b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023b6:	3340      	adds	r3, #64	@ 0x40
 80023b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 80023ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023bc:	3380      	adds	r3, #128	@ 0x80
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80023c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80023c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80023c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80023d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80023d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80023e4:	e073      	b.n	80024ce <vl53l8cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 80023e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	3368      	adds	r3, #104	@ 0x68
 80023ec:	443b      	add	r3, r7
 80023ee:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d067      	beq.n	80024c6 <vl53l8cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 80023f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	3368      	adds	r3, #104	@ 0x68
 80023fe:	443b      	add	r3, r7
 8002400:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8002404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d057      	beq.n	80024c6 <vl53l8cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8002416:	f107 020c 	add.w	r2, r7, #12
 800241a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8002422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d03a      	beq.n	80024a6 <vl53l8cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8002430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d833      	bhi.n	80024a6 <vl53l8cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800243e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002440:	885b      	ldrh	r3, [r3, #2]
 8002442:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8002446:	4293      	cmp	r3, r2
 8002448:	d910      	bls.n	800246c <vl53l8cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 800244a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800244c:	885b      	ldrh	r3, [r3, #2]
 800244e:	f645 028f 	movw	r2, #22671	@ 0x588f
 8002452:	4293      	cmp	r3, r2
 8002454:	d80a      	bhi.n	800246c <vl53l8cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8002456:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	b299      	uxth	r1, r3
 8002460:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002462:	8813      	ldrh	r3, [r2, #0]
 8002464:	f361 130f 	bfi	r3, r1, #4, #12
 8002468:	8013      	strh	r3, [r2, #0]
 800246a:	e009      	b.n	8002480 <vl53l8cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 800246c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002474:	b299      	uxth	r1, r3
 8002476:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002478:	8813      	ldrh	r3, [r2, #0]
 800247a:	f361 130f 	bfi	r3, r1, #4, #12
 800247e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	4611      	mov	r1, r2
 8002490:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002492:	8812      	ldrh	r2, [r2, #0]
 8002494:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002498:	b292      	uxth	r2, r2
 800249a:	fb01 f202 	mul.w	r2, r1, r2
 800249e:	441a      	add	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	615a      	str	r2, [r3, #20]
 80024a4:	e009      	b.n	80024ba <vl53l8cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80024ac:	8812      	ldrh	r2, [r2, #0]
 80024ae:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80024b2:	b292      	uxth	r2, r2
 80024b4:	441a      	add	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	1d1a      	adds	r2, r3, #4
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	e000      	b.n	80024c8 <vl53l8cx_start_ranging+0x18c>
			continue;
 80024c6:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80024c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ca:	3301      	adds	r3, #1
 80024cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024d0:	2b0b      	cmp	r3, #11
 80024d2:	d988      	bls.n	80023e6 <vl53l8cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f103 0218 	add.w	r2, r3, #24
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	615a      	str	r2, [r3, #20]

	status |= vl53l8cx_dci_write_data(p_dev,
 80024e0:	f107 010c 	add.w	r1, r7, #12
 80024e4:	2330      	movs	r3, #48	@ 0x30
 80024e6:	f64d 1280 	movw	r2, #55680	@ 0xd980
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fe14 	bl	8003118 <vl53l8cx_dci_write_data>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8002504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002506:	3301      	adds	r3, #1
 8002508:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 800250a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800250e:	2308      	movs	r3, #8
 8002510:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fdff 	bl	8003118 <vl53l8cx_dci_write_data>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002522:	4313      	orrs	r3, r2
 8002524:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 8002528:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800252c:	2310      	movs	r3, #16
 800252e:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fdf0 	bl	8003118 <vl53l8cx_dci_write_data>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002540:	4313      	orrs	r3, r2
 8002542:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800254e:	4618      	mov	r0, r3
 8002550:	f001 f85f 	bl	8003612 <VL53L8CX_WrByte>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800255c:	4313      	orrs	r3, r2
 800255e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2205      	movs	r2, #5
 8002566:	2109      	movs	r1, #9
 8002568:	4618      	mov	r0, r3
 800256a:	f001 f852 	bl	8003612 <VL53L8CX_WrByte>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002576:	4313      	orrs	r3, r2
 8002578:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002584:	4618      	mov	r0, r3
 8002586:	f001 f844 	bl	8003612 <VL53L8CX_WrByte>
 800258a:	4603      	mov	r3, r0
 800258c:	461a      	mov	r2, r3
 800258e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002592:	4313      	orrs	r3, r2
 8002594:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800259e:	2304      	movs	r3, #4
 80025a0:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 80025a4:	f001 f84b 	bl	800363e <VL53L8CX_WrMulti>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80025b6:	2303      	movs	r3, #3
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	23ff      	movs	r3, #255	@ 0xff
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80025c2:	2201      	movs	r2, #1
 80025c4:	2104      	movs	r1, #4
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fd76 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 80025e0:	230c      	movs	r3, #12
 80025e2:	f245 4240 	movw	r2, #21568	@ 0x5440
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fd0c 	bl	8003004 <vl53l8cx_dci_read_data>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8002608:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	429a      	cmp	r2, r3
 8002614:	d002      	beq.n	800261c <vl53l8cx_start_ranging+0x2e0>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8002616:	23ff      	movs	r3, #255	@ 0xff
 8002618:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8002622:	2308      	movs	r3, #8
 8002624:	f24e 02c4 	movw	r2, #57540	@ 0xe0c4
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fceb 	bl	8003004 <vl53l8cx_dci_read_data>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002636:	4313      	orrs	r3, r2
 8002638:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3516 	ldrb.w	r3, [r3, #1302]	@ 0x516
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <vl53l8cx_start_ranging+0x316>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 8002646:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800264a:	f043 0303 	orr.w	r3, r3, #3
 800264e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8002652:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002656:	4618      	mov	r0, r3
 8002658:	3768      	adds	r7, #104	@ 0x68
 800265a:	46bd      	mov	sp, r7
 800265c:	bdb0      	pop	{r4, r5, r7, pc}
 800265e:	bf00      	nop
 8002660:	08008e7c 	.word	0x08008e7c
 8002664:	08008e8c 	.word	0x08008e8c

08002668 <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	74fb      	strb	r3, [r7, #19]
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]

	status |= VL53L8CX_RdMulti(&(p_dev->platform),
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f107 020c 	add.w	r2, r7, #12
 8002686:	2304      	movs	r3, #4
 8002688:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 800268c:	f000 ffee 	bl	800366c <VL53L8CX_RdMulti>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	4313      	orrs	r3, r2
 8002698:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d04d      	beq.n	8002740 <vl53l8cx_stop_ranging+0xd8>
			&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3abc 	ldrb.w	r3, [r3, #2748]	@ 0xabc
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d148      	bne.n	8002740 <vl53l8cx_stop_ranging+0xd8>
	{
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 ffab 	bl	8003612 <VL53L8CX_WrByte>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2216      	movs	r2, #22
 80026ca:	2115      	movs	r1, #21
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 ffa0 	bl	8003612 <VL53L8CX_WrByte>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	4313      	orrs	r3, r2
 80026da:	75fb      	strb	r3, [r7, #23]
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	2114      	movs	r1, #20
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 ff95 	bl	8003612 <VL53L8CX_WrByte>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80026f2:	e021      	b.n	8002738 <vl53l8cx_stop_ranging+0xd0>
	        {
	        	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f107 0213 	add.w	r2, r7, #19
 80026fa:	2106      	movs	r1, #6
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 ff73 	bl	80035e8 <VL53L8CX_RdByte>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	4313      	orrs	r3, r2
 800270a:	75fb      	strb	r3, [r7, #23]
	        	status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	210a      	movs	r1, #10
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fff8 	bl	8003706 <VL53L8CX_WaitMs>
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	4313      	orrs	r3, r2
 800271e:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8002720:	8abb      	ldrh	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8002726:	8abb      	ldrh	r3, [r7, #20]
 8002728:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800272c:	d904      	bls.n	8002738 <vl53l8cx_stop_ranging+0xd0>
				{
					status |= tmp;
 800272e:	7cfa      	ldrb	r2, [r7, #19]
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	4313      	orrs	r3, r2
 8002734:	75fb      	strb	r3, [r7, #23]
					break;
 8002736:	e003      	b.n	8002740 <vl53l8cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	b25b      	sxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	dad9      	bge.n	80026f4 <vl53l8cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f107 0213 	add.w	r2, r7, #19
 8002746:	2106      	movs	r1, #6
 8002748:	4618      	mov	r0, r3
 800274a:	f000 ff4d 	bl	80035e8 <VL53L8CX_RdByte>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	4313      	orrs	r3, r2
 8002756:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	b25b      	sxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	da15      	bge.n	800278c <vl53l8cx_stop_ranging+0x124>
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f107 0213 	add.w	r2, r7, #19
 8002766:	2107      	movs	r1, #7
 8002768:	4618      	mov	r0, r3
 800276a:	f000 ff3d 	bl	80035e8 <VL53L8CX_RdByte>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	4313      	orrs	r3, r2
 8002776:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b84      	cmp	r3, #132	@ 0x84
 800277c:	d006      	beq.n	800278c <vl53l8cx_stop_ranging+0x124>
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b85      	cmp	r3, #133	@ 0x85
 8002782:	d003      	beq.n	800278c <vl53l8cx_stop_ranging+0x124>
		   status |= tmp;
 8002784:	7cfa      	ldrb	r2, [r7, #19]
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	4313      	orrs	r3, r2
 800278a:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002794:	4618      	mov	r0, r3
 8002796:	f000 ff3c 	bl	8003612 <VL53L8CX_WrByte>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	2114      	movs	r1, #20
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 ff31 	bl	8003612 <VL53L8CX_WrByte>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	2115      	movs	r1, #21
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 ff26 	bl	8003612 <VL53L8CX_WrByte>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2204      	movs	r2, #4
 80027d4:	2109      	movs	r1, #9
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 ff1b 	bl	8003612 <VL53L8CX_WrByte>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 ff0f 	bl	8003612 <VL53L8CX_WrByte>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	75fb      	strb	r3, [r7, #23]

	return status;
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800281e:	2304      	movs	r3, #4
 8002820:	2100      	movs	r1, #0
 8002822:	f000 ff23 	bl	800366c <VL53L8CX_RdMulti>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	4313      	orrs	r3, r2
 800282e:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7c1b      	ldrb	r3, [r3, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	d020      	beq.n	8002880 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8002844:	2bff      	cmp	r3, #255	@ 0xff
 8002846:	d01b      	beq.n	8002880 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 800284e:	2b05      	cmp	r3, #5
 8002850:	d116      	bne.n	8002880 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8002858:	f003 0305 	and.w	r3, r3, #5
 800285c:	2b05      	cmp	r3, #5
 800285e:	d10f      	bne.n	8002880 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	741a      	strb	r2, [r3, #16]
 800287e:	e00e      	b.n	800289e <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 8002886:	b25b      	sxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	da05      	bge.n	8002898 <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	4313      	orrs	r3, r2
 8002896:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 80028b6:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2100      	movs	r1, #0
 80028c4:	f000 fed2 	bl	800366c <VL53L8CX_RdMulti>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	741a      	strb	r2, [r3, #16]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f000 fed5 	bl	800369a <VL53L8CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80028f0:	2310      	movs	r3, #16
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e10e      	b.n	8002b14 <vl53l8cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d915      	bls.n	800293c <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d80e      	bhi.n	800293c <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002932:	b29b      	uxth	r3, r3
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	e005      	b.n	8002948 <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002944:	b29b      	uxth	r3, r3
 8002946:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	885b      	ldrh	r3, [r3, #2]
 800294c:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8002950:	4293      	cmp	r3, r2
 8002952:	f000 80bb 	beq.w	8002acc <vl53l8cx_get_ranging_data+0x224>
 8002956:	f24e 0284 	movw	r2, #57476	@ 0xe084
 800295a:	4293      	cmp	r3, r2
 800295c:	f300 80d2 	bgt.w	8002b04 <vl53l8cx_get_ranging_data+0x25c>
 8002960:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8002964:	4293      	cmp	r3, r2
 8002966:	f000 80a3 	beq.w	8002ab0 <vl53l8cx_get_ranging_data+0x208>
 800296a:	f24e 0244 	movw	r2, #57412	@ 0xe044
 800296e:	4293      	cmp	r3, r2
 8002970:	f300 80c8 	bgt.w	8002b04 <vl53l8cx_get_ranging_data+0x25c>
 8002974:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8002978:	4293      	cmp	r3, r2
 800297a:	f000 808b 	beq.w	8002a94 <vl53l8cx_get_ranging_data+0x1ec>
 800297e:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8002982:	4293      	cmp	r3, r2
 8002984:	f300 80be 	bgt.w	8002b04 <vl53l8cx_get_ranging_data+0x25c>
 8002988:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 800298c:	4293      	cmp	r3, r2
 800298e:	d073      	beq.n	8002a78 <vl53l8cx_get_ranging_data+0x1d0>
 8002990:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8002994:	4293      	cmp	r3, r2
 8002996:	f300 80b5 	bgt.w	8002b04 <vl53l8cx_get_ranging_data+0x25c>
 800299a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 800299e:	4293      	cmp	r3, r2
 80029a0:	d05c      	beq.n	8002a5c <vl53l8cx_get_ranging_data+0x1b4>
 80029a2:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80029a6:	4293      	cmp	r3, r2
 80029a8:	f300 80ac 	bgt.w	8002b04 <vl53l8cx_get_ranging_data+0x25c>
 80029ac:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d045      	beq.n	8002a40 <vl53l8cx_get_ranging_data+0x198>
 80029b4:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80029b8:	4293      	cmp	r3, r2
 80029ba:	f300 80a3 	bgt.w	8002b04 <vl53l8cx_get_ranging_data+0x25c>
 80029be:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80029c2:	4293      	cmp	r3, r2
 80029c4:	f000 8090 	beq.w	8002ae8 <vl53l8cx_get_ranging_data+0x240>
 80029c8:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80029cc:	4293      	cmp	r3, r2
 80029ce:	f300 8099 	bgt.w	8002b04 <vl53l8cx_get_ranging_data+0x25c>
 80029d2:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d024      	beq.n	8002a24 <vl53l8cx_get_ranging_data+0x17c>
 80029da:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80029de:	4293      	cmp	r3, r2
 80029e0:	f300 8090 	bgt.w	8002b04 <vl53l8cx_get_ranging_data+0x25c>
 80029e4:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <vl53l8cx_get_ranging_data+0x14e>
 80029ec:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00a      	beq.n	8002a0a <vl53l8cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80029f4:	e086      	b.n	8002b04 <vl53l8cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	330c      	adds	r3, #12
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8002a02:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	701a      	strb	r2, [r3, #0]
				break;
 8002a08:	e07d      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	3304      	adds	r3, #4
 8002a12:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f005 fcc6 	bl	80083ae <memcpy>
				break;
 8002a22:	e070      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f005 fcb8 	bl	80083ae <memcpy>
				break;
 8002a3e:	e062      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4619      	mov	r1, r3
 8002a56:	f005 fcaa 	bl	80083ae <memcpy>
				break;
 8002a5a:	e054      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3304      	adds	r3, #4
 8002a66:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4619      	mov	r1, r3
 8002a72:	f005 fc9c 	bl	80083ae <memcpy>
				break;
 8002a76:	e046      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3304      	adds	r3, #4
 8002a82:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f005 fc8e 	bl	80083ae <memcpy>
				break;
 8002a92:	e038      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f005 fc80 	bl	80083ae <memcpy>
				break;
 8002aae:	e02a      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f005 fc72 	bl	80083ae <memcpy>
				break;
 8002aca:	e01c      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f005 fc64 	bl	80083ae <memcpy>
				break;
 8002ae6:	e00e      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3304      	adds	r3, #4
 8002af2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4619      	mov	r1, r3
 8002afe:	f005 fc56 	bl	80083ae <memcpy>
				break;
 8002b02:	e000      	b.n	8002b06 <vl53l8cx_get_ranging_data+0x25e>
				break;
 8002b04:	bf00      	nop
		}
		i += msize;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3304      	adds	r3, #4
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	f4ff aeeb 	bcc.w	80028f6 <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e00d      	b.n	8002b42 <vl53l8cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	0ada      	lsrs	r2, r3, #11
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b46:	d9ee      	bls.n	8002b26 <vl53l8cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	e044      	b.n	8002bd8 <vl53l8cx_get_ranging_data+0x330>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da00      	bge.n	8002b64 <vl53l8cx_get_ranging_data+0x2bc>
 8002b62:	3303      	adds	r3, #3
 8002b64:	109b      	asrs	r3, r3, #2
 8002b66:	b219      	sxth	r1, r3
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	460a      	mov	r2, r1
 8002b76:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	b2d9      	uxtb	r1, r3
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002b92:	460a      	mov	r2, r1
 8002b94:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	889b      	ldrh	r3, [r3, #4]
 8002ba4:	09db      	lsrs	r3, r3, #7
 8002ba6:	b299      	uxth	r1, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3390      	adds	r3, #144	@ 0x90
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	0ada      	lsrs	r2, r3, #11
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	3390      	adds	r3, #144	@ 0x90
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bdc:	d9b7      	bls.n	8002b4e <vl53l8cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	e01b      	b.n	8002c1c <vl53l8cx_get_ranging_data+0x374>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d110      	bne.n	8002c16 <vl53l8cx_get_ranging_data+0x36e>
			for(j = 0; j < (uint32_t)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e00a      	b.n	8002c10 <vl53l8cx_get_ranging_data+0x368>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4413      	add	r3, r2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	22ff      	movs	r2, #255	@ 0xff
 8002c06:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f1      	beq.n	8002bfa <vl53l8cx_get_ranging_data+0x352>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c20:	d9e0      	bls.n	8002be4 <vl53l8cx_get_ranging_data+0x33c>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e014      	b.n	8002c52 <vl53l8cx_get_ranging_data+0x3aa>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb4 <vl53l8cx_get_ranging_data+0x40c>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	0bda      	lsrs	r2, r3, #15
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b1f      	cmp	r3, #31
 8002c56:	d9e7      	bls.n	8002c28 <vl53l8cx_get_ranging_data+0x380>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 8002c68:	461a      	mov	r2, r3
 8002c6a:	89fb      	ldrh	r3, [r7, #14]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8002c74:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8002c86:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8002c90:	461a      	mov	r2, r3
 8002c92:	89bb      	ldrh	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8002c98:	89fa      	ldrh	r2, [r7, #14]
 8002c9a:	89bb      	ldrh	r3, [r7, #12]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d003      	beq.n	8002ca8 <vl53l8cx_get_ranging_data+0x400>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8002ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	80008001 	.word	0x80008001

08002cb8 <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002ccc:	2308      	movs	r3, #8
 8002cce:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f996 	bl	8003004 <vl53l8cx_dci_read_data>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461a      	mov	r2, r3
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8002cee:	fb12 f303 	smulbb	r3, r2, r3
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	701a      	strb	r2, [r3, #0]

	return status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d002      	beq.n	8002d1e <vl53l8cx_set_resolution+0x1c>
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d055      	beq.n	8002dc8 <vl53l8cx_set_resolution+0xc6>
 8002d1c:	e0a9      	b.n	8002e72 <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8002d24:	2310      	movs	r3, #16
 8002d26:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f96a 	bl	8003004 <vl53l8cx_dci_read_data>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2240      	movs	r2, #64	@ 0x40
 8002d3e:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2240      	movs	r2, #64	@ 0x40
 8002d46:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8002d58:	2310      	movs	r3, #16
 8002d5a:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9da 	bl	8003118 <vl53l8cx_dci_write_data>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8002d74:	2308      	movs	r3, #8
 8002d76:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f942 	bl	8003004 <vl53l8cx_dci_read_data>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2204      	movs	r2, #4
 8002d96:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2208      	movs	r2, #8
 8002da6:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8002db0:	2308      	movs	r3, #8
 8002db2:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9ae 	bl	8003118 <vl53l8cx_dci_write_data>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 8002dc6:	e057      	b.n	8002e78 <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8002dce:	2310      	movs	r3, #16
 8002dd0:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f915 	bl	8003004 <vl53l8cx_dci_read_data>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2210      	movs	r2, #16
 8002de8:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2210      	movs	r2, #16
 8002df0:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8002e02:	2310      	movs	r3, #16
 8002e04:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f985 	bl	8003118 <vl53l8cx_dci_write_data>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8002e1e:	2308      	movs	r3, #8
 8002e20:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f8ed 	bl	8003004 <vl53l8cx_dci_read_data>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2208      	movs	r2, #8
 8002e38:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2208      	movs	r2, #8
 8002e40:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2204      	movs	r2, #4
 8002e48:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f959 	bl	8003118 <vl53l8cx_dci_write_data>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 8002e70:	e002      	b.n	8002e78 <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8002e72:	237f      	movs	r3, #127	@ 0x7f
 8002e74:	73fb      	strb	r3, [r7, #15]
			break;
 8002e76:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fe f9af 	bl	80011e0 <_vl53l8cx_send_offset_data>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe fb71 	bl	8001578 <_vl53l8cx_send_xtalk_data>
 8002e96:	4603      	mov	r3, r0
 8002e98:	461a      	mov	r2, r3
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	73fb      	strb	r3, [r7, #15]

	return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b088      	sub	sp, #32
 8002eae:	af04      	add	r7, sp, #16
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	9302      	str	r3, [sp, #8]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	1cfb      	adds	r3, r7, #3
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2304      	movs	r3, #4
 8002ece:	f245 4258 	movw	r2, #21592	@ 0x5458
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f9be 	bl	8003254 <vl53l8cx_dci_replace_data>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af04      	add	r7, sp, #16
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d903      	bls.n	8002f0c <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f0a:	d904      	bls.n	8002f16 <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e01a      	b.n	8002f4c <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002f28:	2300      	movs	r3, #0
 8002f2a:	9302      	str	r3, [sp, #8]
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2314      	movs	r3, #20
 8002f38:	f245 425c 	movw	r2, #21596	@ 0x545c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f989 	bl	8003254 <vl53l8cx_dci_replace_data>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002f70:	2308      	movs	r3, #8
 8002f72:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f844 	bl	8003004 <vl53l8cx_dci_read_data>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d002      	beq.n	8002f92 <vl53l8cx_set_ranging_mode+0x3c>
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d00b      	beq.n	8002fa8 <vl53l8cx_set_ranging_mode+0x52>
 8002f90:	e015      	b.n	8002fbe <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
			break;
 8002fa6:	e00d      	b.n	8002fc4 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
			break;
 8002fbc:	e002      	b.n	8002fc4 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8002fbe:	237f      	movs	r3, #127	@ 0x7f
 8002fc0:	73fb      	strb	r3, [r7, #15]
			break;
 8002fc2:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002fca:	2308      	movs	r3, #8
 8002fcc:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f8a1 	bl	8003118 <vl53l8cx_dci_write_data>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002fe0:	f107 0108 	add.w	r1, r7, #8
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f894 	bl	8003118 <vl53l8cx_dci_write_data>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	@ 0x30
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	330c      	adds	r3, #12
 800301c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800301e:	4a3d      	ldr	r2, [pc, #244]	@ (8003114 <vl53l8cx_dci_read_data+0x110>)
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	ca07      	ldmia	r2, {r0, r1, r2}
 8003026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8003030:	d903      	bls.n	800303a <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8003032:	23ff      	movs	r3, #255	@ 0xff
 8003034:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003038:	e065      	b.n	8003106 <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	b2db      	uxtb	r3, r3
 8003040:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	111b      	asrs	r3, r3, #4
 800304c:	b2db      	uxtb	r3, r3
 800304e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	b2db      	uxtb	r3, r3
 8003058:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f107 0214 	add.w	r2, r7, #20
 8003060:	230c      	movs	r3, #12
 8003062:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8003066:	f000 faea 	bl	800363e <VL53L8CX_WrMulti>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003072:	4313      	orrs	r3, r2
 8003074:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8003078:	2303      	movs	r3, #3
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	23ff      	movs	r3, #255	@ 0xff
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003084:	2201      	movs	r2, #1
 8003086:	2104      	movs	r1, #4
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7fe f815 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003096:	4313      	orrs	r3, r2
 8003098:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 800309c:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80030aa:	f000 fadf 	bl	800366c <VL53L8CX_RdMulti>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	330c      	adds	r3, #12
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f000 fae5 	bl	800369a <VL53L8CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80030d0:	2300      	movs	r3, #0
 80030d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80030d4:	e011      	b.n	80030fa <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 80030d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80030da:	1d1a      	adds	r2, r3, #4
 80030dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	440b      	add	r3, r1
 80030e4:	68f9      	ldr	r1, [r7, #12]
 80030e6:	440a      	add	r2, r1
 80030e8:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 80030ec:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80030ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80030fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030fe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8003102:	429a      	cmp	r2, r3
 8003104:	dbe7      	blt.n	80030d6 <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 8003106:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 800310a:	4618      	mov	r0, r3
 800310c:	3728      	adds	r7, #40	@ 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	08008ebc 	.word	0x08008ebc

08003118 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	@ 0x30
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8003130:	2300      	movs	r3, #0
 8003132:	753b      	strb	r3, [r7, #20]
 8003134:	2300      	movs	r3, #0
 8003136:	757b      	strb	r3, [r7, #21]
 8003138:	2300      	movs	r3, #0
 800313a:	75bb      	strb	r3, [r7, #22]
 800313c:	230f      	movs	r3, #15
 800313e:	75fb      	strb	r3, [r7, #23]
 8003140:	2305      	movs	r3, #5
 8003142:	763b      	strb	r3, [r7, #24]
 8003144:	2301      	movs	r3, #1
 8003146:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	3308      	adds	r3, #8
 800314c:	121b      	asrs	r3, r3, #8
 800314e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8003150:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3308      	adds	r3, #8
 8003158:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800315a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8003162:	3334      	adds	r3, #52	@ 0x34
 8003164:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 800316c:	d903      	bls.n	8003176 <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 800316e:	23ff      	movs	r3, #255	@ 0xff
 8003170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003174:	e068      	b.n	8003248 <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	b2db      	uxtb	r3, r3
 800317c:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	111b      	asrs	r3, r3, #4
 8003188:	b2db      	uxtb	r3, r3
 800318a:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	b2db      	uxtb	r3, r3
 8003194:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L8CX_SwapBuffer(data, data_size);
 8003196:	887b      	ldrh	r3, [r7, #2]
 8003198:	4619      	mov	r1, r3
 800319a:	68b8      	ldr	r0, [r7, #8]
 800319c:	f000 fa7d 	bl	800369a <VL53L8CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80031a8:	e012      	b.n	80031d0 <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 80031aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	441a      	add	r2, r3
 80031b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80031b6:	3304      	adds	r3, #4
 80031b8:	7811      	ldrb	r1, [r2, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	460a      	mov	r2, r1
 80031c0:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80031c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80031d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	dae8      	bge.n	80031aa <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	3304      	adds	r3, #4
 80031e6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	461a      	mov	r2, r3
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	cb03      	ldmia	r3!, {r0, r1}
 80031f6:	6010      	str	r0, [r2, #0]
 80031f8:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 80031fa:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8003202:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8003204:	330c      	adds	r3, #12
 8003206:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8003208:	f000 fa19 	bl	800363e <VL53L8CX_WrMulti>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003214:	4313      	orrs	r3, r2
 8003216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800321a:	2303      	movs	r3, #3
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	23ff      	movs	r3, #255	@ 0xff
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003226:	2201      	movs	r2, #1
 8003228:	2104      	movs	r1, #4
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7fd ff44 	bl	80010b8 <_vl53l8cx_poll_for_answer>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003238:	4313      	orrs	r3, r2
 800323a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L8CX_SwapBuffer(data, data_size);
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	4619      	mov	r1, r3
 8003242:	68b8      	ldr	r0, [r7, #8]
 8003244:	f000 fa29 	bl	800369a <VL53L8CX_SwapBuffer>
	}

	return status;
 8003248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800324c:	4618      	mov	r0, r3
 800324e:	3728      	adds	r7, #40	@ 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff fec9 	bl	8003004 <vl53l8cx_dci_read_data>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	4313      	orrs	r3, r2
 800327a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 800327c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	4618      	mov	r0, r3
 8003288:	f005 f891 	bl	80083ae <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff40 	bl	8003118 <vl53l8cx_dci_write_data>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	4313      	orrs	r3, r2
 80032a0:	75fb      	strb	r3, [r7, #23]

	return status;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 80032bc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80032c0:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d104      	bne.n	80032d2 <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 80032c8:	2301      	movs	r3, #1
 80032ca:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 80032cc:	2304      	movs	r3, #4
 80032ce:	73bb      	strb	r3, [r7, #14]
 80032d0:	e003      	b.n	80032da <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 80032d2:	2300      	movs	r3, #0
 80032d4:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 80032d6:	230c      	movs	r3, #12
 80032d8:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80032e0:	2300      	movs	r3, #0
 80032e2:	9302      	str	r3, [sp, #8]
 80032e4:	2304      	movs	r3, #4
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	2308      	movs	r3, #8
 80032f0:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffad 	bl	8003254 <vl53l8cx_dci_replace_data>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	4313      	orrs	r3, r2
 8003302:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 800330a:	2311      	movs	r3, #17
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	2301      	movs	r3, #1
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	f107 030e 	add.w	r3, r7, #14
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2314      	movs	r3, #20
 800331a:	f245 4288 	movw	r2, #21640	@ 0x5488
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ff98 	bl	8003254 <vl53l8cx_dci_replace_data>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	4313      	orrs	r3, r2
 800332c:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8003346:	4aa7      	ldr	r2, [pc, #668]	@ (80035e4 <vl53l8cx_set_detection_thresholds+0x2ac>)
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003350:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	75fb      	strb	r3, [r7, #23]
 8003358:	e120      	b.n	800359c <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	7a1b      	ldrb	r3, [r3, #8]
 800335e:	3b01      	subs	r3, #1
 8003360:	2b12      	cmp	r3, #18
 8003362:	f200 8117 	bhi.w	8003594 <vl53l8cx_set_detection_thresholds+0x25c>
 8003366:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <vl53l8cx_set_detection_thresholds+0x34>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033b9 	.word	0x080033b9
 8003370:	08003407 	.word	0x08003407
 8003374:	08003595 	.word	0x08003595
 8003378:	08003455 	.word	0x08003455
 800337c:	08003595 	.word	0x08003595
 8003380:	08003595 	.word	0x08003595
 8003384:	08003595 	.word	0x08003595
 8003388:	080034a3 	.word	0x080034a3
 800338c:	08003595 	.word	0x08003595
 8003390:	08003595 	.word	0x08003595
 8003394:	08003595 	.word	0x08003595
 8003398:	08003595 	.word	0x08003595
 800339c:	080034f1 	.word	0x080034f1
 80033a0:	08003595 	.word	0x08003595
 80033a4:	08003595 	.word	0x08003595
 80033a8:	08003595 	.word	0x08003595
 80033ac:	08003595 	.word	0x08003595
 80033b0:	08003595 	.word	0x08003595
 80033b4:	0800353f 	.word	0x0800353f
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 80033b8:	7dfa      	ldrb	r2, [r7, #23]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	461a      	mov	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	7dfa      	ldrb	r2, [r7, #23]
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	461a      	mov	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	008a      	lsls	r2, r1, #2
 80033dc:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 80033de:	7dfa      	ldrb	r2, [r7, #23]
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	461a      	mov	r2, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	7dfa      	ldrb	r2, [r7, #23]
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4413      	add	r3, r2
 8003400:	008a      	lsls	r2, r1, #2
 8003402:	605a      	str	r2, [r3, #4]
				break;
 8003404:	e0c7      	b.n	8003596 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8003406:	7dfa      	ldrb	r2, [r7, #23]
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	461a      	mov	r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	4413      	add	r3, r2
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	7dfa      	ldrb	r2, [r7, #23]
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	461a      	mov	r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4413      	add	r3, r2
 8003428:	02ca      	lsls	r2, r1, #11
 800342a:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 800342c:	7dfa      	ldrb	r2, [r7, #23]
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	461a      	mov	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4413      	add	r3, r2
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	7dfa      	ldrb	r2, [r7, #23]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	461a      	mov	r2, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	02ca      	lsls	r2, r1, #11
 8003450:	605a      	str	r2, [r3, #4]
				break;
 8003452:	e0a0      	b.n	8003596 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8003454:	7dfa      	ldrb	r2, [r7, #23]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	461a      	mov	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4413      	add	r3, r2
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	7dfa      	ldrb	r2, [r7, #23]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	461a      	mov	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	4413      	add	r3, r2
 8003476:	01ca      	lsls	r2, r1, #7
 8003478:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 800347a:	7dfa      	ldrb	r2, [r7, #23]
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	461a      	mov	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	4413      	add	r3, r2
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	7dfa      	ldrb	r2, [r7, #23]
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	461a      	mov	r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4413      	add	r3, r2
 800349c:	01ca      	lsls	r2, r1, #7
 800349e:	605a      	str	r2, [r3, #4]
				break;
 80034a0:	e079      	b.n	8003596 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80034a2:	7dfa      	ldrb	r2, [r7, #23]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	461a      	mov	r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	7dfa      	ldrb	r2, [r7, #23]
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	02ca      	lsls	r2, r1, #11
 80034c6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80034c8:	7dfa      	ldrb	r2, [r7, #23]
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	461a      	mov	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	7dfa      	ldrb	r2, [r7, #23]
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	461a      	mov	r2, r3
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	02ca      	lsls	r2, r1, #11
 80034ec:	605a      	str	r2, [r3, #4]
				break;
 80034ee:	e052      	b.n	8003596 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 80034f0:	7dfa      	ldrb	r2, [r7, #23]
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	461a      	mov	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	7dfa      	ldrb	r2, [r7, #23]
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	461a      	mov	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	4413      	add	r3, r2
 8003512:	020a      	lsls	r2, r1, #8
 8003514:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8003516:	7dfa      	ldrb	r2, [r7, #23]
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	461a      	mov	r2, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	4413      	add	r3, r2
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	7dfa      	ldrb	r2, [r7, #23]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	461a      	mov	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4413      	add	r3, r2
 8003538:	020a      	lsls	r2, r1, #8
 800353a:	605a      	str	r2, [r3, #4]
				break;
 800353c:	e02b      	b.n	8003596 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 800353e:	7dfa      	ldrb	r2, [r7, #23]
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	461a      	mov	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	4413      	add	r3, r2
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	7df9      	ldrb	r1, [r7, #23]
 8003552:	460b      	mov	r3, r1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	440b      	add	r3, r1
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4619      	mov	r1, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4419      	add	r1, r3
 8003560:	4613      	mov	r3, r2
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8003568:	7dfa      	ldrb	r2, [r7, #23]
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	461a      	mov	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4413      	add	r3, r2
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	7df9      	ldrb	r1, [r7, #23]
 800357c:	460b      	mov	r3, r1
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	440b      	add	r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4619      	mov	r1, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	4419      	add	r1, r3
 800358a:	4613      	mov	r3, r2
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	604b      	str	r3, [r1, #4]
				break;
 8003592:	e000      	b.n	8003596 <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 8003594:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	3301      	adds	r3, #1
 800359a:	75fb      	strb	r3, [r7, #23]
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b3f      	cmp	r3, #63	@ 0x3f
 80035a0:	f67f aedb 	bls.w	800335a <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 80035a4:	f107 010c 	add.w	r1, r7, #12
 80035a8:	2308      	movs	r3, #8
 80035aa:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fdb2 	bl	8003118 <vl53l8cx_dci_write_data>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	7dbb      	ldrb	r3, [r7, #22]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 80035be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035c2:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fda5 	bl	8003118 <vl53l8cx_dci_write_data>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	7dbb      	ldrb	r3, [r7, #22]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 80035d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	08008ec8 	.word	0x08008ec8

080035e8 <VL53L8CX_RdByte>:

uint8_t VL53L8CX_RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	460b      	mov	r3, r1
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689c      	ldr	r4, [r3, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8818      	ldrh	r0, [r3, #0]
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	2301      	movs	r3, #1
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	47a0      	blx	r4
 8003606:	4603      	mov	r3, r0
 8003608:	b2db      	uxtb	r3, r3
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bd90      	pop	{r4, r7, pc}

08003612 <VL53L8CX_WrByte>:

uint8_t VL53L8CX_WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8003612:	b590      	push	{r4, r7, lr}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	807b      	strh	r3, [r7, #2]
 800361e:	4613      	mov	r3, r2
 8003620:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685c      	ldr	r4, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8818      	ldrh	r0, [r3, #0]
 800362a:	1c7a      	adds	r2, r7, #1
 800362c:	8879      	ldrh	r1, [r7, #2]
 800362e:	2301      	movs	r3, #1
 8003630:	47a0      	blx	r4
 8003632:	4603      	mov	r3, r0
 8003634:	b2db      	uxtb	r3, r3
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bd90      	pop	{r4, r7, pc}

0800363e <VL53L8CX_WrMulti>:
uint8_t VL53L8CX_WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800363e:	b590      	push	{r4, r7, lr}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	460b      	mov	r3, r1
 800364c:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685c      	ldr	r4, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8818      	ldrh	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	47a0      	blx	r4
 8003660:	4603      	mov	r3, r0
 8003662:	b2db      	uxtb	r3, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bd90      	pop	{r4, r7, pc}

0800366c <VL53L8CX_RdMulti>:
uint8_t VL53L8CX_RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	460b      	mov	r3, r1
 800367a:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689c      	ldr	r4, [r3, #8]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8818      	ldrh	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	8979      	ldrh	r1, [r7, #10]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	47a0      	blx	r4
 800368e:	4603      	mov	r3, r0
 8003690:	b2db      	uxtb	r3, r3
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}

0800369a <VL53L8CX_SwapBuffer>:

void VL53L8CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e021      	b.n	80036f0 <VL53L8CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3301      	adds	r3, #1
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	440b      	add	r3, r1
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3302      	adds	r3, #2
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	440b      	add	r3, r1
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	3203      	adds	r2, #3
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	440a      	add	r2, r1
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	4313      	orrs	r3, r2
		tmp = (
 80036de:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4413      	add	r3, r2
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4) 
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d3d9      	bcc.n	80036ac <VL53L8CX_SwapBuffer+0x12>
	}
}	
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <VL53L8CX_WaitMs>:

uint8_t VL53L8CX_WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4798      	blx	r3
 8003716:	4603      	mov	r3, r0
 8003718:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 800371a:	bf00      	nop
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4798      	blx	r3
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d8f5      	bhi.n	800371c <VL53L8CX_WaitMs+0x16>

  return 0;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <VL53L8CX_RegisterBusIO>:
  * @param pObj    vl53l8cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <VL53L8CX_RegisterBusIO+0x16>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d103      	bne.n	8003758 <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003750:	f06f 0301 	mvn.w	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e033      	b.n	80037c0 <VL53L8CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	891a      	ldrh	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	891a      	ldrh	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <VL53L8CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4798      	blx	r3
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	e002      	b.n	80037c0 <VL53L8CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295
 80037be:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80037c0:	68fb      	ldr	r3, [r7, #12]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d103      	bne.n	80037e0 <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80037d8:	f06f 0301 	mvn.w	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e02e      	b.n	800383e <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e025      	b.n	800383e <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3318      	adds	r3, #24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe f80a 	bl	8001810 <vl53l8cx_init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e019      	b.n	800383e <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsBlocking = 0U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
    pObj->IsContinuous = 0U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
    pObj->IsAmbientEnabled = 0U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd
    pObj->IsInitialized = 1U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    ret = VL53L8CX_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003856:	f06f 0301 	mvn.w	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e018      	b.n	8003890 <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8003864:	2b01      	cmp	r3, #1
 8003866:	d110      	bne.n	800388a <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4798      	blx	r3
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e009      	b.n	8003890 <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
 8003888:	e002      	b.n	8003890 <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003890:	68fb      	ldr	r3, [r7, #12]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <VL53L8CX_ReadID+0x22>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d103      	bne.n	80038c4 <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80038bc:	f06f 0301 	mvn.w	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e045      	b.n	8003950 <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3318      	adds	r3, #24
 80038c8:	2200      	movs	r2, #0
 80038ca:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fe9f 	bl	8003612 <VL53L8CX_WrByte>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	7afb      	ldrb	r3, [r7, #11]
 80038da:	4313      	orrs	r3, r2
 80038dc:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3318      	adds	r3, #24
 80038e2:	f107 020a 	add.w	r2, r7, #10
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fe7d 	bl	80035e8 <VL53L8CX_RdByte>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	7afb      	ldrb	r3, [r7, #11]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3318      	adds	r3, #24
 80038fc:	f107 0209 	add.w	r2, r7, #9
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fe70 	bl	80035e8 <VL53L8CX_RdByte>
 8003908:	4603      	mov	r3, r0
 800390a:	461a      	mov	r2, r3
 800390c:	7afb      	ldrb	r3, [r7, #11]
 800390e:	4313      	orrs	r3, r2
 8003910:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3318      	adds	r3, #24
 8003916:	2202      	movs	r2, #2
 8003918:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fe78 	bl	8003612 <VL53L8CX_WrByte>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	7afb      	ldrb	r3, [r7, #11]
 8003928:	4313      	orrs	r3, r2
 800392a:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 800392c:	7afb      	ldrb	r3, [r7, #11]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d108      	bne.n	8003944 <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8003932:	7abb      	ldrb	r3, [r7, #10]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	7a7a      	ldrb	r2, [r7, #9]
 8003938:	441a      	add	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e005      	b.n	8003950 <VL53L8CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
 800394e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003950:	68fb      	ldr	r3, [r7, #12]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <VL53L8CX_GetCapabilities+0x16>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003970:	f06f 0301 	mvn.w	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e00d      	b.n	8003994 <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2240      	movs	r2, #64	@ 0x40
 800397c:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003994:	68fb      	ldr	r3, [r7, #12]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01b      	beq.n	80039f0 <VL53L8CX_ConfigProfile+0x4c>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 80039d0:	7c7b      	ldrb	r3, [r7, #17]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d822      	bhi.n	8003a1e <VL53L8CX_ConfigProfile+0x7a>
 80039d8:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <VL53L8CX_ConfigProfile+0x3c>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	080039f7 	.word	0x080039f7
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	08003a0b 	.word	0x08003a0b
 80039ec:	08003a15 	.word	0x08003a15
    return VL53L8CX_INVALID_PARAM;
 80039f0:	f06f 0301 	mvn.w	r3, #1
 80039f4:	e070      	b.n	8003ad8 <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 80039f6:	2310      	movs	r3, #16
 80039f8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 80039fa:	2301      	movs	r3, #1
 80039fc:	74bb      	strb	r3, [r7, #18]
    break;
 80039fe:	e016      	b.n	8003a2e <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8003a00:	2310      	movs	r3, #16
 8003a02:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8003a04:	2303      	movs	r3, #3
 8003a06:	74bb      	strb	r3, [r7, #18]
    break;
 8003a08:	e011      	b.n	8003a2e <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8003a0a:	2340      	movs	r3, #64	@ 0x40
 8003a0c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	74bb      	strb	r3, [r7, #18]
    break;
 8003a12:	e00c      	b.n	8003a2e <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8003a14:	2340      	movs	r3, #64	@ 0x40
 8003a16:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	74bb      	strb	r3, [r7, #18]
    break;
 8003a1c:	e007      	b.n	8003a2e <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 8003a1e:	2300      	movs	r3, #0
 8003a20:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8003a22:	2300      	movs	r3, #0
 8003a24:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 8003a26:	f06f 0301 	mvn.w	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
    break;
 8003a2c:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	e04f      	b.n	8003ad8 <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3318      	adds	r3, #24
 8003a3c:	7cfa      	ldrb	r2, [r7, #19]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff f95e 	bl	8002d02 <vl53l8cx_set_resolution>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e040      	b.n	8003ad6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3318      	adds	r3, #24
 8003a58:	7cba      	ldrb	r2, [r7, #18]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fa7a 	bl	8002f56 <vl53l8cx_set_ranging_mode>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	e032      	b.n	8003ad6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3318      	adds	r3, #24
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fa38 	bl	8002eec <vl53l8cx_set_integration_time_ms>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e025      	b.n	8003ad6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3318      	adds	r3, #24
 8003a8e:	7afa      	ldrb	r2, [r7, #11]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fa09 	bl	8002eaa <vl53l8cx_set_ranging_frequency_hz>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e017      	b.n	8003ad6 <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd

    ret = VL53L8CX_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003ad6:	697b      	ldr	r3, [r7, #20]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 8003aea:	f06f 0303 	mvn.w	r3, #3
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <VL53L8CX_ConfigIT+0x1a>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003b16:	f06f 0301 	mvn.w	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e09f      	b.n	8003c5e <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2bff      	cmp	r3, #255	@ 0xff
 8003b24:	d113      	bne.n	8003b4e <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3318      	adds	r3, #24
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fbbd 	bl	80032ac <vl53l8cx_set_detection_thresholds_enable>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	7abb      	ldrb	r3, [r7, #10]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8003b3c:	7abb      	ldrb	r3, [r7, #10]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <VL53L8CX_ConfigIT+0x4c>
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	e000      	b.n	8003b4a <VL53L8CX_ConfigIT+0x4e>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	e087      	b.n	8003c5e <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3318      	adds	r3, #24
 8003b52:	f107 0209 	add.w	r2, r7, #9
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f8ad 	bl	8002cb8 <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	72fb      	strb	r3, [r7, #11]
 8003b62:	e044      	b.n	8003bee <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8003b64:	7afa      	ldrb	r2, [r7, #11]
 8003b66:	4940      	ldr	r1, [pc, #256]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	330a      	adds	r3, #10
 8003b74:	7afa      	ldrb	r2, [r7, #11]
 8003b76:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 8003b78:	7afa      	ldrb	r2, [r7, #11]
 8003b7a:	493b      	ldr	r1, [pc, #236]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	3308      	adds	r3, #8
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	7afa      	ldrb	r2, [r7, #11]
 8003b92:	b2d8      	uxtb	r0, r3
 8003b94:	4934      	ldr	r1, [pc, #208]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3309      	adds	r3, #9
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 8003ba6:	7afa      	ldrb	r2, [r7, #11]
 8003ba8:	492f      	ldr	r1, [pc, #188]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	330b      	adds	r3, #11
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	7afa      	ldrb	r2, [r7, #11]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	4929      	ldr	r1, [pc, #164]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	7afa      	ldrb	r2, [r7, #11]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4923      	ldr	r1, [pc, #140]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	3304      	adds	r3, #4
 8003be6:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8003be8:	7afb      	ldrb	r3, [r7, #11]
 8003bea:	3301      	adds	r3, #1
 8003bec:	72fb      	strb	r3, [r7, #11]
 8003bee:	7a7b      	ldrb	r3, [r7, #9]
 8003bf0:	7afa      	ldrb	r2, [r7, #11]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d3b6      	bcc.n	8003b64 <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 8003bf6:	7afa      	ldrb	r2, [r7, #11]
 8003bf8:	491b      	ldr	r1, [pc, #108]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	330a      	adds	r3, #10
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	7afa      	ldrb	r2, [r7, #11]
 8003c0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c0e:	b2d8      	uxtb	r0, r3
 8003c10:	4915      	ldr	r1, [pc, #84]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	330a      	adds	r3, #10
 8003c1e:	4602      	mov	r2, r0
 8003c20:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3318      	adds	r3, #24
 8003c26:	4910      	ldr	r1, [pc, #64]	@ (8003c68 <VL53L8CX_ConfigIT+0x16c>)
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fb85 	bl	8003338 <vl53l8cx_set_detection_thresholds>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	7abb      	ldrb	r3, [r7, #10]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3318      	adds	r3, #24
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fb34 	bl	80032ac <vl53l8cx_set_detection_thresholds_enable>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	7abb      	ldrb	r3, [r7, #10]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8003c4e:	7abb      	ldrb	r3, [r7, #10]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <VL53L8CX_ConfigIT+0x15e>
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	e000      	b.n	8003c5c <VL53L8CX_ConfigIT+0x160>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200021fc 	.word	0x200021fc

08003c6c <VL53L8CX_GetDistance>:
  * @param pObj    vl53l8cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L8CX_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <VL53L8CX_GetDistance+0x1a>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <VL53L8CX_GetDistance+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003c86:	f06f 0301 	mvn.w	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e007      	b.n	8003c9e <VL53L8CX_GetDistance+0x32>
  }
  else if (pObj->IsRanging == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <VL53L8CX_GetDistance+0x32>
  {
    ret = VL53L8CX_ERROR;
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  if (ret == VL53L8CX_OK)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d110      	bne.n	8003cc6 <VL53L8CX_GetDistance+0x5a>
  {
    if (pObj->IsBlocking == 1U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3ada 	ldrb.w	r3, [r3, #2778]	@ 0xada
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d106      	bne.n	8003cbc <VL53L8CX_GetDistance+0x50>
    {
      ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 8003cae:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f939 	bl	8003f2a <vl53l8cx_poll_for_measurement>
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	e004      	b.n	8003cc6 <VL53L8CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f933 	bl	8003f2a <vl53l8cx_poll_for_measurement>
 8003cc4:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L8CX_OK)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <VL53L8CX_GetDistance+0x6a>
  {
    ret = vl53l8cx_get_result(pObj, pResult);
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f95e 	bl	8003f90 <vl53l8cx_get_result>
 8003cd4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003cf0:	f06f 0301 	mvn.w	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e04c      	b.n	8003d92 <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fb1d 	bl	800233c <vl53l8cx_start_ranging>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d141      	bne.n	8003d8c <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d82f      	bhi.n	8003d7c <VL53L8CX_Start+0x9c>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <VL53L8CX_Start+0x44>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d47 	.word	0x08003d47
 8003d2c:	08003d59 	.word	0x08003d59
 8003d30:	08003d6b 	.word	0x08003d6b
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003d44:	e025      	b.n	8003d92 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003d56:	e01c      	b.n	8003d92 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003d68:	e013      	b.n	8003d92 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003d7a:	e00a      	b.n	8003d92 <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
        ret = VL53L8CX_INVALID_PARAM;
 8003d84:	f06f 0301 	mvn.w	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
        break;
 8003d8a:	e002      	b.n	8003d92 <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d103      	bne.n	8003db2 <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003daa:	f06f 0301 	mvn.w	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e01a      	b.n	8003de8 <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d103      	bne.n	8003dc4 <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e011      	b.n	8003de8 <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe fc4d 	bl	8002668 <vl53l8cx_stop_ranging>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e002      	b.n	8003de8 <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003de8:	68fb      	ldr	r3, [r7, #12]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <VL53L8CX_SetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param Address     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetAddress(VL53L8CX_Object_t *pObj, uint32_t Address)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <VL53L8CX_SetAddress+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003e02:	f06f 0301 	mvn.w	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e015      	b.n	8003e36 <VL53L8CX_SetAddress+0x44>
  }
  else if (vl53l8cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L8CX_STATUS_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe f927 	bl	8002068 <vl53l8cx_set_i2c_address>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <VL53L8CX_SetAddress+0x36>
  {
    ret = VL53L8CX_ERROR;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e006      	b.n	8003e36 <VL53L8CX_SetAddress+0x44>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	811a      	strh	r2, [r3, #8]
    ret = VL53L8CX_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003e36:	68fb      	ldr	r3, [r7, #12]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <VL53L8CX_GetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetAddress(VL53L8CX_Object_t *pObj, uint32_t *pAddress)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <VL53L8CX_GetAddress+0x16>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <VL53L8CX_GetAddress+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003e56:	f06f 0301 	mvn.w	r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	e006      	b.n	8003e6c <VL53L8CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	891b      	ldrh	r3, [r3, #8]
 8003e62:	461a      	mov	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003e8a:	f06f 0301 	mvn.w	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e01a      	b.n	8003ec8 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <VL53L8CX_SetPowerMode+0x2c>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d003      	beq.n	8003ea6 <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003e9e:	f06f 0301 	mvn.w	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e010      	b.n	8003ec8 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3318      	adds	r3, #24
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe f965 	bl	8002180 <vl53l8cx_set_power_mode>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e001      	b.n	8003ec8 <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <VL53L8CX_GetPowerMode+0x16>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003ee8:	f06f 0301 	mvn.w	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	e017      	b.n	8003f20 <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3318      	adds	r3, #24
 8003ef4:	f107 020b 	add.w	r2, r7, #11
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe f8ea 	bl	80020d4 <vl53l8cx_get_power_mode>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e005      	b.n	8003f20 <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	461a      	mov	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003f20:	68fb      	ldr	r3, [r7, #12]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <vl53l8cx_poll_for_measurement+0x1c>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003f3e:	f06f 0301 	mvn.w	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e01f      	b.n	8003f86 <vl53l8cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L8CX_TIMEOUT;
 8003f46:	f06f 0302 	mvn.w	r3, #2
 8003f4a:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	4798      	blx	r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3318      	adds	r3, #24
 8003f5a:	f107 020f 	add.w	r2, r7, #15
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fc51 	bl	8002808 <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d102      	bne.n	8003f72 <vl53l8cx_poll_for_measurement+0x48>
      {
        ret = VL53L8CX_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
        break;
 8003f70:	e009      	b.n	8003f86 <vl53l8cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4798      	blx	r3
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d8e7      	bhi.n	8003f56 <vl53l8cx_poll_for_measurement+0x2c>

  }

  return ret;
 8003f86:	697b      	ldr	r3, [r7, #20]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <vl53l8cx_get_result+0x16>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <vl53l8cx_get_result+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003fa6:	f06f 0301 	mvn.w	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e0cf      	b.n	800414e <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3318      	adds	r3, #24
 8003fb2:	f107 0208 	add.w	r2, r7, #8
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fe7d 	bl	8002cb8 <vl53l8cx_get_resolution>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <vl53l8cx_get_result+0x3c>
  {
    ret = VL53L8CX_ERROR;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e0c0      	b.n	800414e <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4961      	ldr	r1, [pc, #388]	@ (8004158 <vl53l8cx_get_result+0x1c8>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fc68 	bl	80028a8 <vl53l8cx_get_ranging_data>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <vl53l8cx_get_result+0x56>
  {
    ret = VL53L8CX_ERROR;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e0b3      	b.n	800414e <vl53l8cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8003fe6:	7a3b      	ldrb	r3, [r7, #8]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	72fb      	strb	r3, [r7, #11]
 8003ff2:	e0a5      	b.n	8004140 <vl53l8cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8003ff4:	7afb      	ldrb	r3, [r7, #11]
 8003ff6:	7afa      	ldrb	r2, [r7, #11]
 8003ff8:	4957      	ldr	r1, [pc, #348]	@ (8004158 <vl53l8cx_get_result+0x1c8>)
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3304      	adds	r3, #4
 800400e:	4602      	mov	r2, r0
 8004010:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8004012:	2300      	movs	r3, #0
 8004014:	72bb      	strb	r3, [r7, #10]
 8004016:	e087      	b.n	8004128 <vl53l8cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8004018:	7afa      	ldrb	r2, [r7, #11]
 800401a:	7abb      	ldrb	r3, [r7, #10]
 800401c:	4413      	add	r3, r2
 800401e:	4a4e      	ldr	r2, [pc, #312]	@ (8004158 <vl53l8cx_get_result+0x1c8>)
 8004020:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800402c:	7afa      	ldrb	r2, [r7, #11]
 800402e:	7ab8      	ldrb	r0, [r7, #10]
 8004030:	461c      	mov	r4, r3
 8004032:	6839      	ldr	r1, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	4403      	add	r3, r0
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3adc 	ldrb.w	r3, [r3, #2780]	@ 0xadc
 8004048:	2b01      	cmp	r3, #1
 800404a:	d116      	bne.n	800407a <vl53l8cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 800404c:	7afb      	ldrb	r3, [r7, #11]
 800404e:	4a42      	ldr	r2, [pc, #264]	@ (8004158 <vl53l8cx_get_result+0x1c8>)
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	7afa      	ldrb	r2, [r7, #11]
 8004058:	7ab8      	ldrb	r0, [r7, #10]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	4403      	add	r3, r0
 800406c:	3302      	adds	r3, #2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3308      	adds	r3, #8
 8004074:	edc3 7a00 	vstr	s15, [r3]
 8004078:	e00d      	b.n	8004096 <vl53l8cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800407a:	7afa      	ldrb	r2, [r7, #11]
 800407c:	7ab8      	ldrb	r0, [r7, #10]
 800407e:	6839      	ldr	r1, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	4403      	add	r3, r0
 8004088:	3302      	adds	r3, #2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	3308      	adds	r3, #8
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3add 	ldrb.w	r3, [r3, #2781]	@ 0xadd
 800409c:	2b01      	cmp	r3, #1
 800409e:	d119      	bne.n	80040d4 <vl53l8cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80040a0:	7afa      	ldrb	r2, [r7, #11]
 80040a2:	7abb      	ldrb	r3, [r7, #10]
 80040a4:	4413      	add	r3, r2
 80040a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004158 <vl53l8cx_get_result+0x1c8>)
 80040a8:	3390      	adds	r3, #144	@ 0x90
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 80040b0:	7afa      	ldrb	r2, [r7, #11]
 80040b2:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	4403      	add	r3, r0
 80040c6:	3304      	adds	r3, #4
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	3304      	adds	r3, #4
 80040ce:	edc3 7a00 	vstr	s15, [r3]
 80040d2:	e00d      	b.n	80040f0 <vl53l8cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80040d4:	7afa      	ldrb	r2, [r7, #11]
 80040d6:	7ab8      	ldrb	r0, [r7, #10]
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	4403      	add	r3, r0
 80040e2:	3304      	adds	r3, #4
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3304      	adds	r3, #4
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80040f0:	7afa      	ldrb	r2, [r7, #11]
 80040f2:	7abb      	ldrb	r3, [r7, #10]
 80040f4:	4413      	add	r3, r2
 80040f6:	4a18      	ldr	r2, [pc, #96]	@ (8004158 <vl53l8cx_get_result+0x1c8>)
 80040f8:	4413      	add	r3, r2
 80040fa:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 80040fe:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 8004100:	7a7b      	ldrb	r3, [r7, #9]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f82a 	bl	800415c <vl53l8cx_map_target_status>
 8004108:	4603      	mov	r3, r0
 800410a:	7afa      	ldrb	r2, [r7, #11]
 800410c:	7ab8      	ldrb	r0, [r7, #10]
 800410e:	461c      	mov	r4, r3
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	4403      	add	r3, r0
 800411a:	3302      	adds	r3, #2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8004122:	7abb      	ldrb	r3, [r7, #10]
 8004124:	3301      	adds	r3, #1
 8004126:	72bb      	strb	r3, [r7, #10]
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	4a0b      	ldr	r2, [pc, #44]	@ (8004158 <vl53l8cx_get_result+0x1c8>)
 800412c:	4413      	add	r3, r2
 800412e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8004132:	7aba      	ldrb	r2, [r7, #10]
 8004134:	429a      	cmp	r2, r3
 8004136:	f4ff af6f 	bcc.w	8004018 <vl53l8cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	3301      	adds	r3, #1
 800413e:	72fb      	strb	r3, [r7, #11]
 8004140:	7a3b      	ldrb	r3, [r7, #8]
 8004142:	7afa      	ldrb	r2, [r7, #11]
 8004144:	429a      	cmp	r2, r3
 8004146:	f4ff af55 	bcc.w	8003ff4 <vl53l8cx_get_result+0x64>
      }
    }

    ret = VL53L8CX_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800414e:	68fb      	ldr	r3, [r7, #12]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bd90      	pop	{r4, r7, pc}
 8004158:	200024fc 	.word	0x200024fc

0800415c <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	2b05      	cmp	r3, #5
 800416a:	d002      	beq.n	8004172 <vl53l8cx_map_target_status+0x16>
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	2b09      	cmp	r3, #9
 8004170:	d102      	bne.n	8004178 <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8004172:	2300      	movs	r3, #0
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e007      	b.n	8004188 <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800417e:	23ff      	movs	r3, #255	@ 0xff
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	e001      	b.n	8004188 <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80041a2:	4b16      	ldr	r3, [pc, #88]	@ (80041fc <BSP_LED_Init+0x64>)
 80041a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a6:	4a15      	ldr	r2, [pc, #84]	@ (80041fc <BSP_LED_Init+0x64>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041ae:	4b13      	ldr	r3, [pc, #76]	@ (80041fc <BSP_LED_Init+0x64>)
 80041b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80041ba:	2320      	movs	r3, #32
 80041bc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80041be:	2301      	movs	r3, #1
 80041c0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c6:	2303      	movs	r3, #3
 80041c8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004200 <BSP_LED_Init+0x68>)
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	f107 020c 	add.w	r2, r7, #12
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fb25 	bl	8004828 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	4a07      	ldr	r2, [pc, #28]	@ (8004200 <BSP_LED_Init+0x68>)
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	2120      	movs	r1, #32
 80041e8:	2200      	movs	r2, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fd80 	bl	8004cf0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	2000003c 	.word	0x2000003c

08004204 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	460a      	mov	r2, r1
 800420e:	71fb      	strb	r3, [r7, #7]
 8004210:	4613      	mov	r3, r2
 8004212:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8004214:	4b2c      	ldr	r3, [pc, #176]	@ (80042c8 <BSP_PB_Init+0xc4>)
 8004216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004218:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <BSP_PB_Init+0xc4>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004220:	4b29      	ldr	r3, [pc, #164]	@ (80042c8 <BSP_PB_Init+0xc4>)
 8004222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800422c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004230:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8004232:	2302      	movs	r3, #2
 8004234:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004236:	2302      	movs	r3, #2
 8004238:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800423a:	79bb      	ldrb	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10c      	bne.n	800425a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	4a21      	ldr	r2, [pc, #132]	@ (80042cc <BSP_PB_Init+0xc8>)
 8004248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424c:	f107 020c 	add.w	r2, r7, #12
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fae8 	bl	8004828 <HAL_GPIO_Init>
 8004258:	e031      	b.n	80042be <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800425a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800425e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <BSP_PB_Init+0xc8>)
 8004264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004268:	f107 020c 	add.w	r2, r7, #12
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fada 	bl	8004828 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4a15      	ldr	r2, [pc, #84]	@ (80042d0 <BSP_PB_Init+0xcc>)
 800427a:	441a      	add	r2, r3
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	4915      	ldr	r1, [pc, #84]	@ (80042d4 <BSP_PB_Init+0xd0>)
 8004280:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 faba 	bl	8004800 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4a0f      	ldr	r2, [pc, #60]	@ (80042d0 <BSP_PB_Init+0xcc>)
 8004292:	1898      	adds	r0, r3, r2
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	4a10      	ldr	r2, [pc, #64]	@ (80042d8 <BSP_PB_Init+0xd4>)
 8004298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429c:	461a      	mov	r2, r3
 800429e:	2100      	movs	r1, #0
 80042a0:	f000 fa91 	bl	80047c6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80042a4:	2028      	movs	r0, #40	@ 0x28
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	4a0c      	ldr	r2, [pc, #48]	@ (80042dc <BSP_PB_Init+0xd8>)
 80042aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ae:	2200      	movs	r2, #0
 80042b0:	4619      	mov	r1, r3
 80042b2:	f000 fa54 	bl	800475e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80042b6:	2328      	movs	r3, #40	@ 0x28
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fa6a 	bl	8004792 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	20000040 	.word	0x20000040
 80042d0:	20002a4c 	.word	0x20002a4c
 80042d4:	0801e844 	.word	0x0801e844
 80042d8:	20000048 	.word	0x20000048
 80042dc:	2000004c 	.word	0x2000004c

080042e0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d903      	bls.n	80042fe <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042f6:	f06f 0301 	mvn.w	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e018      	b.n	8004330 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2294      	movs	r2, #148	@ 0x94
 8004302:	fb02 f303 	mul.w	r3, r2, r3
 8004306:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <BSP_COM_Init+0x5c>)
 8004308:	4413      	add	r3, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f86e 	bl	80043ec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	2294      	movs	r2, #148	@ 0x94
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	4a08      	ldr	r2, [pc, #32]	@ (800433c <BSP_COM_Init+0x5c>)
 800431a:	4413      	add	r3, r2
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f80e 	bl	8004340 <MX_LPUART1_Init>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800432a:	f06f 0303 	mvn.w	r3, #3
 800432e:	e000      	b.n	8004332 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8004330:	68fb      	ldr	r3, [r7, #12]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20002a54 	.word	0x20002a54

08004340 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800434a:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <MX_LPUART1_Init+0x60>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	220c      	movs	r2, #12
 800435e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	895b      	ldrh	r3, [r3, #10]
 8004364:	461a      	mov	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	891b      	ldrh	r3, [r3, #8]
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	899b      	ldrh	r3, [r3, #12]
 8004380:	461a      	mov	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800438c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f002 fb7c 	bl	8006a8c <HAL_UART_Init>
 8004394:	4603      	mov	r3, r0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000044 	.word	0x20000044

080043a4 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80043ac:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <__io_putchar+0x30>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	2394      	movs	r3, #148	@ 0x94
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	4a07      	ldr	r2, [pc, #28]	@ (80043d8 <__io_putchar+0x34>)
 80043ba:	1898      	adds	r0, r3, r2
 80043bc:	1d39      	adds	r1, r7, #4
 80043be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043c2:	2201      	movs	r2, #1
 80043c4:	f002 fbbc 	bl	8006b40 <HAL_UART_Transmit>
  return ch;
 80043c8:	687b      	ldr	r3, [r7, #4]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20002ae8 	.word	0x20002ae8
 80043d8:	20002a54 	.word	0x20002a54

080043dc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80043e0:	2000      	movs	r0, #0
 80043e2:	f003 fd33 	bl	8007e4c <BSP_PB_Callback>
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80043f4:	4b22      	ldr	r3, [pc, #136]	@ (8004480 <COM1_MspInit+0x94>)
 80043f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f8:	4a21      	ldr	r2, [pc, #132]	@ (8004480 <COM1_MspInit+0x94>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004400:	4b1f      	ldr	r3, [pc, #124]	@ (8004480 <COM1_MspInit+0x94>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800440c:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <COM1_MspInit+0x94>)
 800440e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004410:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <COM1_MspInit+0x94>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <COM1_MspInit+0x94>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <COM1_MspInit+0x94>)
 8004426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004428:	4a15      	ldr	r2, [pc, #84]	@ (8004480 <COM1_MspInit+0x94>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004430:	4b13      	ldr	r3, [pc, #76]	@ (8004480 <COM1_MspInit+0x94>)
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800443c:	2304      	movs	r3, #4
 800443e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004440:	2302      	movs	r3, #2
 8004442:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004444:	2302      	movs	r3, #2
 8004446:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004448:	2301      	movs	r3, #1
 800444a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800444c:	230c      	movs	r3, #12
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	4619      	mov	r1, r3
 8004456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800445a:	f000 f9e5 	bl	8004828 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800445e:	2308      	movs	r3, #8
 8004460:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004462:	2302      	movs	r3, #2
 8004464:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8004466:	230c      	movs	r3, #12
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800446a:	f107 0314 	add.w	r3, r7, #20
 800446e:	4619      	mov	r1, r3
 8004470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004474:	f000 f9d8 	bl	8004828 <HAL_GPIO_Init>
}
 8004478:	bf00      	nop
 800447a:	3728      	adds	r7, #40	@ 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000

08004484 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800448e:	2003      	movs	r0, #3
 8004490:	f000 f95a 	bl	8004748 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004494:	2000      	movs	r0, #0
 8004496:	f000 f80d 	bl	80044b4 <HAL_InitTick>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	71fb      	strb	r3, [r7, #7]
 80044a4:	e001      	b.n	80044aa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044a6:	f7fc f9af 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044aa:	79fb      	ldrb	r3, [r7, #7]

}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80044c0:	4b16      	ldr	r3, [pc, #88]	@ (800451c <HAL_InitTick+0x68>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d022      	beq.n	800450e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80044c8:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <HAL_InitTick+0x6c>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b13      	ldr	r3, [pc, #76]	@ (800451c <HAL_InitTick+0x68>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80044d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f966 	bl	80047ae <HAL_SYSTICK_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10f      	bne.n	8004508 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d809      	bhi.n	8004502 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044ee:	2200      	movs	r2, #0
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	f04f 30ff 	mov.w	r0, #4294967295
 80044f6:	f000 f932 	bl	800475e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004524 <HAL_InitTick+0x70>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e007      	b.n	8004512 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
 8004506:	e004      	b.n	8004512 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
 800450c:	e001      	b.n	8004512 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000054 	.word	0x20000054
 8004520:	20000000 	.word	0x20000000
 8004524:	20000050 	.word	0x20000050

08004528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_IncTick+0x1c>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <HAL_IncTick+0x20>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4413      	add	r3, r2
 8004536:	4a03      	ldr	r2, [pc, #12]	@ (8004544 <HAL_IncTick+0x1c>)
 8004538:	6013      	str	r3, [r2, #0]
}
 800453a:	bf00      	nop
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	20002aec 	.word	0x20002aec
 8004548:	20000054 	.word	0x20000054

0800454c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return uwTick;
 8004550:	4b03      	ldr	r3, [pc, #12]	@ (8004560 <HAL_GetTick+0x14>)
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20002aec 	.word	0x20002aec

08004564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800456c:	f7ff ffee 	bl	800454c <HAL_GetTick>
 8004570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d004      	beq.n	8004588 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800457e:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <HAL_Delay+0x40>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004588:	bf00      	nop
 800458a:	f7ff ffdf 	bl	800454c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	d8f7      	bhi.n	800458a <HAL_Delay+0x26>
  {
  }
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000054 	.word	0x20000054

080045a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b8:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045c4:	4013      	ands	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045da:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	60d3      	str	r3, [r2, #12]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <__NVIC_GetPriorityGrouping+0x18>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	f003 0307 	and.w	r3, r3, #7
}
 80045fe:	4618      	mov	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	2b00      	cmp	r3, #0
 800461c:	db0b      	blt.n	8004636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	f003 021f 	and.w	r2, r3, #31
 8004624:	4907      	ldr	r1, [pc, #28]	@ (8004644 <__NVIC_EnableIRQ+0x38>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2001      	movs	r0, #1
 800462e:	fa00 f202 	lsl.w	r2, r0, r2
 8004632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	e000e100 	.word	0xe000e100

08004648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	2b00      	cmp	r3, #0
 800465a:	db0a      	blt.n	8004672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	490c      	ldr	r1, [pc, #48]	@ (8004694 <__NVIC_SetPriority+0x4c>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	440b      	add	r3, r1
 800466c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004670:	e00a      	b.n	8004688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	4908      	ldr	r1, [pc, #32]	@ (8004698 <__NVIC_SetPriority+0x50>)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	3b04      	subs	r3, #4
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	440b      	add	r3, r1
 8004686:	761a      	strb	r2, [r3, #24]
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	e000e100 	.word	0xe000e100
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	@ 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f1c3 0307 	rsb	r3, r3, #7
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	bf28      	it	cs
 80046ba:	2304      	movcs	r3, #4
 80046bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d902      	bls.n	80046cc <NVIC_EncodePriority+0x30>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3b03      	subs	r3, #3
 80046ca:	e000      	b.n	80046ce <NVIC_EncodePriority+0x32>
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43da      	mvns	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	401a      	ands	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e4:	f04f 31ff 	mov.w	r1, #4294967295
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	43d9      	mvns	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f4:	4313      	orrs	r3, r2
         );
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3724      	adds	r7, #36	@ 0x24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004714:	d301      	bcc.n	800471a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004716:	2301      	movs	r3, #1
 8004718:	e00f      	b.n	800473a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800471a:	4a0a      	ldr	r2, [pc, #40]	@ (8004744 <SysTick_Config+0x40>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004722:	210f      	movs	r1, #15
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	f7ff ff8e 	bl	8004648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800472c:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <SysTick_Config+0x40>)
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004732:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <SysTick_Config+0x40>)
 8004734:	2207      	movs	r2, #7
 8004736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	e000e010 	.word	0xe000e010

08004748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff29 	bl	80045a8 <__NVIC_SetPriorityGrouping>
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	4603      	mov	r3, r0
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800476c:	f7ff ff40 	bl	80045f0 <__NVIC_GetPriorityGrouping>
 8004770:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	6978      	ldr	r0, [r7, #20]
 8004778:	f7ff ff90 	bl	800469c <NVIC_EncodePriority>
 800477c:	4602      	mov	r2, r0
 800477e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ff5f 	bl	8004648 <__NVIC_SetPriority>
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	4603      	mov	r3, r0
 800479a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800479c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff33 	bl	800460c <__NVIC_EnableIRQ>
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff ffa4 	bl	8004704 <SysTick_Config>
 80047bc:	4603      	mov	r3, r0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80047c6:	b480      	push	{r7}
 80047c8:	b087      	sub	sp, #28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	460b      	mov	r3, r1
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80047d8:	7afb      	ldrb	r3, [r7, #11]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	605a      	str	r2, [r3, #4]
      break;
 80047e4:	e005      	b.n	80047f2 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	75fb      	strb	r3, [r7, #23]
      break;
 80047f0:	bf00      	nop
  }

  return status;
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e003      	b.n	800481c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800481a:	2300      	movs	r3, #0
  }
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004836:	e15a      	b.n	8004aee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	2101      	movs	r1, #1
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 814c 	beq.w	8004ae8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b01      	cmp	r3, #1
 800485a:	d005      	beq.n	8004868 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004864:	2b02      	cmp	r3, #2
 8004866:	d130      	bne.n	80048ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	2203      	movs	r2, #3
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4013      	ands	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800489e:	2201      	movs	r2, #1
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 0201 	and.w	r2, r3, #1
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d017      	beq.n	8004906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2203      	movs	r2, #3
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d123      	bne.n	800495a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	08da      	lsrs	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3208      	adds	r2, #8
 800491a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	220f      	movs	r2, #15
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	08da      	lsrs	r2, r3, #3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3208      	adds	r2, #8
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0203 	and.w	r2, r3, #3
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80a6 	beq.w	8004ae8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499c:	4b5b      	ldr	r3, [pc, #364]	@ (8004b0c <HAL_GPIO_Init+0x2e4>)
 800499e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b0c <HAL_GPIO_Init+0x2e4>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80049a8:	4b58      	ldr	r3, [pc, #352]	@ (8004b0c <HAL_GPIO_Init+0x2e4>)
 80049aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049b4:	4a56      	ldr	r2, [pc, #344]	@ (8004b10 <HAL_GPIO_Init+0x2e8>)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	3302      	adds	r3, #2
 80049bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	220f      	movs	r2, #15
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049de:	d01f      	beq.n	8004a20 <HAL_GPIO_Init+0x1f8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004b14 <HAL_GPIO_Init+0x2ec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d019      	beq.n	8004a1c <HAL_GPIO_Init+0x1f4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004b18 <HAL_GPIO_Init+0x2f0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d013      	beq.n	8004a18 <HAL_GPIO_Init+0x1f0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a4a      	ldr	r2, [pc, #296]	@ (8004b1c <HAL_GPIO_Init+0x2f4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00d      	beq.n	8004a14 <HAL_GPIO_Init+0x1ec>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a49      	ldr	r2, [pc, #292]	@ (8004b20 <HAL_GPIO_Init+0x2f8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <HAL_GPIO_Init+0x1e8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a48      	ldr	r2, [pc, #288]	@ (8004b24 <HAL_GPIO_Init+0x2fc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <HAL_GPIO_Init+0x1e4>
 8004a08:	2305      	movs	r3, #5
 8004a0a:	e00a      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a0c:	2306      	movs	r3, #6
 8004a0e:	e008      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a10:	2304      	movs	r3, #4
 8004a12:	e006      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a14:	2303      	movs	r3, #3
 8004a16:	e004      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e002      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a20:	2300      	movs	r3, #0
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	f002 0203 	and.w	r2, r2, #3
 8004a28:	0092      	lsls	r2, r2, #2
 8004a2a:	4093      	lsls	r3, r2
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a32:	4937      	ldr	r1, [pc, #220]	@ (8004b10 <HAL_GPIO_Init+0x2e8>)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	3302      	adds	r3, #2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a40:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a64:	4a30      	ldr	r2, [pc, #192]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a8e:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a94:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ae2:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	3301      	adds	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f47f ae9d 	bne.w	8004838 <HAL_GPIO_Init+0x10>
  }
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40010000 	.word	0x40010000
 8004b14:	48000400 	.word	0x48000400
 8004b18:	48000800 	.word	0x48000800
 8004b1c:	48000c00 	.word	0x48000c00
 8004b20:	48001000 	.word	0x48001000
 8004b24:	48001400 	.word	0x48001400
 8004b28:	40010400 	.word	0x40010400

08004b2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004b3a:	e0bd      	b.n	8004cb8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80b0 	beq.w	8004cb2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b52:	4a60      	ldr	r2, [pc, #384]	@ (8004cd4 <HAL_GPIO_DeInit+0x1a8>)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	089b      	lsrs	r3, r3, #2
 8004b58:	3302      	adds	r3, #2
 8004b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	220f      	movs	r2, #15
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4013      	ands	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b7a:	d01f      	beq.n	8004bbc <HAL_GPIO_DeInit+0x90>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a56      	ldr	r2, [pc, #344]	@ (8004cd8 <HAL_GPIO_DeInit+0x1ac>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d019      	beq.n	8004bb8 <HAL_GPIO_DeInit+0x8c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a55      	ldr	r2, [pc, #340]	@ (8004cdc <HAL_GPIO_DeInit+0x1b0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <HAL_GPIO_DeInit+0x88>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a54      	ldr	r2, [pc, #336]	@ (8004ce0 <HAL_GPIO_DeInit+0x1b4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00d      	beq.n	8004bb0 <HAL_GPIO_DeInit+0x84>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a53      	ldr	r2, [pc, #332]	@ (8004ce4 <HAL_GPIO_DeInit+0x1b8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <HAL_GPIO_DeInit+0x80>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a52      	ldr	r2, [pc, #328]	@ (8004ce8 <HAL_GPIO_DeInit+0x1bc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d101      	bne.n	8004ba8 <HAL_GPIO_DeInit+0x7c>
 8004ba4:	2305      	movs	r3, #5
 8004ba6:	e00a      	b.n	8004bbe <HAL_GPIO_DeInit+0x92>
 8004ba8:	2306      	movs	r3, #6
 8004baa:	e008      	b.n	8004bbe <HAL_GPIO_DeInit+0x92>
 8004bac:	2304      	movs	r3, #4
 8004bae:	e006      	b.n	8004bbe <HAL_GPIO_DeInit+0x92>
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e004      	b.n	8004bbe <HAL_GPIO_DeInit+0x92>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e002      	b.n	8004bbe <HAL_GPIO_DeInit+0x92>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <HAL_GPIO_DeInit+0x92>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	f002 0203 	and.w	r2, r2, #3
 8004bc4:	0092      	lsls	r2, r2, #2
 8004bc6:	4093      	lsls	r3, r2
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d132      	bne.n	8004c34 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004bce:	4b47      	ldr	r3, [pc, #284]	@ (8004cec <HAL_GPIO_DeInit+0x1c0>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	4945      	ldr	r1, [pc, #276]	@ (8004cec <HAL_GPIO_DeInit+0x1c0>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004bdc:	4b43      	ldr	r3, [pc, #268]	@ (8004cec <HAL_GPIO_DeInit+0x1c0>)
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	4941      	ldr	r1, [pc, #260]	@ (8004cec <HAL_GPIO_DeInit+0x1c0>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004bea:	4b40      	ldr	r3, [pc, #256]	@ (8004cec <HAL_GPIO_DeInit+0x1c0>)
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	493e      	ldr	r1, [pc, #248]	@ (8004cec <HAL_GPIO_DeInit+0x1c0>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8004cec <HAL_GPIO_DeInit+0x1c0>)
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	493a      	ldr	r1, [pc, #232]	@ (8004cec <HAL_GPIO_DeInit+0x1c0>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	220f      	movs	r2, #15
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c16:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd4 <HAL_GPIO_DeInit+0x1a8>)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	089b      	lsrs	r3, r3, #2
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	482b      	ldr	r0, [pc, #172]	@ (8004cd4 <HAL_GPIO_DeInit+0x1a8>)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	400a      	ands	r2, r1
 8004c2e:	3302      	adds	r3, #2
 8004c30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2103      	movs	r1, #3
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	08da      	lsrs	r2, r3, #3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3208      	adds	r2, #8
 8004c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	08d2      	lsrs	r2, r2, #3
 8004c68:	4019      	ands	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3208      	adds	r2, #8
 8004c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	43db      	mvns	r3, r3
 8004c82:	401a      	ands	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	2103      	movs	r1, #3
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	401a      	ands	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f47f af3b 	bne.w	8004b3c <HAL_GPIO_DeInit+0x10>
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	48000400 	.word	0x48000400
 8004cdc:	48000800 	.word	0x48000800
 8004ce0:	48000c00 	.word	0x48000c00
 8004ce4:	48001000 	.word	0x48001000
 8004ce8:	48001400 	.word	0x48001400
 8004cec:	40010400 	.word	0x40010400

08004cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d00:	787b      	ldrb	r3, [r7, #1]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d06:	887a      	ldrh	r2, [r7, #2]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d0c:	e002      	b.n	8004d14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d0e:	887a      	ldrh	r2, [r7, #2]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d2a:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d36:	4a05      	ldr	r2, [pc, #20]	@ (8004d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f003 f894 	bl	8007e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40010400 	.word	0x40010400

08004d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e08d      	b.n	8004e7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f8b4 	bl	8004ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2224      	movs	r2, #36	@ 0x24
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d107      	bne.n	8004dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	e006      	b.n	8004dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d108      	bne.n	8004df2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dee:	605a      	str	r2, [r3, #4]
 8004df0:	e007      	b.n	8004e02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69d9      	ldr	r1, [r3, #28]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1a      	ldr	r2, [r3, #32]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e021      	b.n	8004edc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	@ 0x24
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f821 	bl	8004ef8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	817b      	strh	r3, [r7, #10]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	813b      	strh	r3, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	f040 80f9 	bne.w	8005126 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_I2C_Mem_Write+0x34>
 8004f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0ed      	b.n	8005128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_I2C_Mem_Write+0x4e>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e0e6      	b.n	8005128 <HAL_I2C_Mem_Write+0x21c>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f62:	f7ff faf3 	bl	800454c <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2319      	movs	r3, #25
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fadd 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0d1      	b.n	8005128 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2221      	movs	r2, #33	@ 0x21
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2240      	movs	r2, #64	@ 0x40
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fac:	88f8      	ldrh	r0, [r7, #6]
 8004fae:	893a      	ldrh	r2, [r7, #8]
 8004fb0:	8979      	ldrh	r1, [r7, #10]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4603      	mov	r3, r0
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f9ed 	bl	800539c <I2C_RequestMemoryWrite>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0a9      	b.n	8005128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2bff      	cmp	r3, #255	@ 0xff
 8004fdc:	d90e      	bls.n	8004ffc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	22ff      	movs	r2, #255	@ 0xff
 8004fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	8979      	ldrh	r1, [r7, #10]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fc61 	bl	80058bc <I2C_TransferConfig>
 8004ffa:	e00f      	b.n	800501c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500a:	b2da      	uxtb	r2, r3
 800500c:	8979      	ldrh	r1, [r7, #10]
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fc50 	bl	80058bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fae0 	bl	80055e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e07b      	b.n	8005128 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	781a      	ldrb	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d034      	beq.n	80050d4 <HAL_I2C_Mem_Write+0x1c8>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d130      	bne.n	80050d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005078:	2200      	movs	r2, #0
 800507a:	2180      	movs	r1, #128	@ 0x80
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fa59 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e04d      	b.n	8005128 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	2bff      	cmp	r3, #255	@ 0xff
 8005094:	d90e      	bls.n	80050b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	22ff      	movs	r2, #255	@ 0xff
 800509a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	8979      	ldrh	r1, [r7, #10]
 80050a4:	2300      	movs	r3, #0
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fc05 	bl	80058bc <I2C_TransferConfig>
 80050b2:	e00f      	b.n	80050d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	8979      	ldrh	r1, [r7, #10]
 80050c6:	2300      	movs	r3, #0
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fbf4 	bl	80058bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d19e      	bne.n	800501c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fac6 	bl	8005674 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e01a      	b.n	8005128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2220      	movs	r2, #32
 80050f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b0a      	ldr	r3, [pc, #40]	@ (8005130 <HAL_I2C_Mem_Write+0x224>)
 8005106:	400b      	ands	r3, r1
 8005108:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e000      	b.n	8005128 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005126:	2302      	movs	r3, #2
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	fe00e800 	.word	0xfe00e800

08005134 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	461a      	mov	r2, r3
 8005142:	4603      	mov	r3, r0
 8005144:	817b      	strh	r3, [r7, #10]
 8005146:	460b      	mov	r3, r1
 8005148:	813b      	strh	r3, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b20      	cmp	r3, #32
 8005158:	f040 80fd 	bne.w	8005356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_I2C_Mem_Read+0x34>
 8005162:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d105      	bne.n	8005174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800516e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0f1      	b.n	8005358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_I2C_Mem_Read+0x4e>
 800517e:	2302      	movs	r3, #2
 8005180:	e0ea      	b.n	8005358 <HAL_I2C_Mem_Read+0x224>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800518a:	f7ff f9df 	bl	800454c <HAL_GetTick>
 800518e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2319      	movs	r3, #25
 8005196:	2201      	movs	r2, #1
 8005198:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f9c9 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0d5      	b.n	8005358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2222      	movs	r2, #34	@ 0x22
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2240      	movs	r2, #64	@ 0x40
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051d4:	88f8      	ldrh	r0, [r7, #6]
 80051d6:	893a      	ldrh	r2, [r7, #8]
 80051d8:	8979      	ldrh	r1, [r7, #10]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	4603      	mov	r3, r0
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f92d 	bl	8005444 <I2C_RequestMemoryRead>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0ad      	b.n	8005358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2bff      	cmp	r3, #255	@ 0xff
 8005204:	d90e      	bls.n	8005224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	22ff      	movs	r2, #255	@ 0xff
 800520a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005210:	b2da      	uxtb	r2, r3
 8005212:	8979      	ldrh	r1, [r7, #10]
 8005214:	4b52      	ldr	r3, [pc, #328]	@ (8005360 <HAL_I2C_Mem_Read+0x22c>)
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fb4d 	bl	80058bc <I2C_TransferConfig>
 8005222:	e00f      	b.n	8005244 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005232:	b2da      	uxtb	r2, r3
 8005234:	8979      	ldrh	r1, [r7, #10]
 8005236:	4b4a      	ldr	r3, [pc, #296]	@ (8005360 <HAL_I2C_Mem_Read+0x22c>)
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fb3c 	bl	80058bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	2200      	movs	r2, #0
 800524c:	2104      	movs	r1, #4
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f970 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e07c      	b.n	8005358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d034      	beq.n	8005304 <HAL_I2C_Mem_Read+0x1d0>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d130      	bne.n	8005304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	2200      	movs	r2, #0
 80052aa:	2180      	movs	r1, #128	@ 0x80
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f941 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e04d      	b.n	8005358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2bff      	cmp	r3, #255	@ 0xff
 80052c4:	d90e      	bls.n	80052e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	22ff      	movs	r2, #255	@ 0xff
 80052ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	8979      	ldrh	r1, [r7, #10]
 80052d4:	2300      	movs	r3, #0
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 faed 	bl	80058bc <I2C_TransferConfig>
 80052e2:	e00f      	b.n	8005304 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	8979      	ldrh	r1, [r7, #10]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fadc 	bl	80058bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d19a      	bne.n	8005244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f9ae 	bl	8005674 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e01a      	b.n	8005358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2220      	movs	r2, #32
 8005328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6859      	ldr	r1, [r3, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <HAL_I2C_Mem_Read+0x230>)
 8005336:	400b      	ands	r3, r1
 8005338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	e000      	b.n	8005358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005356:	2302      	movs	r3, #2
  }
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	80002400 	.word	0x80002400
 8005364:	fe00e800 	.word	0xfe00e800

08005368 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005376:	b2db      	uxtb	r3, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	4608      	mov	r0, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	461a      	mov	r2, r3
 80053aa:	4603      	mov	r3, r0
 80053ac:	817b      	strh	r3, [r7, #10]
 80053ae:	460b      	mov	r3, r1
 80053b0:	813b      	strh	r3, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	8979      	ldrh	r1, [r7, #10]
 80053bc:	4b20      	ldr	r3, [pc, #128]	@ (8005440 <I2C_RequestMemoryWrite+0xa4>)
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fa79 	bl	80058bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	69b9      	ldr	r1, [r7, #24]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f909 	bl	80055e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e02c      	b.n	8005438 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d105      	bne.n	80053f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053e4:	893b      	ldrh	r3, [r7, #8]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80053ee:	e015      	b.n	800541c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053f0:	893b      	ldrh	r3, [r7, #8]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	69b9      	ldr	r1, [r7, #24]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f8ef 	bl	80055e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e012      	b.n	8005438 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005412:	893b      	ldrh	r3, [r7, #8]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2200      	movs	r2, #0
 8005424:	2180      	movs	r1, #128	@ 0x80
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f884 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	80002000 	.word	0x80002000

08005444 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	461a      	mov	r2, r3
 8005452:	4603      	mov	r3, r0
 8005454:	817b      	strh	r3, [r7, #10]
 8005456:	460b      	mov	r3, r1
 8005458:	813b      	strh	r3, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	8979      	ldrh	r1, [r7, #10]
 8005464:	4b20      	ldr	r3, [pc, #128]	@ (80054e8 <I2C_RequestMemoryRead+0xa4>)
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2300      	movs	r3, #0
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 fa26 	bl	80058bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	69b9      	ldr	r1, [r7, #24]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f8b6 	bl	80055e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e02c      	b.n	80054de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d105      	bne.n	8005496 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800548a:	893b      	ldrh	r3, [r7, #8]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	629a      	str	r2, [r3, #40]	@ 0x28
 8005494:	e015      	b.n	80054c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005496:	893b      	ldrh	r3, [r7, #8]
 8005498:	0a1b      	lsrs	r3, r3, #8
 800549a:	b29b      	uxth	r3, r3
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	69b9      	ldr	r1, [r7, #24]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f89c 	bl	80055e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e012      	b.n	80054de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054b8:	893b      	ldrh	r3, [r7, #8]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2140      	movs	r1, #64	@ 0x40
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f831 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	80002000 	.word	0x80002000

080054ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d103      	bne.n	800550a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d007      	beq.n	8005528 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	619a      	str	r2, [r3, #24]
  }
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005544:	e03b      	b.n	80055be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f8d6 	bl	80056fc <I2C_IsErrorOccurred>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e041      	b.n	80055de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d02d      	beq.n	80055be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005562:	f7fe fff3 	bl	800454c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d122      	bne.n	80055be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4013      	ands	r3, r2
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	429a      	cmp	r2, r3
 8005586:	bf0c      	ite	eq
 8005588:	2301      	moveq	r3, #1
 800558a:	2300      	movne	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	429a      	cmp	r2, r3
 8005594:	d113      	bne.n	80055be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559a:	f043 0220 	orr.w	r2, r3, #32
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e00f      	b.n	80055de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	bf0c      	ite	eq
 80055ce:	2301      	moveq	r3, #1
 80055d0:	2300      	movne	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d0b4      	beq.n	8005546 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055f2:	e033      	b.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f87f 	bl	80056fc <I2C_IsErrorOccurred>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e031      	b.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d025      	beq.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005610:	f7fe ff9c 	bl	800454c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	429a      	cmp	r2, r3
 800561e:	d302      	bcc.n	8005626 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d11a      	bne.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b02      	cmp	r3, #2
 8005632:	d013      	beq.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e007      	b.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d1c4      	bne.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005680:	e02f      	b.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f838 	bl	80056fc <I2C_IsErrorOccurred>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e02d      	b.n	80056f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005696:	f7fe ff59 	bl	800454c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d302      	bcc.n	80056ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11a      	bne.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d013      	beq.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e007      	b.n	80056f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d1c8      	bne.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	d068      	beq.n	80057fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2210      	movs	r2, #16
 800572e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005730:	e049      	b.n	80057c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d045      	beq.n	80057c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fe ff07 	bl	800454c <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <I2C_IsErrorOccurred+0x54>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d13a      	bne.n	80057c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800575a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005762:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800576e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005772:	d121      	bne.n	80057b8 <I2C_IsErrorOccurred+0xbc>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800577a:	d01d      	beq.n	80057b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	2b20      	cmp	r3, #32
 8005780:	d01a      	beq.n	80057b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005790:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005792:	f7fe fedb 	bl	800454c <HAL_GetTick>
 8005796:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005798:	e00e      	b.n	80057b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800579a:	f7fe fed7 	bl	800454c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b19      	cmp	r3, #25
 80057a6:	d907      	bls.n	80057b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	f043 0320 	orr.w	r3, r3, #32
 80057ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80057b6:	e006      	b.n	80057c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d1e9      	bne.n	800579a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d003      	beq.n	80057dc <I2C_IsErrorOccurred+0xe0>
 80057d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0aa      	beq.n	8005732 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d103      	bne.n	80057ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2220      	movs	r2, #32
 80057ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	f043 0304 	orr.w	r3, r3, #4
 80057f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800581c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	f043 0308 	orr.w	r3, r3, #8
 8005834:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800583e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	f043 0302 	orr.w	r3, r3, #2
 8005856:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01c      	beq.n	80058aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff fe3b 	bl	80054ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <I2C_IsErrorOccurred+0x1bc>)
 8005882:	400b      	ands	r3, r1
 8005884:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	431a      	orrs	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80058aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3728      	adds	r7, #40	@ 0x28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	fe00e800 	.word	0xfe00e800

080058bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	4613      	mov	r3, r2
 80058cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ce:	897b      	ldrh	r3, [r7, #10]
 80058d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058d4:	7a7b      	ldrb	r3, [r7, #9]
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	0d5b      	lsrs	r3, r3, #21
 80058f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80058fa:	4b08      	ldr	r3, [pc, #32]	@ (800591c <I2C_TransferConfig+0x60>)
 80058fc:	430b      	orrs	r3, r1
 80058fe:	43db      	mvns	r3, r3
 8005900:	ea02 0103 	and.w	r1, r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	03ff63ff 	.word	0x03ff63ff

08005920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	d138      	bne.n	80059a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005940:	2302      	movs	r3, #2
 8005942:	e032      	b.n	80059aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2224      	movs	r2, #36	@ 0x24
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005972:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6819      	ldr	r1, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d139      	bne.n	8005a40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e033      	b.n	8005a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2224      	movs	r2, #36	@ 0x24
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d141      	bne.n	8005ae2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a6a:	d131      	bne.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a6c:	4b47      	ldr	r3, [pc, #284]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a72:	4a46      	ldr	r2, [pc, #280]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a7c:	4b43      	ldr	r3, [pc, #268]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a84:	4a41      	ldr	r2, [pc, #260]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a8c:	4b40      	ldr	r3, [pc, #256]	@ (8005b90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2232      	movs	r2, #50	@ 0x32
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	4a3f      	ldr	r2, [pc, #252]	@ (8005b94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	0c9b      	lsrs	r3, r3, #18
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aa2:	e002      	b.n	8005aaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aaa:	4b38      	ldr	r3, [pc, #224]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ab6:	d102      	bne.n	8005abe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f2      	bne.n	8005aa4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005abe:	4b33      	ldr	r3, [pc, #204]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aca:	d158      	bne.n	8005b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e057      	b.n	8005b80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005adc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ae0:	e04d      	b.n	8005b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae8:	d141      	bne.n	8005b6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005aea:	4b28      	ldr	r3, [pc, #160]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af6:	d131      	bne.n	8005b5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005af8:	4b24      	ldr	r3, [pc, #144]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005afe:	4a23      	ldr	r2, [pc, #140]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b08:	4b20      	ldr	r3, [pc, #128]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b10:	4a1e      	ldr	r2, [pc, #120]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b18:	4b1d      	ldr	r3, [pc, #116]	@ (8005b90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2232      	movs	r2, #50	@ 0x32
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	4a1c      	ldr	r2, [pc, #112]	@ (8005b94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	0c9b      	lsrs	r3, r3, #18
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b2e:	e002      	b.n	8005b36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b36:	4b15      	ldr	r3, [pc, #84]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b42:	d102      	bne.n	8005b4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f2      	bne.n	8005b30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b4a:	4b10      	ldr	r3, [pc, #64]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b56:	d112      	bne.n	8005b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e011      	b.n	8005b80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b62:	4a0a      	ldr	r2, [pc, #40]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b6c:	e007      	b.n	8005b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b6e:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b76:	4a05      	ldr	r2, [pc, #20]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40007000 	.word	0x40007000
 8005b90:	20000000 	.word	0x20000000
 8005b94:	431bde83 	.word	0x431bde83

08005b98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b9c:	4b05      	ldr	r3, [pc, #20]	@ (8005bb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a04      	ldr	r2, [pc, #16]	@ (8005bb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ba6:	6093      	str	r3, [r2, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40007000 	.word	0x40007000

08005bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e2fe      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d075      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd6:	4b97      	ldr	r3, [pc, #604]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be0:	4b94      	ldr	r3, [pc, #592]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	d102      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x3e>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d002      	beq.n	8005bfc <HAL_RCC_OscConfig+0x44>
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d10b      	bne.n	8005c14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfc:	4b8d      	ldr	r3, [pc, #564]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d05b      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x108>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d157      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e2d9      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1c:	d106      	bne.n	8005c2c <HAL_RCC_OscConfig+0x74>
 8005c1e:	4b85      	ldr	r3, [pc, #532]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a84      	ldr	r2, [pc, #528]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e01d      	b.n	8005c68 <HAL_RCC_OscConfig+0xb0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCC_OscConfig+0x98>
 8005c36:	4b7f      	ldr	r3, [pc, #508]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b7c      	ldr	r3, [pc, #496]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a7b      	ldr	r2, [pc, #492]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCC_OscConfig+0xb0>
 8005c50:	4b78      	ldr	r3, [pc, #480]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a77      	ldr	r2, [pc, #476]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	4b75      	ldr	r3, [pc, #468]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a74      	ldr	r2, [pc, #464]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c70:	f7fe fc6c 	bl	800454c <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c78:	f7fe fc68 	bl	800454c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	@ 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e29e      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0xc0>
 8005c96:	e014      	b.n	8005cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fe fc58 	bl	800454c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7fe fc54 	bl	800454c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	@ 0x64
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e28a      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cb2:	4b60      	ldr	r3, [pc, #384]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0xe8>
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d075      	beq.n	8005dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cce:	4b59      	ldr	r3, [pc, #356]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cd8:	4b56      	ldr	r3, [pc, #344]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b0c      	cmp	r3, #12
 8005ce6:	d102      	bne.n	8005cee <HAL_RCC_OscConfig+0x136>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d002      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x13c>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d11f      	bne.n	8005d34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_RCC_OscConfig+0x154>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e25d      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0c:	4b49      	ldr	r3, [pc, #292]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	4946      	ldr	r1, [pc, #280]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d20:	4b45      	ldr	r3, [pc, #276]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe fbc5 	bl	80044b4 <HAL_InitTick>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d043      	beq.n	8005db8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e249      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d023      	beq.n	8005d84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a3c      	ldr	r2, [pc, #240]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fe fc00 	bl	800454c <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d50:	f7fe fbfc 	bl	800454c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e232      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d62:	4b34      	ldr	r3, [pc, #208]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d6e:	4b31      	ldr	r3, [pc, #196]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	061b      	lsls	r3, r3, #24
 8005d7c:	492d      	ldr	r1, [pc, #180]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	604b      	str	r3, [r1, #4]
 8005d82:	e01a      	b.n	8005dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d84:	4b2b      	ldr	r3, [pc, #172]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a2a      	ldr	r2, [pc, #168]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005d8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fe fbdc 	bl	800454c <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d98:	f7fe fbd8 	bl	800454c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e20e      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005daa:	4b22      	ldr	r3, [pc, #136]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x1e0>
 8005db6:	e000      	b.n	8005dba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d041      	beq.n	8005e4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01c      	beq.n	8005e08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dce:	4b19      	ldr	r3, [pc, #100]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd4:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dde:	f7fe fbb5 	bl	800454c <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de6:	f7fe fbb1 	bl	800454c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e1e7      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005df8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0ef      	beq.n	8005de6 <HAL_RCC_OscConfig+0x22e>
 8005e06:	e020      	b.n	8005e4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e08:	4b0a      	ldr	r3, [pc, #40]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e0e:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <HAL_RCC_OscConfig+0x27c>)
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fe fb98 	bl	800454c <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e1e:	e00d      	b.n	8005e3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e20:	f7fe fb94 	bl	800454c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d906      	bls.n	8005e3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e1ca      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000
 8005e38:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e3c:	4b8c      	ldr	r3, [pc, #560]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1ea      	bne.n	8005e20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80a6 	beq.w	8005fa4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e5c:	4b84      	ldr	r3, [pc, #528]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_RCC_OscConfig+0x2b4>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <HAL_RCC_OscConfig+0x2b6>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e72:	4b7f      	ldr	r3, [pc, #508]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e76:	4a7e      	ldr	r2, [pc, #504]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e7e:	4b7c      	ldr	r3, [pc, #496]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e8e:	4b79      	ldr	r3, [pc, #484]	@ (8006074 <HAL_RCC_OscConfig+0x4bc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d118      	bne.n	8005ecc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e9a:	4b76      	ldr	r3, [pc, #472]	@ (8006074 <HAL_RCC_OscConfig+0x4bc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a75      	ldr	r2, [pc, #468]	@ (8006074 <HAL_RCC_OscConfig+0x4bc>)
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ea6:	f7fe fb51 	bl	800454c <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eae:	f7fe fb4d 	bl	800454c <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e183      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8006074 <HAL_RCC_OscConfig+0x4bc>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f0      	beq.n	8005eae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d108      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x32e>
 8005ed4:	4b66      	ldr	r3, [pc, #408]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eda:	4a65      	ldr	r2, [pc, #404]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ee4:	e024      	b.n	8005f30 <HAL_RCC_OscConfig+0x378>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d110      	bne.n	8005f10 <HAL_RCC_OscConfig+0x358>
 8005eee:	4b60      	ldr	r3, [pc, #384]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef4:	4a5e      	ldr	r2, [pc, #376]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005ef6:	f043 0304 	orr.w	r3, r3, #4
 8005efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005efe:	4b5c      	ldr	r3, [pc, #368]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f04:	4a5a      	ldr	r2, [pc, #360]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f06:	f043 0301 	orr.w	r3, r3, #1
 8005f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f0e:	e00f      	b.n	8005f30 <HAL_RCC_OscConfig+0x378>
 8005f10:	4b57      	ldr	r3, [pc, #348]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f16:	4a56      	ldr	r2, [pc, #344]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f20:	4b53      	ldr	r3, [pc, #332]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	4a52      	ldr	r2, [pc, #328]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f28:	f023 0304 	bic.w	r3, r3, #4
 8005f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d016      	beq.n	8005f66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f38:	f7fe fb08 	bl	800454c <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f40:	f7fe fb04 	bl	800454c <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e138      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f56:	4b46      	ldr	r3, [pc, #280]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0ed      	beq.n	8005f40 <HAL_RCC_OscConfig+0x388>
 8005f64:	e015      	b.n	8005f92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f66:	f7fe faf1 	bl	800454c <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f6c:	e00a      	b.n	8005f84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6e:	f7fe faed 	bl	800454c <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e121      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f84:	4b3a      	ldr	r3, [pc, #232]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1ed      	bne.n	8005f6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f92:	7ffb      	ldrb	r3, [r7, #31]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f98:	4b35      	ldr	r3, [pc, #212]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9c:	4a34      	ldr	r2, [pc, #208]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fa2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d03c      	beq.n	800602a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01c      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005fc0:	f043 0301 	orr.w	r3, r3, #1
 8005fc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fe fac0 	bl	800454c <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fd0:	f7fe fabc 	bl	800454c <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e0f2      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fe2:	4b23      	ldr	r3, [pc, #140]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ef      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x418>
 8005ff0:	e01b      	b.n	800602a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006002:	f7fe faa3 	bl	800454c <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800600a:	f7fe fa9f 	bl	800454c <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e0d5      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800601c:	4b14      	ldr	r3, [pc, #80]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 800601e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ef      	bne.n	800600a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80c9 	beq.w	80061c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006034:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 030c 	and.w	r3, r3, #12
 800603c:	2b0c      	cmp	r3, #12
 800603e:	f000 8083 	beq.w	8006148 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d15e      	bne.n	8006108 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604a:	4b09      	ldr	r3, [pc, #36]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a08      	ldr	r2, [pc, #32]	@ (8006070 <HAL_RCC_OscConfig+0x4b8>)
 8006050:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006056:	f7fe fa79 	bl	800454c <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800605c:	e00c      	b.n	8006078 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605e:	f7fe fa75 	bl	800454c <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d905      	bls.n	8006078 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e0ab      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
 8006070:	40021000 	.word	0x40021000
 8006074:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006078:	4b55      	ldr	r3, [pc, #340]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ec      	bne.n	800605e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006084:	4b52      	ldr	r3, [pc, #328]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	4b52      	ldr	r3, [pc, #328]	@ (80061d4 <HAL_RCC_OscConfig+0x61c>)
 800608a:	4013      	ands	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6a11      	ldr	r1, [r2, #32]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006094:	3a01      	subs	r2, #1
 8006096:	0112      	lsls	r2, r2, #4
 8006098:	4311      	orrs	r1, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800609e:	0212      	lsls	r2, r2, #8
 80060a0:	4311      	orrs	r1, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060a6:	0852      	lsrs	r2, r2, #1
 80060a8:	3a01      	subs	r2, #1
 80060aa:	0552      	lsls	r2, r2, #21
 80060ac:	4311      	orrs	r1, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060b2:	0852      	lsrs	r2, r2, #1
 80060b4:	3a01      	subs	r2, #1
 80060b6:	0652      	lsls	r2, r2, #25
 80060b8:	4311      	orrs	r1, r2
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060be:	06d2      	lsls	r2, r2, #27
 80060c0:	430a      	orrs	r2, r1
 80060c2:	4943      	ldr	r1, [pc, #268]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c8:	4b41      	ldr	r3, [pc, #260]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a40      	ldr	r2, [pc, #256]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 80060ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060d4:	4b3e      	ldr	r3, [pc, #248]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a3d      	ldr	r2, [pc, #244]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 80060da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fe fa34 	bl	800454c <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fe fa30 	bl	800454c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e066      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fa:	4b35      	ldr	r3, [pc, #212]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0x530>
 8006106:	e05e      	b.n	80061c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006108:	4b31      	ldr	r3, [pc, #196]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a30      	ldr	r2, [pc, #192]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 800610e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7fe fa1a 	bl	800454c <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800611c:	f7fe fa16 	bl	800454c <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e04c      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800612e:	4b28      	ldr	r3, [pc, #160]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800613a:	4b25      	ldr	r3, [pc, #148]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	4924      	ldr	r1, [pc, #144]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 8006140:	4b25      	ldr	r3, [pc, #148]	@ (80061d8 <HAL_RCC_OscConfig+0x620>)
 8006142:	4013      	ands	r3, r2
 8006144:	60cb      	str	r3, [r1, #12]
 8006146:	e03e      	b.n	80061c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e039      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006154:	4b1e      	ldr	r3, [pc, #120]	@ (80061d0 <HAL_RCC_OscConfig+0x618>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f003 0203 	and.w	r2, r3, #3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	429a      	cmp	r2, r3
 8006166:	d12c      	bne.n	80061c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006172:	3b01      	subs	r3, #1
 8006174:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006176:	429a      	cmp	r2, r3
 8006178:	d123      	bne.n	80061c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006186:	429a      	cmp	r2, r3
 8006188:	d11b      	bne.n	80061c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006196:	429a      	cmp	r2, r3
 8006198:	d113      	bne.n	80061c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	3b01      	subs	r3, #1
 80061a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d109      	bne.n	80061c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	3b01      	subs	r3, #1
 80061bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061be:	429a      	cmp	r2, r3
 80061c0:	d001      	beq.n	80061c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40021000 	.word	0x40021000
 80061d4:	019f800c 	.word	0x019f800c
 80061d8:	feeefffc 	.word	0xfeeefffc

080061dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e11e      	b.n	8006432 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061f4:	4b91      	ldr	r3, [pc, #580]	@ (800643c <HAL_RCC_ClockConfig+0x260>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d910      	bls.n	8006224 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006202:	4b8e      	ldr	r3, [pc, #568]	@ (800643c <HAL_RCC_ClockConfig+0x260>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f023 020f 	bic.w	r2, r3, #15
 800620a:	498c      	ldr	r1, [pc, #560]	@ (800643c <HAL_RCC_ClockConfig+0x260>)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	4313      	orrs	r3, r2
 8006210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006212:	4b8a      	ldr	r3, [pc, #552]	@ (800643c <HAL_RCC_ClockConfig+0x260>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e106      	b.n	8006432 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d073      	beq.n	8006318 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d129      	bne.n	800628c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006238:	4b81      	ldr	r3, [pc, #516]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0f4      	b.n	8006432 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006248:	f000 f99e 	bl	8006588 <RCC_GetSysClockFreqFromPLLSource>
 800624c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4a7c      	ldr	r2, [pc, #496]	@ (8006444 <HAL_RCC_ClockConfig+0x268>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d93f      	bls.n	80062d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006256:	4b7a      	ldr	r3, [pc, #488]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800626a:	2b00      	cmp	r3, #0
 800626c:	d033      	beq.n	80062d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006272:	2b00      	cmp	r3, #0
 8006274:	d12f      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006276:	4b72      	ldr	r3, [pc, #456]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800627e:	4a70      	ldr	r2, [pc, #448]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006284:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006286:	2380      	movs	r3, #128	@ 0x80
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	e024      	b.n	80062d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d107      	bne.n	80062a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006294:	4b6a      	ldr	r3, [pc, #424]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0c6      	b.n	8006432 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062a4:	4b66      	ldr	r3, [pc, #408]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0be      	b.n	8006432 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80062b4:	f000 f8ce 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 80062b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	4a61      	ldr	r2, [pc, #388]	@ (8006444 <HAL_RCC_ClockConfig+0x268>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d909      	bls.n	80062d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062c2:	4b5f      	ldr	r3, [pc, #380]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ca:	4a5d      	ldr	r2, [pc, #372]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 80062cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062d2:	2380      	movs	r3, #128	@ 0x80
 80062d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062d6:	4b5a      	ldr	r3, [pc, #360]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f023 0203 	bic.w	r2, r3, #3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4957      	ldr	r1, [pc, #348]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e8:	f7fe f930 	bl	800454c <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f0:	f7fe f92c 	bl	800454c <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e095      	b.n	8006432 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	4b4e      	ldr	r3, [pc, #312]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 020c 	and.w	r2, r3, #12
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	429a      	cmp	r2, r3
 8006316:	d1eb      	bne.n	80062f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d023      	beq.n	800636c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006330:	4b43      	ldr	r3, [pc, #268]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	4a42      	ldr	r2, [pc, #264]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006336:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800633a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006348:	4b3d      	ldr	r3, [pc, #244]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006350:	4a3b      	ldr	r2, [pc, #236]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006352:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006356:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006358:	4b39      	ldr	r3, [pc, #228]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4936      	ldr	r1, [pc, #216]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006366:	4313      	orrs	r3, r2
 8006368:	608b      	str	r3, [r1, #8]
 800636a:	e008      	b.n	800637e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b80      	cmp	r3, #128	@ 0x80
 8006370:	d105      	bne.n	800637e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006372:	4b33      	ldr	r3, [pc, #204]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	4a32      	ldr	r2, [pc, #200]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006378:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800637c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800637e:	4b2f      	ldr	r3, [pc, #188]	@ (800643c <HAL_RCC_ClockConfig+0x260>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d21d      	bcs.n	80063c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638c:	4b2b      	ldr	r3, [pc, #172]	@ (800643c <HAL_RCC_ClockConfig+0x260>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f023 020f 	bic.w	r2, r3, #15
 8006394:	4929      	ldr	r1, [pc, #164]	@ (800643c <HAL_RCC_ClockConfig+0x260>)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800639c:	f7fe f8d6 	bl	800454c <HAL_GetTick>
 80063a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a2:	e00a      	b.n	80063ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a4:	f7fe f8d2 	bl	800454c <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e03b      	b.n	8006432 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ba:	4b20      	ldr	r3, [pc, #128]	@ (800643c <HAL_RCC_ClockConfig+0x260>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d1ed      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4917      	ldr	r1, [pc, #92]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f2:	4b13      	ldr	r3, [pc, #76]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	490f      	ldr	r1, [pc, #60]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006406:	f000 f825 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 800640a:	4602      	mov	r2, r0
 800640c:	4b0c      	ldr	r3, [pc, #48]	@ (8006440 <HAL_RCC_ClockConfig+0x264>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	490c      	ldr	r1, [pc, #48]	@ (8006448 <HAL_RCC_ClockConfig+0x26c>)
 8006418:	5ccb      	ldrb	r3, [r1, r3]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	4a0a      	ldr	r2, [pc, #40]	@ (800644c <HAL_RCC_ClockConfig+0x270>)
 8006424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <HAL_RCC_ClockConfig+0x274>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe f842 	bl	80044b4 <HAL_InitTick>
 8006430:	4603      	mov	r3, r0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40022000 	.word	0x40022000
 8006440:	40021000 	.word	0x40021000
 8006444:	04c4b400 	.word	0x04c4b400
 8006448:	08009130 	.word	0x08009130
 800644c:	20000000 	.word	0x20000000
 8006450:	20000050 	.word	0x20000050

08006454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800645a:	4b2c      	ldr	r3, [pc, #176]	@ (800650c <HAL_RCC_GetSysClockFreq+0xb8>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 030c 	and.w	r3, r3, #12
 8006462:	2b04      	cmp	r3, #4
 8006464:	d102      	bne.n	800646c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006466:	4b2a      	ldr	r3, [pc, #168]	@ (8006510 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	e047      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800646c:	4b27      	ldr	r3, [pc, #156]	@ (800650c <HAL_RCC_GetSysClockFreq+0xb8>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 030c 	and.w	r3, r3, #12
 8006474:	2b08      	cmp	r3, #8
 8006476:	d102      	bne.n	800647e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006478:	4b26      	ldr	r3, [pc, #152]	@ (8006514 <HAL_RCC_GetSysClockFreq+0xc0>)
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	e03e      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800647e:	4b23      	ldr	r3, [pc, #140]	@ (800650c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 030c 	and.w	r3, r3, #12
 8006486:	2b0c      	cmp	r3, #12
 8006488:	d136      	bne.n	80064f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800648a:	4b20      	ldr	r3, [pc, #128]	@ (800650c <HAL_RCC_GetSysClockFreq+0xb8>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006494:	4b1d      	ldr	r3, [pc, #116]	@ (800650c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	3301      	adds	r3, #1
 80064a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d10c      	bne.n	80064c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006514 <HAL_RCC_GetSysClockFreq+0xc0>)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b0:	4a16      	ldr	r2, [pc, #88]	@ (800650c <HAL_RCC_GetSysClockFreq+0xb8>)
 80064b2:	68d2      	ldr	r2, [r2, #12]
 80064b4:	0a12      	lsrs	r2, r2, #8
 80064b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	617b      	str	r3, [r7, #20]
      break;
 80064c0:	e00c      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064c2:	4a13      	ldr	r2, [pc, #76]	@ (8006510 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ca:	4a10      	ldr	r2, [pc, #64]	@ (800650c <HAL_RCC_GetSysClockFreq+0xb8>)
 80064cc:	68d2      	ldr	r2, [r2, #12]
 80064ce:	0a12      	lsrs	r2, r2, #8
 80064d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	617b      	str	r3, [r7, #20]
      break;
 80064da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064dc:	4b0b      	ldr	r3, [pc, #44]	@ (800650c <HAL_RCC_GetSysClockFreq+0xb8>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	0e5b      	lsrs	r3, r3, #25
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	3301      	adds	r3, #1
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	e001      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80064fc:	693b      	ldr	r3, [r7, #16]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40021000 	.word	0x40021000
 8006510:	00f42400 	.word	0x00f42400
 8006514:	016e3600 	.word	0x016e3600

08006518 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800651c:	4b03      	ldr	r3, [pc, #12]	@ (800652c <HAL_RCC_GetHCLKFreq+0x14>)
 800651e:	681b      	ldr	r3, [r3, #0]
}
 8006520:	4618      	mov	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000000 	.word	0x20000000

08006530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006534:	f7ff fff0 	bl	8006518 <HAL_RCC_GetHCLKFreq>
 8006538:	4602      	mov	r2, r0
 800653a:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <HAL_RCC_GetPCLK1Freq+0x24>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	4904      	ldr	r1, [pc, #16]	@ (8006558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006546:	5ccb      	ldrb	r3, [r1, r3]
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006550:	4618      	mov	r0, r3
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40021000 	.word	0x40021000
 8006558:	08009140 	.word	0x08009140

0800655c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006560:	f7ff ffda 	bl	8006518 <HAL_RCC_GetHCLKFreq>
 8006564:	4602      	mov	r2, r0
 8006566:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	0adb      	lsrs	r3, r3, #11
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	4904      	ldr	r1, [pc, #16]	@ (8006584 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006572:	5ccb      	ldrb	r3, [r1, r3]
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40021000 	.word	0x40021000
 8006584:	08009140 	.word	0x08009140

08006588 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800658e:	4b1e      	ldr	r3, [pc, #120]	@ (8006608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006598:	4b1b      	ldr	r3, [pc, #108]	@ (8006608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	091b      	lsrs	r3, r3, #4
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d10c      	bne.n	80065c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065ac:	4a17      	ldr	r2, [pc, #92]	@ (800660c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	4a14      	ldr	r2, [pc, #80]	@ (8006608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065b6:	68d2      	ldr	r2, [r2, #12]
 80065b8:	0a12      	lsrs	r2, r2, #8
 80065ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065be:	fb02 f303 	mul.w	r3, r2, r3
 80065c2:	617b      	str	r3, [r7, #20]
    break;
 80065c4:	e00c      	b.n	80065e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065c6:	4a12      	ldr	r2, [pc, #72]	@ (8006610 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065d0:	68d2      	ldr	r2, [r2, #12]
 80065d2:	0a12      	lsrs	r2, r2, #8
 80065d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065d8:	fb02 f303 	mul.w	r3, r2, r3
 80065dc:	617b      	str	r3, [r7, #20]
    break;
 80065de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065e0:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	0e5b      	lsrs	r3, r3, #25
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	3301      	adds	r3, #1
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80065fa:	687b      	ldr	r3, [r7, #4]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40021000 	.word	0x40021000
 800660c:	016e3600 	.word	0x016e3600
 8006610:	00f42400 	.word	0x00f42400

08006614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800661c:	2300      	movs	r3, #0
 800661e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006620:	2300      	movs	r3, #0
 8006622:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8098 	beq.w	8006762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006632:	2300      	movs	r3, #0
 8006634:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006636:	4b43      	ldr	r3, [pc, #268]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10d      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006642:	4b40      	ldr	r3, [pc, #256]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006646:	4a3f      	ldr	r2, [pc, #252]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800664c:	6593      	str	r3, [r2, #88]	@ 0x58
 800664e:	4b3d      	ldr	r3, [pc, #244]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006656:	60bb      	str	r3, [r7, #8]
 8006658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800665a:	2301      	movs	r3, #1
 800665c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800665e:	4b3a      	ldr	r3, [pc, #232]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a39      	ldr	r2, [pc, #228]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800666a:	f7fd ff6f 	bl	800454c <HAL_GetTick>
 800666e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006670:	e009      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006672:	f7fd ff6b 	bl	800454c <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d902      	bls.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	74fb      	strb	r3, [r7, #19]
        break;
 8006684:	e005      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006686:	4b30      	ldr	r3, [pc, #192]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0ef      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006692:	7cfb      	ldrb	r3, [r7, #19]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d159      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006698:	4b2a      	ldr	r3, [pc, #168]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800669a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01e      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d019      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066b4:	4b23      	ldr	r3, [pc, #140]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066c0:	4b20      	ldr	r3, [pc, #128]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066e0:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d016      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f2:	f7fd ff2b 	bl	800454c <HAL_GetTick>
 80066f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066f8:	e00b      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fd ff27 	bl	800454c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d902      	bls.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	74fb      	strb	r3, [r7, #19]
            break;
 8006710:	e006      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006712:	4b0c      	ldr	r3, [pc, #48]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0ec      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006726:	4b07      	ldr	r3, [pc, #28]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006734:	4903      	ldr	r1, [pc, #12]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800673c:	e008      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800673e:	7cfb      	ldrb	r3, [r7, #19]
 8006740:	74bb      	strb	r3, [r7, #18]
 8006742:	e005      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006744:	40021000 	.word	0x40021000
 8006748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674c:	7cfb      	ldrb	r3, [r7, #19]
 800674e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006750:	7c7b      	ldrb	r3, [r7, #17]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d105      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006756:	4ba7      	ldr	r3, [pc, #668]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675a:	4aa6      	ldr	r2, [pc, #664]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006760:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800676e:	4ba1      	ldr	r3, [pc, #644]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006774:	f023 0203 	bic.w	r2, r3, #3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	499d      	ldr	r1, [pc, #628]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006790:	4b98      	ldr	r3, [pc, #608]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006796:	f023 020c 	bic.w	r2, r3, #12
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	4995      	ldr	r1, [pc, #596]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067b2:	4b90      	ldr	r3, [pc, #576]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	498c      	ldr	r1, [pc, #560]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067d4:	4b87      	ldr	r3, [pc, #540]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	4984      	ldr	r1, [pc, #528]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067f6:	4b7f      	ldr	r3, [pc, #508]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	497b      	ldr	r1, [pc, #492]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006818:	4b76      	ldr	r3, [pc, #472]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	4973      	ldr	r1, [pc, #460]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006828:	4313      	orrs	r3, r2
 800682a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800683a:	4b6e      	ldr	r3, [pc, #440]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006840:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	496a      	ldr	r1, [pc, #424]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800684a:	4313      	orrs	r3, r2
 800684c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800685c:	4b65      	ldr	r3, [pc, #404]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006862:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	4962      	ldr	r1, [pc, #392]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686c:	4313      	orrs	r3, r2
 800686e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800687e:	4b5d      	ldr	r3, [pc, #372]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006884:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688c:	4959      	ldr	r1, [pc, #356]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068a0:	4b54      	ldr	r3, [pc, #336]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	4951      	ldr	r1, [pc, #324]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d015      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068c2:	4b4c      	ldr	r3, [pc, #304]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d0:	4948      	ldr	r1, [pc, #288]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e0:	d105      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068e2:	4b44      	ldr	r3, [pc, #272]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	4a43      	ldr	r2, [pc, #268]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ec:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d015      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068fa:	4b3e      	ldr	r3, [pc, #248]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006900:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	493a      	ldr	r1, [pc, #232]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006918:	d105      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800691a:	4b36      	ldr	r3, [pc, #216]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	4a35      	ldr	r2, [pc, #212]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006920:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006924:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d015      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006932:	4b30      	ldr	r3, [pc, #192]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006938:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006940:	492c      	ldr	r1, [pc, #176]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006950:	d105      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006952:	4b28      	ldr	r3, [pc, #160]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	4a27      	ldr	r2, [pc, #156]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006958:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800695c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d015      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800696a:	4b22      	ldr	r3, [pc, #136]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006970:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006978:	491e      	ldr	r1, [pc, #120]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006988:	d105      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800698a:	4b1a      	ldr	r3, [pc, #104]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	4a19      	ldr	r2, [pc, #100]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006990:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006994:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d015      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069a2:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b0:	4910      	ldr	r1, [pc, #64]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069c0:	d105      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	4a0b      	ldr	r2, [pc, #44]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d018      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069da:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e8:	4902      	ldr	r1, [pc, #8]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	e001      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80069f4:	40021000 	.word	0x40021000
 80069f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069fe:	d105      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a00:	4b21      	ldr	r3, [pc, #132]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a20      	ldr	r2, [pc, #128]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a0a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a18:	4b1b      	ldr	r3, [pc, #108]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a26:	4918      	ldr	r1, [pc, #96]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a36:	d105      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a38:	4b13      	ldr	r3, [pc, #76]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a12      	ldr	r2, [pc, #72]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a42:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d015      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a50:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a5e:	490a      	ldr	r1, [pc, #40]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a6e:	d105      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a04      	ldr	r2, [pc, #16]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006a7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40021000 	.word	0x40021000

08006a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e042      	b.n	8006b24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f83b 	bl	8006b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2224      	movs	r2, #36	@ 0x24
 8006aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fc84 	bl	80073e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f985 	bl	8006dec <UART_SetConfig>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e01b      	b.n	8006b24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0201 	orr.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fd03 	bl	8007528 <UART_CheckIdleState>
 8006b22:	4603      	mov	r3, r0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	@ 0x28
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d17b      	bne.n	8006c52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_UART_Transmit+0x26>
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e074      	b.n	8006c54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2221      	movs	r2, #33	@ 0x21
 8006b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b7a:	f7fd fce7 	bl	800454c <HAL_GetTick>
 8006b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	88fa      	ldrh	r2, [r7, #6]
 8006b8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b98:	d108      	bne.n	8006bac <HAL_UART_Transmit+0x6c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	e003      	b.n	8006bb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bb4:	e030      	b.n	8006c18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2180      	movs	r1, #128	@ 0x80
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fd5b 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e03d      	b.n	8006c54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10b      	bne.n	8006bf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e007      	b.n	8006c06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	781a      	ldrb	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	3301      	adds	r3, #1
 8006c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1c8      	bne.n	8006bb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2140      	movs	r1, #64	@ 0x40
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fd24 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e006      	b.n	8006c54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c52:	2302      	movs	r3, #2
  }
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3720      	adds	r7, #32
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	@ 0x28
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	f040 80b5 	bne.w	8006de2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_UART_Receive+0x28>
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0ad      	b.n	8006de4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2222      	movs	r2, #34	@ 0x22
 8006c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c9e:	f7fd fc55 	bl	800454c <HAL_GetTick>
 8006ca2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	88fa      	ldrh	r2, [r7, #6]
 8006ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cbc:	d10e      	bne.n	8006cdc <HAL_UART_Receive+0x80>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d105      	bne.n	8006cd2 <HAL_UART_Receive+0x76>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006ccc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cd0:	e02d      	b.n	8006d2e <HAL_UART_Receive+0xd2>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	22ff      	movs	r2, #255	@ 0xff
 8006cd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cda:	e028      	b.n	8006d2e <HAL_UART_Receive+0xd2>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10d      	bne.n	8006d00 <HAL_UART_Receive+0xa4>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d104      	bne.n	8006cf6 <HAL_UART_Receive+0x9a>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	22ff      	movs	r2, #255	@ 0xff
 8006cf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cf4:	e01b      	b.n	8006d2e <HAL_UART_Receive+0xd2>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	227f      	movs	r2, #127	@ 0x7f
 8006cfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cfe:	e016      	b.n	8006d2e <HAL_UART_Receive+0xd2>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d08:	d10d      	bne.n	8006d26 <HAL_UART_Receive+0xca>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d104      	bne.n	8006d1c <HAL_UART_Receive+0xc0>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	227f      	movs	r2, #127	@ 0x7f
 8006d16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d1a:	e008      	b.n	8006d2e <HAL_UART_Receive+0xd2>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	223f      	movs	r2, #63	@ 0x3f
 8006d20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d24:	e003      	b.n	8006d2e <HAL_UART_Receive+0xd2>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d34:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d3e:	d108      	bne.n	8006d52 <HAL_UART_Receive+0xf6>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	e003      	b.n	8006d5a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006d5a:	e036      	b.n	8006dca <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2200      	movs	r2, #0
 8006d64:	2120      	movs	r1, #32
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fc88 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e032      	b.n	8006de4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10c      	bne.n	8006d9e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	8a7b      	ldrh	r3, [r7, #18]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	3302      	adds	r3, #2
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	e00c      	b.n	8006db8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	8a7b      	ldrh	r3, [r7, #18]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	4013      	ands	r3, r2
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	3301      	adds	r3, #1
 8006db6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1c2      	bne.n	8006d5c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e000      	b.n	8006de4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006de2:	2302      	movs	r3, #2
  }
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df0:	b08c      	sub	sp, #48	@ 0x30
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4baa      	ldr	r3, [pc, #680]	@ (80070c4 <UART_SetConfig+0x2d8>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a9f      	ldr	r2, [pc, #636]	@ (80070c8 <UART_SetConfig+0x2dc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e54:	4313      	orrs	r3, r2
 8006e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006e62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	f023 010f 	bic.w	r1, r3, #15
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a90      	ldr	r2, [pc, #576]	@ (80070cc <UART_SetConfig+0x2e0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d125      	bne.n	8006edc <UART_SetConfig+0xf0>
 8006e90:	4b8f      	ldr	r3, [pc, #572]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d81a      	bhi.n	8006ed4 <UART_SetConfig+0xe8>
 8006e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea4 <UART_SetConfig+0xb8>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006ec5 	.word	0x08006ec5
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ecd 	.word	0x08006ecd
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eba:	e116      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec2:	e112      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eca:	e10e      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed2:	e10a      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eda:	e106      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a7c      	ldr	r2, [pc, #496]	@ (80070d4 <UART_SetConfig+0x2e8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d138      	bne.n	8006f58 <UART_SetConfig+0x16c>
 8006ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8006ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eec:	f003 030c 	and.w	r3, r3, #12
 8006ef0:	2b0c      	cmp	r3, #12
 8006ef2:	d82d      	bhi.n	8006f50 <UART_SetConfig+0x164>
 8006ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8006efc <UART_SetConfig+0x110>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f31 	.word	0x08006f31
 8006f00:	08006f51 	.word	0x08006f51
 8006f04:	08006f51 	.word	0x08006f51
 8006f08:	08006f51 	.word	0x08006f51
 8006f0c:	08006f41 	.word	0x08006f41
 8006f10:	08006f51 	.word	0x08006f51
 8006f14:	08006f51 	.word	0x08006f51
 8006f18:	08006f51 	.word	0x08006f51
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f51 	.word	0x08006f51
 8006f24:	08006f51 	.word	0x08006f51
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f49 	.word	0x08006f49
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f36:	e0d8      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3e:	e0d4      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f46:	e0d0      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4e:	e0cc      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f56:	e0c8      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80070d8 <UART_SetConfig+0x2ec>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d125      	bne.n	8006fae <UART_SetConfig+0x1c2>
 8006f62:	4b5b      	ldr	r3, [pc, #364]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f6c:	2b30      	cmp	r3, #48	@ 0x30
 8006f6e:	d016      	beq.n	8006f9e <UART_SetConfig+0x1b2>
 8006f70:	2b30      	cmp	r3, #48	@ 0x30
 8006f72:	d818      	bhi.n	8006fa6 <UART_SetConfig+0x1ba>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d00a      	beq.n	8006f8e <UART_SetConfig+0x1a2>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d814      	bhi.n	8006fa6 <UART_SetConfig+0x1ba>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <UART_SetConfig+0x19a>
 8006f80:	2b10      	cmp	r3, #16
 8006f82:	d008      	beq.n	8006f96 <UART_SetConfig+0x1aa>
 8006f84:	e00f      	b.n	8006fa6 <UART_SetConfig+0x1ba>
 8006f86:	2300      	movs	r3, #0
 8006f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8c:	e0ad      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f94:	e0a9      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f96:	2304      	movs	r3, #4
 8006f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9c:	e0a5      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f9e:	2308      	movs	r3, #8
 8006fa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa4:	e0a1      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006fa6:	2310      	movs	r3, #16
 8006fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fac:	e09d      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80070dc <UART_SetConfig+0x2f0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d125      	bne.n	8007004 <UART_SetConfig+0x218>
 8006fb8:	4b45      	ldr	r3, [pc, #276]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fc4:	d016      	beq.n	8006ff4 <UART_SetConfig+0x208>
 8006fc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fc8:	d818      	bhi.n	8006ffc <UART_SetConfig+0x210>
 8006fca:	2b80      	cmp	r3, #128	@ 0x80
 8006fcc:	d00a      	beq.n	8006fe4 <UART_SetConfig+0x1f8>
 8006fce:	2b80      	cmp	r3, #128	@ 0x80
 8006fd0:	d814      	bhi.n	8006ffc <UART_SetConfig+0x210>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <UART_SetConfig+0x1f0>
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d008      	beq.n	8006fec <UART_SetConfig+0x200>
 8006fda:	e00f      	b.n	8006ffc <UART_SetConfig+0x210>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e082      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e07e      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e07a      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffa:	e076      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007002:	e072      	b.n	80070ea <UART_SetConfig+0x2fe>
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a35      	ldr	r2, [pc, #212]	@ (80070e0 <UART_SetConfig+0x2f4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d12a      	bne.n	8007064 <UART_SetConfig+0x278>
 800700e:	4b30      	ldr	r3, [pc, #192]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007018:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800701c:	d01a      	beq.n	8007054 <UART_SetConfig+0x268>
 800701e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007022:	d81b      	bhi.n	800705c <UART_SetConfig+0x270>
 8007024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007028:	d00c      	beq.n	8007044 <UART_SetConfig+0x258>
 800702a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800702e:	d815      	bhi.n	800705c <UART_SetConfig+0x270>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <UART_SetConfig+0x250>
 8007034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007038:	d008      	beq.n	800704c <UART_SetConfig+0x260>
 800703a:	e00f      	b.n	800705c <UART_SetConfig+0x270>
 800703c:	2300      	movs	r3, #0
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e052      	b.n	80070ea <UART_SetConfig+0x2fe>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704a:	e04e      	b.n	80070ea <UART_SetConfig+0x2fe>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007052:	e04a      	b.n	80070ea <UART_SetConfig+0x2fe>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705a:	e046      	b.n	80070ea <UART_SetConfig+0x2fe>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007062:	e042      	b.n	80070ea <UART_SetConfig+0x2fe>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a17      	ldr	r2, [pc, #92]	@ (80070c8 <UART_SetConfig+0x2dc>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d13a      	bne.n	80070e4 <UART_SetConfig+0x2f8>
 800706e:	4b18      	ldr	r3, [pc, #96]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007074:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800707c:	d01a      	beq.n	80070b4 <UART_SetConfig+0x2c8>
 800707e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007082:	d81b      	bhi.n	80070bc <UART_SetConfig+0x2d0>
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007088:	d00c      	beq.n	80070a4 <UART_SetConfig+0x2b8>
 800708a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708e:	d815      	bhi.n	80070bc <UART_SetConfig+0x2d0>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <UART_SetConfig+0x2b0>
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007098:	d008      	beq.n	80070ac <UART_SetConfig+0x2c0>
 800709a:	e00f      	b.n	80070bc <UART_SetConfig+0x2d0>
 800709c:	2300      	movs	r3, #0
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e022      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070aa:	e01e      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	e01a      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e016      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e012      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070c4:	cfff69f3 	.word	0xcfff69f3
 80070c8:	40008000 	.word	0x40008000
 80070cc:	40013800 	.word	0x40013800
 80070d0:	40021000 	.word	0x40021000
 80070d4:	40004400 	.word	0x40004400
 80070d8:	40004800 	.word	0x40004800
 80070dc:	40004c00 	.word	0x40004c00
 80070e0:	40005000 	.word	0x40005000
 80070e4:	2310      	movs	r3, #16
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4aae      	ldr	r2, [pc, #696]	@ (80073a8 <UART_SetConfig+0x5bc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	f040 8097 	bne.w	8007224 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d823      	bhi.n	8007146 <UART_SetConfig+0x35a>
 80070fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <UART_SetConfig+0x318>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007129 	.word	0x08007129
 8007108:	08007147 	.word	0x08007147
 800710c:	08007131 	.word	0x08007131
 8007110:	08007147 	.word	0x08007147
 8007114:	08007137 	.word	0x08007137
 8007118:	08007147 	.word	0x08007147
 800711c:	08007147 	.word	0x08007147
 8007120:	08007147 	.word	0x08007147
 8007124:	0800713f 	.word	0x0800713f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007128:	f7ff fa02 	bl	8006530 <HAL_RCC_GetPCLK1Freq>
 800712c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800712e:	e010      	b.n	8007152 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007130:	4b9e      	ldr	r3, [pc, #632]	@ (80073ac <UART_SetConfig+0x5c0>)
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007134:	e00d      	b.n	8007152 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007136:	f7ff f98d 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 800713a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800713c:	e009      	b.n	8007152 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007144:	e005      	b.n	8007152 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007150:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8130 	beq.w	80073ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	4a94      	ldr	r2, [pc, #592]	@ (80073b0 <UART_SetConfig+0x5c4>)
 8007160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007164:	461a      	mov	r2, r3
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	fbb3 f3f2 	udiv	r3, r3, r2
 800716c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	4413      	add	r3, r2
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	429a      	cmp	r2, r3
 800717c:	d305      	bcc.n	800718a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	429a      	cmp	r2, r3
 8007188:	d903      	bls.n	8007192 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007190:	e113      	b.n	80073ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	2200      	movs	r2, #0
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	60fa      	str	r2, [r7, #12]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	4a84      	ldr	r2, [pc, #528]	@ (80073b0 <UART_SetConfig+0x5c4>)
 80071a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2200      	movs	r2, #0
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071b4:	f7f9 f884 	bl	80002c0 <__aeabi_uldivmod>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	020b      	lsls	r3, r1, #8
 80071ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071ce:	0202      	lsls	r2, r0, #8
 80071d0:	6979      	ldr	r1, [r7, #20]
 80071d2:	6849      	ldr	r1, [r1, #4]
 80071d4:	0849      	lsrs	r1, r1, #1
 80071d6:	2000      	movs	r0, #0
 80071d8:	460c      	mov	r4, r1
 80071da:	4605      	mov	r5, r0
 80071dc:	eb12 0804 	adds.w	r8, r2, r4
 80071e0:	eb43 0905 	adc.w	r9, r3, r5
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	469a      	mov	sl, r3
 80071ec:	4693      	mov	fp, r2
 80071ee:	4652      	mov	r2, sl
 80071f0:	465b      	mov	r3, fp
 80071f2:	4640      	mov	r0, r8
 80071f4:	4649      	mov	r1, r9
 80071f6:	f7f9 f863 	bl	80002c0 <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4613      	mov	r3, r2
 8007200:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007208:	d308      	bcc.n	800721c <UART_SetConfig+0x430>
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007210:	d204      	bcs.n	800721c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a3a      	ldr	r2, [r7, #32]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	e0ce      	b.n	80073ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007222:	e0ca      	b.n	80073ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800722c:	d166      	bne.n	80072fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800722e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007232:	2b08      	cmp	r3, #8
 8007234:	d827      	bhi.n	8007286 <UART_SetConfig+0x49a>
 8007236:	a201      	add	r2, pc, #4	@ (adr r2, 800723c <UART_SetConfig+0x450>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	08007261 	.word	0x08007261
 8007240:	08007269 	.word	0x08007269
 8007244:	08007271 	.word	0x08007271
 8007248:	08007287 	.word	0x08007287
 800724c:	08007277 	.word	0x08007277
 8007250:	08007287 	.word	0x08007287
 8007254:	08007287 	.word	0x08007287
 8007258:	08007287 	.word	0x08007287
 800725c:	0800727f 	.word	0x0800727f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007260:	f7ff f966 	bl	8006530 <HAL_RCC_GetPCLK1Freq>
 8007264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007266:	e014      	b.n	8007292 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007268:	f7ff f978 	bl	800655c <HAL_RCC_GetPCLK2Freq>
 800726c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800726e:	e010      	b.n	8007292 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007270:	4b4e      	ldr	r3, [pc, #312]	@ (80073ac <UART_SetConfig+0x5c0>)
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007274:	e00d      	b.n	8007292 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007276:	f7ff f8ed 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 800727a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800727c:	e009      	b.n	8007292 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007284:	e005      	b.n	8007292 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8090 	beq.w	80073ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	4a44      	ldr	r2, [pc, #272]	@ (80073b0 <UART_SetConfig+0x5c4>)
 80072a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ac:	005a      	lsls	r2, r3, #1
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	441a      	add	r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80072be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	2b0f      	cmp	r3, #15
 80072c4:	d916      	bls.n	80072f4 <UART_SetConfig+0x508>
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072cc:	d212      	bcs.n	80072f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f023 030f 	bic.w	r3, r3, #15
 80072d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	8bfb      	ldrh	r3, [r7, #30]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	8bfa      	ldrh	r2, [r7, #30]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	e062      	b.n	80073ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072fa:	e05e      	b.n	80073ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007300:	2b08      	cmp	r3, #8
 8007302:	d828      	bhi.n	8007356 <UART_SetConfig+0x56a>
 8007304:	a201      	add	r2, pc, #4	@ (adr r2, 800730c <UART_SetConfig+0x520>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	08007357 	.word	0x08007357
 800731c:	08007347 	.word	0x08007347
 8007320:	08007357 	.word	0x08007357
 8007324:	08007357 	.word	0x08007357
 8007328:	08007357 	.word	0x08007357
 800732c:	0800734f 	.word	0x0800734f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007330:	f7ff f8fe 	bl	8006530 <HAL_RCC_GetPCLK1Freq>
 8007334:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007336:	e014      	b.n	8007362 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007338:	f7ff f910 	bl	800655c <HAL_RCC_GetPCLK2Freq>
 800733c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800733e:	e010      	b.n	8007362 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007340:	4b1a      	ldr	r3, [pc, #104]	@ (80073ac <UART_SetConfig+0x5c0>)
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007344:	e00d      	b.n	8007362 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007346:	f7ff f885 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 800734a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800734c:	e009      	b.n	8007362 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007354:	e005      	b.n	8007362 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007360:	bf00      	nop
    }

    if (pclk != 0U)
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	2b00      	cmp	r3, #0
 8007366:	d028      	beq.n	80073ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	4a10      	ldr	r2, [pc, #64]	@ (80073b0 <UART_SetConfig+0x5c4>)
 800736e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007372:	461a      	mov	r2, r3
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	fbb3 f2f2 	udiv	r2, r3, r2
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	441a      	add	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d910      	bls.n	80073b4 <UART_SetConfig+0x5c8>
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007398:	d20c      	bcs.n	80073b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	b29a      	uxth	r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60da      	str	r2, [r3, #12]
 80073a4:	e009      	b.n	80073ba <UART_SetConfig+0x5ce>
 80073a6:	bf00      	nop
 80073a8:	40008000 	.word	0x40008000
 80073ac:	00f42400 	.word	0x00f42400
 80073b0:	0801e848 	.word	0x0801e848
      }
      else
      {
        ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2201      	movs	r2, #1
 80073be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2200      	movs	r2, #0
 80073ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2200      	movs	r2, #0
 80073d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80073d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3730      	adds	r7, #48	@ 0x30
 80073de:	46bd      	mov	sp, r7
 80073e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080073e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01a      	beq.n	80074fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074e2:	d10a      	bne.n	80074fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	605a      	str	r2, [r3, #4]
  }
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b098      	sub	sp, #96	@ 0x60
 800752c:	af02      	add	r7, sp, #8
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007538:	f7fd f808 	bl	800454c <HAL_GetTick>
 800753c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b08      	cmp	r3, #8
 800754a:	d12f      	bne.n	80075ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800754c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007554:	2200      	movs	r2, #0
 8007556:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f88e 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d022      	beq.n	80075ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800757a:	653b      	str	r3, [r7, #80]	@ 0x50
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007584:	647b      	str	r3, [r7, #68]	@ 0x44
 8007586:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800758a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e063      	b.n	8007674 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d149      	bne.n	800764e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075c2:	2200      	movs	r2, #0
 80075c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f857 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d03c      	beq.n	800764e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	623b      	str	r3, [r7, #32]
   return(result);
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e6      	bne.n	80075d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	60fb      	str	r3, [r7, #12]
   return(result);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3308      	adds	r3, #8
 8007624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007626:	61fa      	str	r2, [r7, #28]
 8007628:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	69b9      	ldr	r1, [r7, #24]
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	617b      	str	r3, [r7, #20]
   return(result);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e5      	bne.n	8007606 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e012      	b.n	8007674 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3758      	adds	r7, #88	@ 0x58
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768c:	e04f      	b.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007694:	d04b      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007696:	f7fc ff59 	bl	800454c <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d302      	bcc.n	80076ac <UART_WaitOnFlagUntilTimeout+0x30>
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e04e      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d037      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b80      	cmp	r3, #128	@ 0x80
 80076c2:	d034      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	d031      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d110      	bne.n	80076fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2208      	movs	r2, #8
 80076de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f838 	bl	8007756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2208      	movs	r2, #8
 80076ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e029      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007708:	d111      	bne.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f81e 	bl	8007756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e00f      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69da      	ldr	r2, [r3, #28]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	429a      	cmp	r2, r3
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	429a      	cmp	r2, r3
 800774a:	d0a0      	beq.n	800768e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007756:	b480      	push	{r7}
 8007758:	b095      	sub	sp, #84	@ 0x54
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800776c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800777c:	643b      	str	r3, [r7, #64]	@ 0x40
 800777e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007782:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e3      	bne.n	8007790 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d118      	bne.n	8007802 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f023 0310 	bic.w	r3, r3, #16
 80077e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6979      	ldr	r1, [r7, #20]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	613b      	str	r3, [r7, #16]
   return(result);
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e6      	bne.n	80077d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007816:	bf00      	nop
 8007818:	3754      	adds	r7, #84	@ 0x54
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <MX_TOF_Init>:
static void handle_cmd(uint8_t cmd);
static uint8_t get_key(void);
static uint32_t com_has_data(void);

void MX_TOF_Init(void)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L8A1_SimpleRanging_Init();
 8007826:	f000 f809 	bl	800783c <MX_53L8A1_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 800782a:	bf00      	nop
 800782c:	bd80      	pop	{r7, pc}

0800782e <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L8A1_SimpleRanging_Process();
 8007832:	f000 f863 	bl	80078fc <MX_53L8A1_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8007836:	bf00      	nop
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <MX_53L8A1_SimpleRanging_Init>:

static void MX_53L8A1_SimpleRanging_Init(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
	COM_InitTypeDef COM_Init;
	COM_Init.BaudRate = 115200;    // Example baud rate
 8007842:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8007846:	603b      	str	r3, [r7, #0]
	COM_Init.WordLength = UART_WORDLENGTH_8B;
 8007848:	2300      	movs	r3, #0
 800784a:	607b      	str	r3, [r7, #4]
	COM_Init.StopBits = UART_STOPBITS_1;
 800784c:	2300      	movs	r3, #0
 800784e:	813b      	strh	r3, [r7, #8]
	COM_Init.Parity = UART_PARITY_NONE;
 8007850:	2300      	movs	r3, #0
 8007852:	817b      	strh	r3, [r7, #10]
	//COM_Init.Mode = UART_MODE_TX_RX;
	COM_Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007854:	2300      	movs	r3, #0
 8007856:	81bb      	strh	r3, [r7, #12]

	BSP_COM_Init(COM1, &COM_Init);
 8007858:	463b      	mov	r3, r7
 800785a:	4619      	mov	r1, r3
 800785c:	2000      	movs	r0, #0
 800785e:	f7fc fd3f 	bl	80042e0 <BSP_COM_Init>


  /* Initialize button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8007862:	2101      	movs	r1, #1
 8007864:	2000      	movs	r0, #0
 8007866:	f7fc fccd 	bl	8004204 <BSP_PB_Init>

  /* Sensor reset */
  HAL_GPIO_WritePin(VL53L8A1_PWR_EN_C_PORT, VL53L8A1_PWR_EN_C_PIN, GPIO_PIN_RESET);
 800786a:	2200      	movs	r2, #0
 800786c:	2101      	movs	r1, #1
 800786e:	481d      	ldr	r0, [pc, #116]	@ (80078e4 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8007870:	f7fd fa3e 	bl	8004cf0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007874:	2002      	movs	r0, #2
 8007876:	f7fc fe75 	bl	8004564 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_PWR_EN_C_PORT, VL53L8A1_PWR_EN_C_PIN, GPIO_PIN_SET);
 800787a:	2201      	movs	r2, #1
 800787c:	2101      	movs	r1, #1
 800787e:	4819      	ldr	r0, [pc, #100]	@ (80078e4 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8007880:	f7fd fa36 	bl	8004cf0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007884:	2002      	movs	r0, #2
 8007886:	f7fc fe6d 	bl	8004564 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_LPn_C_PORT, VL53L8A1_LPn_C_PIN, GPIO_PIN_RESET);
 800788a:	2200      	movs	r2, #0
 800788c:	2110      	movs	r1, #16
 800788e:	4815      	ldr	r0, [pc, #84]	@ (80078e4 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8007890:	f7fd fa2e 	bl	8004cf0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007894:	2002      	movs	r0, #2
 8007896:	f7fc fe65 	bl	8004564 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_LPn_C_PORT, VL53L8A1_LPn_C_PIN, GPIO_PIN_SET);
 800789a:	2201      	movs	r2, #1
 800789c:	2110      	movs	r1, #16
 800789e:	4811      	ldr	r0, [pc, #68]	@ (80078e4 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 80078a0:	f7fd fa26 	bl	8004cf0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80078a4:	2002      	movs	r0, #2
 80078a6:	f7fc fe5d 	bl	8004564 <HAL_Delay>

  printf("\033[2H\033[2J");
 80078aa:	480f      	ldr	r0, [pc, #60]	@ (80078e8 <MX_53L8A1_SimpleRanging_Init+0xac>)
 80078ac:	f000 fbb4 	bl	8008018 <iprintf>
  printf("53L8A1 Simple Ranging demo application\n");
 80078b0:	480e      	ldr	r0, [pc, #56]	@ (80078ec <MX_53L8A1_SimpleRanging_Init+0xb0>)
 80078b2:	f000 fc21 	bl	80080f8 <puts>
  printf("Sensor initialization...\n");
 80078b6:	480e      	ldr	r0, [pc, #56]	@ (80078f0 <MX_53L8A1_SimpleRanging_Init+0xb4>)
 80078b8:	f000 fc1e 	bl	80080f8 <puts>

  status = VL53L8A1_RANGING_SENSOR_Init(VL53L8A1_DEV_CENTER);
 80078bc:	2001      	movs	r0, #1
 80078be:	f7f9 fa6c 	bl	8000d9a <VL53L8A1_RANGING_SENSOR_Init>
 80078c2:	4603      	mov	r3, r0
 80078c4:	4a0b      	ldr	r2, [pc, #44]	@ (80078f4 <MX_53L8A1_SimpleRanging_Init+0xb8>)
 80078c6:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80078c8:	4b0a      	ldr	r3, [pc, #40]	@ (80078f4 <MX_53L8A1_SimpleRanging_Init+0xb8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <MX_53L8A1_SimpleRanging_Init+0x9e>
  {
    printf("VL53L8A1_RANGING_SENSOR_Init failed\n");
 80078d0:	4809      	ldr	r0, [pc, #36]	@ (80078f8 <MX_53L8A1_SimpleRanging_Init+0xbc>)
 80078d2:	f000 fc11 	bl	80080f8 <puts>
    while (1);
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <MX_53L8A1_SimpleRanging_Init+0x9a>
  }
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	48000400 	.word	0x48000400
 80078e8:	08008ed0 	.word	0x08008ed0
 80078ec:	08008edc 	.word	0x08008edc
 80078f0:	08008f04 	.word	0x08008f04
 80078f4:	20003018 	.word	0x20003018
 80078f8:	08008f20 	.word	0x08008f20

080078fc <MX_53L8A1_SimpleRanging_Process>:

static void MX_53L8A1_SimpleRanging_Process(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
  uint32_t Id;

  VL53L8A1_RANGING_SENSOR_ReadID(VL53L8A1_DEV_CENTER, &Id);
 8007902:	1d3b      	adds	r3, r7, #4
 8007904:	4619      	mov	r1, r3
 8007906:	2001      	movs	r0, #1
 8007908:	f7f9 fa5c 	bl	8000dc4 <VL53L8A1_RANGING_SENSOR_ReadID>
  VL53L8A1_RANGING_SENSOR_GetCapabilities(VL53L8A1_DEV_CENTER, &Cap);
 800790c:	4921      	ldr	r1, [pc, #132]	@ (8007994 <MX_53L8A1_SimpleRanging_Process+0x98>)
 800790e:	2001      	movs	r0, #1
 8007910:	f7f9 fa80 	bl	8000e14 <VL53L8A1_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8007914:	4b20      	ldr	r3, [pc, #128]	@ (8007998 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 800791a:	4b1f      	ldr	r3, [pc, #124]	@ (8007998 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 800791c:	221e      	movs	r2, #30
 800791e:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8007920:	4b1d      	ldr	r3, [pc, #116]	@ (8007998 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 8007922:	220a      	movs	r2, #10
 8007924:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8007926:	4b1c      	ldr	r3, [pc, #112]	@ (8007998 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 8007928:	2200      	movs	r2, #0
 800792a:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 800792c:	4b1a      	ldr	r3, [pc, #104]	@ (8007998 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 800792e:	2200      	movs	r2, #0
 8007930:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L8A1_RANGING_SENSOR_ConfigProfile(VL53L8A1_DEV_CENTER, &Profile);
 8007932:	4919      	ldr	r1, [pc, #100]	@ (8007998 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 8007934:	2001      	movs	r0, #1
 8007936:	f7f9 fa95 	bl	8000e64 <VL53L8A1_RANGING_SENSOR_ConfigProfile>

  status = VL53L8A1_RANGING_SENSOR_Start(VL53L8A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 800793a:	2101      	movs	r1, #1
 800793c:	2001      	movs	r0, #1
 800793e:	f7f9 fae1 	bl	8000f04 <VL53L8A1_RANGING_SENSOR_Start>
 8007942:	4603      	mov	r3, r0
 8007944:	4a15      	ldr	r2, [pc, #84]	@ (800799c <MX_53L8A1_SimpleRanging_Process+0xa0>)
 8007946:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8007948:	4b14      	ldr	r3, [pc, #80]	@ (800799c <MX_53L8A1_SimpleRanging_Process+0xa0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <MX_53L8A1_SimpleRanging_Process+0x5e>
  {
    printf("VL53L8A1_RANGING_SENSOR_Start failed\n");
 8007950:	4813      	ldr	r0, [pc, #76]	@ (80079a0 <MX_53L8A1_SimpleRanging_Process+0xa4>)
 8007952:	f000 fbd1 	bl	80080f8 <puts>
    while (1);
 8007956:	bf00      	nop
 8007958:	e7fd      	b.n	8007956 <MX_53L8A1_SimpleRanging_Process+0x5a>
  }

  while (1)
  {
    /* polling mode */
    status = VL53L8A1_RANGING_SENSOR_GetDistance(VL53L8A1_DEV_CENTER, &Result);
 800795a:	4912      	ldr	r1, [pc, #72]	@ (80079a4 <MX_53L8A1_SimpleRanging_Process+0xa8>)
 800795c:	2001      	movs	r0, #1
 800795e:	f7f9 faa9 	bl	8000eb4 <VL53L8A1_RANGING_SENSOR_GetDistance>
 8007962:	4603      	mov	r3, r0
 8007964:	4a0d      	ldr	r2, [pc, #52]	@ (800799c <MX_53L8A1_SimpleRanging_Process+0xa0>)
 8007966:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 8007968:	4b0c      	ldr	r3, [pc, #48]	@ (800799c <MX_53L8A1_SimpleRanging_Process+0xa0>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <MX_53L8A1_SimpleRanging_Process+0x7a>
    {
      print_result(&Result);
 8007970:	480c      	ldr	r0, [pc, #48]	@ (80079a4 <MX_53L8A1_SimpleRanging_Process+0xa8>)
 8007972:	f000 f819 	bl	80079a8 <print_result>
    }

    if (com_has_data())
 8007976:	f000 fa55 	bl	8007e24 <com_has_data>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <MX_53L8A1_SimpleRanging_Process+0x90>
    {
      handle_cmd(get_key());
 8007980:	f000 fa3c 	bl	8007dfc <get_key>
 8007984:	4603      	mov	r3, r0
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fa18 	bl	8007dbc <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 800798c:	2001      	movs	r0, #1
 800798e:	f7fc fde9 	bl	8004564 <HAL_Delay>
    status = VL53L8A1_RANGING_SENSOR_GetDistance(VL53L8A1_DEV_CENTER, &Result);
 8007992:	e7e2      	b.n	800795a <MX_53L8A1_SimpleRanging_Process+0x5e>
 8007994:	20002af0 	.word	0x20002af0
 8007998:	20002b00 	.word	0x20002b00
 800799c:	20003018 	.word	0x20003018
 80079a0:	08008f44 	.word	0x08008f44
 80079a4:	20002b14 	.word	0x20002b14

080079a8 <print_result>:
  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 80079a8:	b590      	push	{r4, r7, lr}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  int8_t j;
  int8_t k;
  int8_t l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80079b0:	4ba7      	ldr	r3, [pc, #668]	@ (8007c50 <print_result+0x2a8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d003      	beq.n	80079c0 <print_result+0x18>
                    (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 80079b8:	4ba5      	ldr	r3, [pc, #660]	@ (8007c50 <print_result+0x2a8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d101      	bne.n	80079c4 <print_result+0x1c>
 80079c0:	2308      	movs	r3, #8
 80079c2:	e000      	b.n	80079c6 <print_result+0x1e>
 80079c4:	2304      	movs	r3, #4
 80079c6:	72fb      	strb	r3, [r7, #11]

  display_commands_banner();
 80079c8:	f000 f9cc 	bl	8007d64 <display_commands_banner>

  printf("Cell Format :\n\n");
 80079cc:	48a1      	ldr	r0, [pc, #644]	@ (8007c54 <print_result+0x2ac>)
 80079ce:	f000 fb93 	bl	80080f8 <puts>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80079d2:	2300      	movs	r3, #0
 80079d4:	733b      	strb	r3, [r7, #12]
 80079d6:	e017      	b.n	8007a08 <print_result+0x60>
  {
    printf(" \033[38;5;10m%20s\033[0m : %20s\n", "Distance [mm]", "Status");
 80079d8:	4a9f      	ldr	r2, [pc, #636]	@ (8007c58 <print_result+0x2b0>)
 80079da:	49a0      	ldr	r1, [pc, #640]	@ (8007c5c <print_result+0x2b4>)
 80079dc:	48a0      	ldr	r0, [pc, #640]	@ (8007c60 <print_result+0x2b8>)
 80079de:	f000 fb1b 	bl	8008018 <iprintf>
    if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 80079e2:	4b9b      	ldr	r3, [pc, #620]	@ (8007c50 <print_result+0x2a8>)
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d103      	bne.n	80079f2 <print_result+0x4a>
 80079ea:	4b99      	ldr	r3, [pc, #612]	@ (8007c50 <print_result+0x2a8>)
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <print_result+0x54>
    {
      printf(" %20s : %20s\n", "Signal [kcps/spad]", "Ambient [kcps/spad]");
 80079f2:	4a9c      	ldr	r2, [pc, #624]	@ (8007c64 <print_result+0x2bc>)
 80079f4:	499c      	ldr	r1, [pc, #624]	@ (8007c68 <print_result+0x2c0>)
 80079f6:	489d      	ldr	r0, [pc, #628]	@ (8007c6c <print_result+0x2c4>)
 80079f8:	f000 fb0e 	bl	8008018 <iprintf>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80079fc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	3301      	adds	r3, #1
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	733b      	strb	r3, [r7, #12]
 8007a08:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0e3      	beq.n	80079d8 <print_result+0x30>
    }
  }

  printf("\n\n");
 8007a10:	4897      	ldr	r0, [pc, #604]	@ (8007c70 <print_result+0x2c8>)
 8007a12:	f000 fb71 	bl	80080f8 <puts>

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8007a16:	2300      	movs	r3, #0
 8007a18:	73bb      	strb	r3, [r7, #14]
 8007a1a:	e0f9      	b.n	8007c10 <print_result+0x268>
  {
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e008      	b.n	8007a34 <print_result+0x8c>
    {
      printf(" -----------------");
 8007a22:	4894      	ldr	r0, [pc, #592]	@ (8007c74 <print_result+0x2cc>)
 8007a24:	f000 faf8 	bl	8008018 <iprintf>
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8007a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	3301      	adds	r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	73fb      	strb	r3, [r7, #15]
 8007a34:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	dbf1      	blt.n	8007a22 <print_result+0x7a>
    }
    printf("\n");
 8007a3e:	200a      	movs	r0, #10
 8007a40:	f000 fafc 	bl	800803c <putchar>

    for (i = 0; i < zones_per_line; i++)
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
 8007a48:	e008      	b.n	8007a5c <print_result+0xb4>
    {
      printf("|                 ");
 8007a4a:	488b      	ldr	r0, [pc, #556]	@ (8007c78 <print_result+0x2d0>)
 8007a4c:	f000 fae4 	bl	8008018 <iprintf>
    for (i = 0; i < zones_per_line; i++)
 8007a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	3301      	adds	r3, #1
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007a60:	7afb      	ldrb	r3, [r7, #11]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	dbf1      	blt.n	8007a4a <print_result+0xa2>
    }
    printf("|\n");
 8007a66:	4885      	ldr	r0, [pc, #532]	@ (8007c7c <print_result+0x2d4>)
 8007a68:	f000 fb46 	bl	80080f8 <puts>

    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	733b      	strb	r3, [r7, #12]
 8007a70:	e0c4      	b.n	8007bfc <print_result+0x254>
    {
      /* Print distance and status */
      for (k = (zones_per_line - 1); k >= 0; k--)
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	737b      	strb	r3, [r7, #13]
 8007a7a:	e03f      	b.n	8007afc <print_result+0x154>
      {
        if (Result->ZoneResult[j + k].NumberOfTargets > 0)
 8007a7c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007a80:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007a84:	441a      	add	r2, r3
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	3304      	adds	r3, #4
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d025      	beq.n	8007ae6 <print_result+0x13e>
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
                 (long)Result->ZoneResult[j + k].Distance[l],
 8007a9a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007a9e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007aa2:	441a      	add	r2, r3
 8007aa4:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	4403      	add	r3, r0
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	440b      	add	r3, r1
 8007ab6:	689b      	ldr	r3, [r3, #8]
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 8007ab8:	461c      	mov	r4, r3
                 (long)Result->ZoneResult[j + k].Status[l]);
 8007aba:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007abe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007ac2:	441a      	add	r2, r3
 8007ac4:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8007ac8:	6879      	ldr	r1, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	4403      	add	r3, r0
 8007ad2:	3302      	adds	r3, #2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	440b      	add	r3, r1
 8007ad8:	685b      	ldr	r3, [r3, #4]
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 8007ada:	461a      	mov	r2, r3
 8007adc:	4621      	mov	r1, r4
 8007ade:	4868      	ldr	r0, [pc, #416]	@ (8007c80 <print_result+0x2d8>)
 8007ae0:	f000 fa9a 	bl	8008018 <iprintf>
 8007ae4:	e004      	b.n	8007af0 <print_result+0x148>
        else
          printf("| %5s  :  %5s ", "X", "X");
 8007ae6:	4a67      	ldr	r2, [pc, #412]	@ (8007c84 <print_result+0x2dc>)
 8007ae8:	4966      	ldr	r1, [pc, #408]	@ (8007c84 <print_result+0x2dc>)
 8007aea:	4867      	ldr	r0, [pc, #412]	@ (8007c88 <print_result+0x2e0>)
 8007aec:	f000 fa94 	bl	8008018 <iprintf>
      for (k = (zones_per_line - 1); k >= 0; k--)
 8007af0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	737b      	strb	r3, [r7, #13]
 8007afc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dabb      	bge.n	8007a7c <print_result+0xd4>
      }
      printf("|\n");
 8007b04:	485d      	ldr	r0, [pc, #372]	@ (8007c7c <print_result+0x2d4>)
 8007b06:	f000 faf7 	bl	80080f8 <puts>

      if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 8007b0a:	4b51      	ldr	r3, [pc, #324]	@ (8007c50 <print_result+0x2a8>)
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <print_result+0x172>
 8007b12:	4b4f      	ldr	r3, [pc, #316]	@ (8007c50 <print_result+0x2a8>)
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d06a      	beq.n	8007bf0 <print_result+0x248>
      {
        /* Print Signal and Ambient */
        for (k = (zones_per_line - 1); k >= 0; k--)
 8007b1a:	7afb      	ldrb	r3, [r7, #11]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	737b      	strb	r3, [r7, #13]
 8007b22:	e05e      	b.n	8007be2 <print_result+0x23a>
        {
          if (Result->ZoneResult[j + k].NumberOfTargets > 0)
 8007b24:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007b28:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007b2c:	441a      	add	r2, r3
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	440b      	add	r3, r1
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d044      	beq.n	8007bcc <print_result+0x224>
          {
            if (Profile.EnableSignal != 0)
 8007b42:	4b43      	ldr	r3, [pc, #268]	@ (8007c50 <print_result+0x2a8>)
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d019      	beq.n	8007b7e <print_result+0x1d6>
            {
              printf("| %5ld  :  ", (long)Result->ZoneResult[j + k].Signal[l]);
 8007b4a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007b4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007b52:	441a      	add	r2, r3
 8007b54:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	4403      	add	r3, r0
 8007b62:	3304      	adds	r3, #4
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	3304      	adds	r3, #4
 8007b6a:	edd3 7a00 	vldr	s15, [r3]
 8007b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b72:	ee17 1a90 	vmov	r1, s15
 8007b76:	4845      	ldr	r0, [pc, #276]	@ (8007c8c <print_result+0x2e4>)
 8007b78:	f000 fa4e 	bl	8008018 <iprintf>
 8007b7c:	e003      	b.n	8007b86 <print_result+0x1de>
            }
            else
              printf("| %5s  :  ", "X");
 8007b7e:	4941      	ldr	r1, [pc, #260]	@ (8007c84 <print_result+0x2dc>)
 8007b80:	4843      	ldr	r0, [pc, #268]	@ (8007c90 <print_result+0x2e8>)
 8007b82:	f000 fa49 	bl	8008018 <iprintf>

            if (Profile.EnableAmbient != 0)
 8007b86:	4b32      	ldr	r3, [pc, #200]	@ (8007c50 <print_result+0x2a8>)
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d019      	beq.n	8007bc2 <print_result+0x21a>
            {
              printf("%5ld ", (long)Result->ZoneResult[j + k].Ambient[l]);
 8007b8e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007b92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007b96:	441a      	add	r2, r3
 8007b98:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4403      	add	r3, r0
 8007ba6:	3302      	adds	r3, #2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	3308      	adds	r3, #8
 8007bae:	edd3 7a00 	vldr	s15, [r3]
 8007bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bb6:	ee17 1a90 	vmov	r1, s15
 8007bba:	4836      	ldr	r0, [pc, #216]	@ (8007c94 <print_result+0x2ec>)
 8007bbc:	f000 fa2c 	bl	8008018 <iprintf>
 8007bc0:	e009      	b.n	8007bd6 <print_result+0x22e>
            }
            else
              printf("%5s ", "X");
 8007bc2:	4930      	ldr	r1, [pc, #192]	@ (8007c84 <print_result+0x2dc>)
 8007bc4:	4834      	ldr	r0, [pc, #208]	@ (8007c98 <print_result+0x2f0>)
 8007bc6:	f000 fa27 	bl	8008018 <iprintf>
 8007bca:	e004      	b.n	8007bd6 <print_result+0x22e>
          }
          else
            printf("| %5s  :  %5s ", "X", "X");
 8007bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8007c84 <print_result+0x2dc>)
 8007bce:	492d      	ldr	r1, [pc, #180]	@ (8007c84 <print_result+0x2dc>)
 8007bd0:	482d      	ldr	r0, [pc, #180]	@ (8007c88 <print_result+0x2e0>)
 8007bd2:	f000 fa21 	bl	8008018 <iprintf>
        for (k = (zones_per_line - 1); k >= 0; k--)
 8007bd6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	737b      	strb	r3, [r7, #13]
 8007be2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	da9c      	bge.n	8007b24 <print_result+0x17c>
        }
        printf("|\n");
 8007bea:	4824      	ldr	r0, [pc, #144]	@ (8007c7c <print_result+0x2d4>)
 8007bec:	f000 fa84 	bl	80080f8 <puts>
    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8007bf0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	733b      	strb	r3, [r7, #12]
 8007bfc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f43f af36 	beq.w	8007a72 <print_result+0xca>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8007c06:	7bba      	ldrb	r2, [r7, #14]
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	73bb      	strb	r3, [r7, #14]
 8007c10:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	f4ff aeff 	bcc.w	8007a1c <print_result+0x74>
      }
    }
  }

  for (i = 0; i < zones_per_line; i++)
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
 8007c22:	e008      	b.n	8007c36 <print_result+0x28e>
  {
    printf(" -----------------");
 8007c24:	4813      	ldr	r0, [pc, #76]	@ (8007c74 <print_result+0x2cc>)
 8007c26:	f000 f9f7 	bl	8008018 <iprintf>
  for (i = 0; i < zones_per_line; i++)
 8007c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	3301      	adds	r3, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	73fb      	strb	r3, [r7, #15]
 8007c36:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	dbf1      	blt.n	8007c24 <print_result+0x27c>
  }
  printf("\n");
 8007c40:	200a      	movs	r0, #10
 8007c42:	f000 f9fb 	bl	800803c <putchar>
}
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd90      	pop	{r4, r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20002b00 	.word	0x20002b00
 8007c54:	08008f6c 	.word	0x08008f6c
 8007c58:	08008f7c 	.word	0x08008f7c
 8007c5c:	08008f84 	.word	0x08008f84
 8007c60:	08008f94 	.word	0x08008f94
 8007c64:	08008fb0 	.word	0x08008fb0
 8007c68:	08008fc4 	.word	0x08008fc4
 8007c6c:	08008fd8 	.word	0x08008fd8
 8007c70:	08008fe8 	.word	0x08008fe8
 8007c74:	08008fec 	.word	0x08008fec
 8007c78:	08009000 	.word	0x08009000
 8007c7c:	08009014 	.word	0x08009014
 8007c80:	08009018 	.word	0x08009018
 8007c84:	08009038 	.word	0x08009038
 8007c88:	0800903c 	.word	0x0800903c
 8007c8c:	0800904c 	.word	0x0800904c
 8007c90:	08009058 	.word	0x08009058
 8007c94:	08009064 	.word	0x08009064
 8007c98:	0800906c 	.word	0x0800906c

08007c9c <toggle_resolution>:

static void toggle_resolution(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  VL53L8A1_RANGING_SENSOR_Stop(VL53L8A1_DEV_CENTER);
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	f7f9 f957 	bl	8000f54 <VL53L8A1_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 8007ca6:	4b16      	ldr	r3, [pc, #88]	@ (8007d00 <toggle_resolution+0x64>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d81b      	bhi.n	8007ce8 <toggle_resolution+0x4c>
 8007cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <toggle_resolution+0x1c>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007cd1 	.word	0x08007cd1
 8007cbc:	08007cc9 	.word	0x08007cc9
 8007cc0:	08007ce1 	.word	0x08007ce1
 8007cc4:	08007cd9 	.word	0x08007cd9
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <toggle_resolution+0x64>)
 8007cca:	2204      	movs	r2, #4
 8007ccc:	601a      	str	r2, [r3, #0]
      break;
 8007cce:	e00c      	b.n	8007cea <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007d00 <toggle_resolution+0x64>)
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	601a      	str	r2, [r3, #0]
      break;
 8007cd6:	e008      	b.n	8007cea <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8007cd8:	4b09      	ldr	r3, [pc, #36]	@ (8007d00 <toggle_resolution+0x64>)
 8007cda:	2202      	movs	r2, #2
 8007cdc:	601a      	str	r2, [r3, #0]
      break;
 8007cde:	e004      	b.n	8007cea <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8007ce0:	4b07      	ldr	r3, [pc, #28]	@ (8007d00 <toggle_resolution+0x64>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
      break;
 8007ce6:	e000      	b.n	8007cea <toggle_resolution+0x4e>

    default:
      break;
 8007ce8:	bf00      	nop
  }

  VL53L8A1_RANGING_SENSOR_ConfigProfile(VL53L8A1_DEV_CENTER, &Profile);
 8007cea:	4905      	ldr	r1, [pc, #20]	@ (8007d00 <toggle_resolution+0x64>)
 8007cec:	2001      	movs	r0, #1
 8007cee:	f7f9 f8b9 	bl	8000e64 <VL53L8A1_RANGING_SENSOR_ConfigProfile>
  VL53L8A1_RANGING_SENSOR_Start(VL53L8A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	f7f9 f905 	bl	8000f04 <VL53L8A1_RANGING_SENSOR_Start>
}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20002b00 	.word	0x20002b00

08007d04 <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  VL53L8A1_RANGING_SENSOR_Stop(VL53L8A1_DEV_CENTER);
 8007d08:	2001      	movs	r0, #1
 8007d0a:	f7f9 f923 	bl	8000f54 <VL53L8A1_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d4c <toggle_signal_and_ambient+0x48>)
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bf0c      	ite	eq
 8007d16:	2301      	moveq	r3, #1
 8007d18:	2300      	movne	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d4c <toggle_signal_and_ambient+0x48>)
 8007d20:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 8007d22:	4b0a      	ldr	r3, [pc, #40]	@ (8007d4c <toggle_signal_and_ambient+0x48>)
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bf0c      	ite	eq
 8007d2a:	2301      	moveq	r3, #1
 8007d2c:	2300      	movne	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	4b06      	ldr	r3, [pc, #24]	@ (8007d4c <toggle_signal_and_ambient+0x48>)
 8007d34:	611a      	str	r2, [r3, #16]

  VL53L8A1_RANGING_SENSOR_ConfigProfile(VL53L8A1_DEV_CENTER, &Profile);
 8007d36:	4905      	ldr	r1, [pc, #20]	@ (8007d4c <toggle_signal_and_ambient+0x48>)
 8007d38:	2001      	movs	r0, #1
 8007d3a:	f7f9 f893 	bl	8000e64 <VL53L8A1_RANGING_SENSOR_ConfigProfile>
  VL53L8A1_RANGING_SENSOR_Start(VL53L8A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8007d3e:	2101      	movs	r1, #1
 8007d40:	2001      	movs	r0, #1
 8007d42:	f7f9 f8df 	bl	8000f04 <VL53L8A1_RANGING_SENSOR_Start>
}
 8007d46:	bf00      	nop
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20002b00 	.word	0x20002b00

08007d50 <clear_screen>:

static void clear_screen(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	af00      	add	r7, sp, #0
  printf("%c[2J", 27); /* 27 is ESC command */
 8007d54:	211b      	movs	r1, #27
 8007d56:	4802      	ldr	r0, [pc, #8]	@ (8007d60 <clear_screen+0x10>)
 8007d58:	f000 f95e 	bl	8008018 <iprintf>
}
 8007d5c:	bf00      	nop
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	08009074 	.word	0x08009074

08007d64 <display_commands_banner>:

static void display_commands_banner(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* clear screen */
  printf("%c[2H", 27);
 8007d68:	211b      	movs	r1, #27
 8007d6a:	480d      	ldr	r0, [pc, #52]	@ (8007da0 <display_commands_banner+0x3c>)
 8007d6c:	f000 f954 	bl	8008018 <iprintf>

  printf("53L8A1 Simple Ranging demo application\n");
 8007d70:	480c      	ldr	r0, [pc, #48]	@ (8007da4 <display_commands_banner+0x40>)
 8007d72:	f000 f9c1 	bl	80080f8 <puts>
  printf("--------------------------------------\n\n");
 8007d76:	480c      	ldr	r0, [pc, #48]	@ (8007da8 <display_commands_banner+0x44>)
 8007d78:	f000 f9be 	bl	80080f8 <puts>

  printf("Use the following keys to control application\n");
 8007d7c:	480b      	ldr	r0, [pc, #44]	@ (8007dac <display_commands_banner+0x48>)
 8007d7e:	f000 f9bb 	bl	80080f8 <puts>
  printf(" 'r' : change resolution\n");
 8007d82:	480b      	ldr	r0, [pc, #44]	@ (8007db0 <display_commands_banner+0x4c>)
 8007d84:	f000 f9b8 	bl	80080f8 <puts>
  printf(" 's' : enable signal and ambient\n");
 8007d88:	480a      	ldr	r0, [pc, #40]	@ (8007db4 <display_commands_banner+0x50>)
 8007d8a:	f000 f9b5 	bl	80080f8 <puts>
  printf(" 'c' : clear screen\n");
 8007d8e:	480a      	ldr	r0, [pc, #40]	@ (8007db8 <display_commands_banner+0x54>)
 8007d90:	f000 f9b2 	bl	80080f8 <puts>
  printf("\n");
 8007d94:	200a      	movs	r0, #10
 8007d96:	f000 f951 	bl	800803c <putchar>
}
 8007d9a:	bf00      	nop
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	0800907c 	.word	0x0800907c
 8007da4:	08008edc 	.word	0x08008edc
 8007da8:	08009084 	.word	0x08009084
 8007dac:	080090ac 	.word	0x080090ac
 8007db0:	080090dc 	.word	0x080090dc
 8007db4:	080090f8 	.word	0x080090f8
 8007db8:	0800911c 	.word	0x0800911c

08007dbc <handle_cmd>:

static void handle_cmd(uint8_t cmd)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	2b73      	cmp	r3, #115	@ 0x73
 8007dca:	d00a      	beq.n	8007de2 <handle_cmd+0x26>
 8007dcc:	2b73      	cmp	r3, #115	@ 0x73
 8007dce:	dc10      	bgt.n	8007df2 <handle_cmd+0x36>
 8007dd0:	2b63      	cmp	r3, #99	@ 0x63
 8007dd2:	d00b      	beq.n	8007dec <handle_cmd+0x30>
 8007dd4:	2b72      	cmp	r3, #114	@ 0x72
 8007dd6:	d10c      	bne.n	8007df2 <handle_cmd+0x36>
  {
    case 'r':
      toggle_resolution();
 8007dd8:	f7ff ff60 	bl	8007c9c <toggle_resolution>
      clear_screen();
 8007ddc:	f7ff ffb8 	bl	8007d50 <clear_screen>
      break;
 8007de0:	e008      	b.n	8007df4 <handle_cmd+0x38>

    case 's':
      toggle_signal_and_ambient();
 8007de2:	f7ff ff8f 	bl	8007d04 <toggle_signal_and_ambient>
      clear_screen();
 8007de6:	f7ff ffb3 	bl	8007d50 <clear_screen>
      break;
 8007dea:	e003      	b.n	8007df4 <handle_cmd+0x38>

    case 'c':
      clear_screen();
 8007dec:	f7ff ffb0 	bl	8007d50 <clear_screen>
      break;
 8007df0:	e000      	b.n	8007df4 <handle_cmd+0x38>

    default:
      break;
 8007df2:	bf00      	nop
  }
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <get_key>:

static uint8_t get_key(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 8007e06:	1df9      	adds	r1, r7, #7
 8007e08:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	4804      	ldr	r0, [pc, #16]	@ (8007e20 <get_key+0x24>)
 8007e10:	f7fe ff24 	bl	8006c5c <HAL_UART_Receive>

  return cmd;
 8007e14:	79fb      	ldrb	r3, [r7, #7]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20002a54 	.word	0x20002a54

08007e24 <com_has_data>:

static uint32_t com_has_data(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8007e28:	4b07      	ldr	r3, [pc, #28]	@ (8007e48 <com_has_data+0x24>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	bf0c      	ite	eq
 8007e36:	2301      	moveq	r3, #1
 8007e38:	2300      	movne	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	20002a54 	.word	0x20002a54

08007e4c <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8007e56:	4b04      	ldr	r3, [pc, #16]	@ (8007e68 <BSP_PB_Callback+0x1c>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	2000301c 	.word	0x2000301c

08007e6c <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d102      	bne.n	8007e82 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8007e7c:	4b04      	ldr	r3, [pc, #16]	@ (8007e90 <HAL_GPIO_EXTI_Callback+0x24>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	701a      	strb	r2, [r3, #0]
  }
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	2000301d 	.word	0x2000301d

08007e94 <std>:
 8007e94:	2300      	movs	r3, #0
 8007e96:	b510      	push	{r4, lr}
 8007e98:	4604      	mov	r4, r0
 8007e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ea2:	6083      	str	r3, [r0, #8]
 8007ea4:	8181      	strh	r1, [r0, #12]
 8007ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ea8:	81c2      	strh	r2, [r0, #14]
 8007eaa:	6183      	str	r3, [r0, #24]
 8007eac:	4619      	mov	r1, r3
 8007eae:	2208      	movs	r2, #8
 8007eb0:	305c      	adds	r0, #92	@ 0x5c
 8007eb2:	f000 fa01 	bl	80082b8 <memset>
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007eec <std+0x58>)
 8007eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007eba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef0 <std+0x5c>)
 8007ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef4 <std+0x60>)
 8007ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef8 <std+0x64>)
 8007ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8007efc <std+0x68>)
 8007ec8:	6224      	str	r4, [r4, #32]
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d006      	beq.n	8007edc <std+0x48>
 8007ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ed2:	4294      	cmp	r4, r2
 8007ed4:	d002      	beq.n	8007edc <std+0x48>
 8007ed6:	33d0      	adds	r3, #208	@ 0xd0
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	d105      	bne.n	8007ee8 <std+0x54>
 8007edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee4:	f000 ba60 	b.w	80083a8 <__retarget_lock_init_recursive>
 8007ee8:	bd10      	pop	{r4, pc}
 8007eea:	bf00      	nop
 8007eec:	08008109 	.word	0x08008109
 8007ef0:	0800812b 	.word	0x0800812b
 8007ef4:	08008163 	.word	0x08008163
 8007ef8:	08008187 	.word	0x08008187
 8007efc:	20003020 	.word	0x20003020

08007f00 <stdio_exit_handler>:
 8007f00:	4a02      	ldr	r2, [pc, #8]	@ (8007f0c <stdio_exit_handler+0xc>)
 8007f02:	4903      	ldr	r1, [pc, #12]	@ (8007f10 <stdio_exit_handler+0x10>)
 8007f04:	4803      	ldr	r0, [pc, #12]	@ (8007f14 <stdio_exit_handler+0x14>)
 8007f06:	f000 b869 	b.w	8007fdc <_fwalk_sglue>
 8007f0a:	bf00      	nop
 8007f0c:	20000058 	.word	0x20000058
 8007f10:	08008c65 	.word	0x08008c65
 8007f14:	20000068 	.word	0x20000068

08007f18 <cleanup_stdio>:
 8007f18:	6841      	ldr	r1, [r0, #4]
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f4c <cleanup_stdio+0x34>)
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	4604      	mov	r4, r0
 8007f22:	d001      	beq.n	8007f28 <cleanup_stdio+0x10>
 8007f24:	f000 fe9e 	bl	8008c64 <_fflush_r>
 8007f28:	68a1      	ldr	r1, [r4, #8]
 8007f2a:	4b09      	ldr	r3, [pc, #36]	@ (8007f50 <cleanup_stdio+0x38>)
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <cleanup_stdio+0x1e>
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fe97 	bl	8008c64 <_fflush_r>
 8007f36:	68e1      	ldr	r1, [r4, #12]
 8007f38:	4b06      	ldr	r3, [pc, #24]	@ (8007f54 <cleanup_stdio+0x3c>)
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	d004      	beq.n	8007f48 <cleanup_stdio+0x30>
 8007f3e:	4620      	mov	r0, r4
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f000 be8e 	b.w	8008c64 <_fflush_r>
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20003020 	.word	0x20003020
 8007f50:	20003088 	.word	0x20003088
 8007f54:	200030f0 	.word	0x200030f0

08007f58 <global_stdio_init.part.0>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <global_stdio_init.part.0+0x30>)
 8007f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8007f8c <global_stdio_init.part.0+0x34>)
 8007f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f90 <global_stdio_init.part.0+0x38>)
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	4620      	mov	r0, r4
 8007f64:	2200      	movs	r2, #0
 8007f66:	2104      	movs	r1, #4
 8007f68:	f7ff ff94 	bl	8007e94 <std>
 8007f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f70:	2201      	movs	r2, #1
 8007f72:	2109      	movs	r1, #9
 8007f74:	f7ff ff8e 	bl	8007e94 <std>
 8007f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f82:	2112      	movs	r1, #18
 8007f84:	f7ff bf86 	b.w	8007e94 <std>
 8007f88:	20003158 	.word	0x20003158
 8007f8c:	20003020 	.word	0x20003020
 8007f90:	08007f01 	.word	0x08007f01

08007f94 <__sfp_lock_acquire>:
 8007f94:	4801      	ldr	r0, [pc, #4]	@ (8007f9c <__sfp_lock_acquire+0x8>)
 8007f96:	f000 ba08 	b.w	80083aa <__retarget_lock_acquire_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20003161 	.word	0x20003161

08007fa0 <__sfp_lock_release>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	@ (8007fa8 <__sfp_lock_release+0x8>)
 8007fa2:	f000 ba03 	b.w	80083ac <__retarget_lock_release_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	20003161 	.word	0x20003161

08007fac <__sinit>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4604      	mov	r4, r0
 8007fb0:	f7ff fff0 	bl	8007f94 <__sfp_lock_acquire>
 8007fb4:	6a23      	ldr	r3, [r4, #32]
 8007fb6:	b11b      	cbz	r3, 8007fc0 <__sinit+0x14>
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f7ff bff0 	b.w	8007fa0 <__sfp_lock_release>
 8007fc0:	4b04      	ldr	r3, [pc, #16]	@ (8007fd4 <__sinit+0x28>)
 8007fc2:	6223      	str	r3, [r4, #32]
 8007fc4:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <__sinit+0x2c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f5      	bne.n	8007fb8 <__sinit+0xc>
 8007fcc:	f7ff ffc4 	bl	8007f58 <global_stdio_init.part.0>
 8007fd0:	e7f2      	b.n	8007fb8 <__sinit+0xc>
 8007fd2:	bf00      	nop
 8007fd4:	08007f19 	.word	0x08007f19
 8007fd8:	20003158 	.word	0x20003158

08007fdc <_fwalk_sglue>:
 8007fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	4688      	mov	r8, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fec:	f1b9 0901 	subs.w	r9, r9, #1
 8007ff0:	d505      	bpl.n	8007ffe <_fwalk_sglue+0x22>
 8007ff2:	6824      	ldr	r4, [r4, #0]
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	d1f7      	bne.n	8007fe8 <_fwalk_sglue+0xc>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d907      	bls.n	8008014 <_fwalk_sglue+0x38>
 8008004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008008:	3301      	adds	r3, #1
 800800a:	d003      	beq.n	8008014 <_fwalk_sglue+0x38>
 800800c:	4629      	mov	r1, r5
 800800e:	4638      	mov	r0, r7
 8008010:	47c0      	blx	r8
 8008012:	4306      	orrs	r6, r0
 8008014:	3568      	adds	r5, #104	@ 0x68
 8008016:	e7e9      	b.n	8007fec <_fwalk_sglue+0x10>

08008018 <iprintf>:
 8008018:	b40f      	push	{r0, r1, r2, r3}
 800801a:	b507      	push	{r0, r1, r2, lr}
 800801c:	4906      	ldr	r1, [pc, #24]	@ (8008038 <iprintf+0x20>)
 800801e:	ab04      	add	r3, sp, #16
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	f853 2b04 	ldr.w	r2, [r3], #4
 8008026:	6881      	ldr	r1, [r0, #8]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	f000 faf1 	bl	8008610 <_vfiprintf_r>
 800802e:	b003      	add	sp, #12
 8008030:	f85d eb04 	ldr.w	lr, [sp], #4
 8008034:	b004      	add	sp, #16
 8008036:	4770      	bx	lr
 8008038:	20000064 	.word	0x20000064

0800803c <putchar>:
 800803c:	4b02      	ldr	r3, [pc, #8]	@ (8008048 <putchar+0xc>)
 800803e:	4601      	mov	r1, r0
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	6882      	ldr	r2, [r0, #8]
 8008044:	f000 be98 	b.w	8008d78 <_putc_r>
 8008048:	20000064 	.word	0x20000064

0800804c <_puts_r>:
 800804c:	6a03      	ldr	r3, [r0, #32]
 800804e:	b570      	push	{r4, r5, r6, lr}
 8008050:	6884      	ldr	r4, [r0, #8]
 8008052:	4605      	mov	r5, r0
 8008054:	460e      	mov	r6, r1
 8008056:	b90b      	cbnz	r3, 800805c <_puts_r+0x10>
 8008058:	f7ff ffa8 	bl	8007fac <__sinit>
 800805c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800805e:	07db      	lsls	r3, r3, #31
 8008060:	d405      	bmi.n	800806e <_puts_r+0x22>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	0598      	lsls	r0, r3, #22
 8008066:	d402      	bmi.n	800806e <_puts_r+0x22>
 8008068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800806a:	f000 f99e 	bl	80083aa <__retarget_lock_acquire_recursive>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	d502      	bpl.n	800807a <_puts_r+0x2e>
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d135      	bne.n	80080e6 <_puts_r+0x9a>
 800807a:	4621      	mov	r1, r4
 800807c:	4628      	mov	r0, r5
 800807e:	f000 f8c5 	bl	800820c <__swsetup_r>
 8008082:	b380      	cbz	r0, 80080e6 <_puts_r+0x9a>
 8008084:	f04f 35ff 	mov.w	r5, #4294967295
 8008088:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800808a:	07da      	lsls	r2, r3, #31
 800808c:	d405      	bmi.n	800809a <_puts_r+0x4e>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	d402      	bmi.n	800809a <_puts_r+0x4e>
 8008094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008096:	f000 f989 	bl	80083ac <__retarget_lock_release_recursive>
 800809a:	4628      	mov	r0, r5
 800809c:	bd70      	pop	{r4, r5, r6, pc}
 800809e:	2b00      	cmp	r3, #0
 80080a0:	da04      	bge.n	80080ac <_puts_r+0x60>
 80080a2:	69a2      	ldr	r2, [r4, #24]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	dc17      	bgt.n	80080d8 <_puts_r+0x8c>
 80080a8:	290a      	cmp	r1, #10
 80080aa:	d015      	beq.n	80080d8 <_puts_r+0x8c>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	6022      	str	r2, [r4, #0]
 80080b2:	7019      	strb	r1, [r3, #0]
 80080b4:	68a3      	ldr	r3, [r4, #8]
 80080b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080ba:	3b01      	subs	r3, #1
 80080bc:	60a3      	str	r3, [r4, #8]
 80080be:	2900      	cmp	r1, #0
 80080c0:	d1ed      	bne.n	800809e <_puts_r+0x52>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	da11      	bge.n	80080ea <_puts_r+0x9e>
 80080c6:	4622      	mov	r2, r4
 80080c8:	210a      	movs	r1, #10
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 f85f 	bl	800818e <__swbuf_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	d0d7      	beq.n	8008084 <_puts_r+0x38>
 80080d4:	250a      	movs	r5, #10
 80080d6:	e7d7      	b.n	8008088 <_puts_r+0x3c>
 80080d8:	4622      	mov	r2, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 f857 	bl	800818e <__swbuf_r>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d1e7      	bne.n	80080b4 <_puts_r+0x68>
 80080e4:	e7ce      	b.n	8008084 <_puts_r+0x38>
 80080e6:	3e01      	subs	r6, #1
 80080e8:	e7e4      	b.n	80080b4 <_puts_r+0x68>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	220a      	movs	r2, #10
 80080f2:	701a      	strb	r2, [r3, #0]
 80080f4:	e7ee      	b.n	80080d4 <_puts_r+0x88>
	...

080080f8 <puts>:
 80080f8:	4b02      	ldr	r3, [pc, #8]	@ (8008104 <puts+0xc>)
 80080fa:	4601      	mov	r1, r0
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	f7ff bfa5 	b.w	800804c <_puts_r>
 8008102:	bf00      	nop
 8008104:	20000064 	.word	0x20000064

08008108 <__sread>:
 8008108:	b510      	push	{r4, lr}
 800810a:	460c      	mov	r4, r1
 800810c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008110:	f000 f8fc 	bl	800830c <_read_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	bfab      	itete	ge
 8008118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800811a:	89a3      	ldrhlt	r3, [r4, #12]
 800811c:	181b      	addge	r3, r3, r0
 800811e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008122:	bfac      	ite	ge
 8008124:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008126:	81a3      	strhlt	r3, [r4, #12]
 8008128:	bd10      	pop	{r4, pc}

0800812a <__swrite>:
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	461f      	mov	r7, r3
 8008130:	898b      	ldrh	r3, [r1, #12]
 8008132:	05db      	lsls	r3, r3, #23
 8008134:	4605      	mov	r5, r0
 8008136:	460c      	mov	r4, r1
 8008138:	4616      	mov	r6, r2
 800813a:	d505      	bpl.n	8008148 <__swrite+0x1e>
 800813c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008140:	2302      	movs	r3, #2
 8008142:	2200      	movs	r2, #0
 8008144:	f000 f8d0 	bl	80082e8 <_lseek_r>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800814e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	4632      	mov	r2, r6
 8008156:	463b      	mov	r3, r7
 8008158:	4628      	mov	r0, r5
 800815a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	f000 b8e7 	b.w	8008330 <_write_r>

08008162 <__sseek>:
 8008162:	b510      	push	{r4, lr}
 8008164:	460c      	mov	r4, r1
 8008166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816a:	f000 f8bd 	bl	80082e8 <_lseek_r>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	bf15      	itete	ne
 8008174:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800817a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800817e:	81a3      	strheq	r3, [r4, #12]
 8008180:	bf18      	it	ne
 8008182:	81a3      	strhne	r3, [r4, #12]
 8008184:	bd10      	pop	{r4, pc}

08008186 <__sclose>:
 8008186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818a:	f000 b89d 	b.w	80082c8 <_close_r>

0800818e <__swbuf_r>:
 800818e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008190:	460e      	mov	r6, r1
 8008192:	4614      	mov	r4, r2
 8008194:	4605      	mov	r5, r0
 8008196:	b118      	cbz	r0, 80081a0 <__swbuf_r+0x12>
 8008198:	6a03      	ldr	r3, [r0, #32]
 800819a:	b90b      	cbnz	r3, 80081a0 <__swbuf_r+0x12>
 800819c:	f7ff ff06 	bl	8007fac <__sinit>
 80081a0:	69a3      	ldr	r3, [r4, #24]
 80081a2:	60a3      	str	r3, [r4, #8]
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	071a      	lsls	r2, r3, #28
 80081a8:	d501      	bpl.n	80081ae <__swbuf_r+0x20>
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	b943      	cbnz	r3, 80081c0 <__swbuf_r+0x32>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 f82b 	bl	800820c <__swsetup_r>
 80081b6:	b118      	cbz	r0, 80081c0 <__swbuf_r+0x32>
 80081b8:	f04f 37ff 	mov.w	r7, #4294967295
 80081bc:	4638      	mov	r0, r7
 80081be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	6922      	ldr	r2, [r4, #16]
 80081c4:	1a98      	subs	r0, r3, r2
 80081c6:	6963      	ldr	r3, [r4, #20]
 80081c8:	b2f6      	uxtb	r6, r6
 80081ca:	4283      	cmp	r3, r0
 80081cc:	4637      	mov	r7, r6
 80081ce:	dc05      	bgt.n	80081dc <__swbuf_r+0x4e>
 80081d0:	4621      	mov	r1, r4
 80081d2:	4628      	mov	r0, r5
 80081d4:	f000 fd46 	bl	8008c64 <_fflush_r>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d1ed      	bne.n	80081b8 <__swbuf_r+0x2a>
 80081dc:	68a3      	ldr	r3, [r4, #8]
 80081de:	3b01      	subs	r3, #1
 80081e0:	60a3      	str	r3, [r4, #8]
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	6022      	str	r2, [r4, #0]
 80081e8:	701e      	strb	r6, [r3, #0]
 80081ea:	6962      	ldr	r2, [r4, #20]
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d004      	beq.n	80081fc <__swbuf_r+0x6e>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	07db      	lsls	r3, r3, #31
 80081f6:	d5e1      	bpl.n	80081bc <__swbuf_r+0x2e>
 80081f8:	2e0a      	cmp	r6, #10
 80081fa:	d1df      	bne.n	80081bc <__swbuf_r+0x2e>
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 fd30 	bl	8008c64 <_fflush_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	d0d9      	beq.n	80081bc <__swbuf_r+0x2e>
 8008208:	e7d6      	b.n	80081b8 <__swbuf_r+0x2a>
	...

0800820c <__swsetup_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4b29      	ldr	r3, [pc, #164]	@ (80082b4 <__swsetup_r+0xa8>)
 8008210:	4605      	mov	r5, r0
 8008212:	6818      	ldr	r0, [r3, #0]
 8008214:	460c      	mov	r4, r1
 8008216:	b118      	cbz	r0, 8008220 <__swsetup_r+0x14>
 8008218:	6a03      	ldr	r3, [r0, #32]
 800821a:	b90b      	cbnz	r3, 8008220 <__swsetup_r+0x14>
 800821c:	f7ff fec6 	bl	8007fac <__sinit>
 8008220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008224:	0719      	lsls	r1, r3, #28
 8008226:	d422      	bmi.n	800826e <__swsetup_r+0x62>
 8008228:	06da      	lsls	r2, r3, #27
 800822a:	d407      	bmi.n	800823c <__swsetup_r+0x30>
 800822c:	2209      	movs	r2, #9
 800822e:	602a      	str	r2, [r5, #0]
 8008230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	e033      	b.n	80082a4 <__swsetup_r+0x98>
 800823c:	0758      	lsls	r0, r3, #29
 800823e:	d512      	bpl.n	8008266 <__swsetup_r+0x5a>
 8008240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008242:	b141      	cbz	r1, 8008256 <__swsetup_r+0x4a>
 8008244:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008248:	4299      	cmp	r1, r3
 800824a:	d002      	beq.n	8008252 <__swsetup_r+0x46>
 800824c:	4628      	mov	r0, r5
 800824e:	f000 f8bd 	bl	80083cc <_free_r>
 8008252:	2300      	movs	r3, #0
 8008254:	6363      	str	r3, [r4, #52]	@ 0x34
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	2300      	movs	r3, #0
 8008260:	6063      	str	r3, [r4, #4]
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	f043 0308 	orr.w	r3, r3, #8
 800826c:	81a3      	strh	r3, [r4, #12]
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	b94b      	cbnz	r3, 8008286 <__swsetup_r+0x7a>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800827c:	d003      	beq.n	8008286 <__swsetup_r+0x7a>
 800827e:	4621      	mov	r1, r4
 8008280:	4628      	mov	r0, r5
 8008282:	f000 fd3d 	bl	8008d00 <__smakebuf_r>
 8008286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828a:	f013 0201 	ands.w	r2, r3, #1
 800828e:	d00a      	beq.n	80082a6 <__swsetup_r+0x9a>
 8008290:	2200      	movs	r2, #0
 8008292:	60a2      	str	r2, [r4, #8]
 8008294:	6962      	ldr	r2, [r4, #20]
 8008296:	4252      	negs	r2, r2
 8008298:	61a2      	str	r2, [r4, #24]
 800829a:	6922      	ldr	r2, [r4, #16]
 800829c:	b942      	cbnz	r2, 80082b0 <__swsetup_r+0xa4>
 800829e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082a2:	d1c5      	bne.n	8008230 <__swsetup_r+0x24>
 80082a4:	bd38      	pop	{r3, r4, r5, pc}
 80082a6:	0799      	lsls	r1, r3, #30
 80082a8:	bf58      	it	pl
 80082aa:	6962      	ldrpl	r2, [r4, #20]
 80082ac:	60a2      	str	r2, [r4, #8]
 80082ae:	e7f4      	b.n	800829a <__swsetup_r+0x8e>
 80082b0:	2000      	movs	r0, #0
 80082b2:	e7f7      	b.n	80082a4 <__swsetup_r+0x98>
 80082b4:	20000064 	.word	0x20000064

080082b8 <memset>:
 80082b8:	4402      	add	r2, r0
 80082ba:	4603      	mov	r3, r0
 80082bc:	4293      	cmp	r3, r2
 80082be:	d100      	bne.n	80082c2 <memset+0xa>
 80082c0:	4770      	bx	lr
 80082c2:	f803 1b01 	strb.w	r1, [r3], #1
 80082c6:	e7f9      	b.n	80082bc <memset+0x4>

080082c8 <_close_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d06      	ldr	r5, [pc, #24]	@ (80082e4 <_close_r+0x1c>)
 80082cc:	2300      	movs	r3, #0
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	f7f8 fcbb 	bl	8000c4e <_close>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_close_r+0x1a>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_close_r+0x1a>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	2000315c 	.word	0x2000315c

080082e8 <_lseek_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d07      	ldr	r5, [pc, #28]	@ (8008308 <_lseek_r+0x20>)
 80082ec:	4604      	mov	r4, r0
 80082ee:	4608      	mov	r0, r1
 80082f0:	4611      	mov	r1, r2
 80082f2:	2200      	movs	r2, #0
 80082f4:	602a      	str	r2, [r5, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	f7f8 fcd0 	bl	8000c9c <_lseek>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_lseek_r+0x1e>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_lseek_r+0x1e>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	2000315c 	.word	0x2000315c

0800830c <_read_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d07      	ldr	r5, [pc, #28]	@ (800832c <_read_r+0x20>)
 8008310:	4604      	mov	r4, r0
 8008312:	4608      	mov	r0, r1
 8008314:	4611      	mov	r1, r2
 8008316:	2200      	movs	r2, #0
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f7f8 fc5e 	bl	8000bdc <_read>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_read_r+0x1e>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_read_r+0x1e>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	2000315c 	.word	0x2000315c

08008330 <_write_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	@ (8008350 <_write_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7f8 fc69 	bl	8000c16 <_write>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_write_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_write_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	2000315c 	.word	0x2000315c

08008354 <__errno>:
 8008354:	4b01      	ldr	r3, [pc, #4]	@ (800835c <__errno+0x8>)
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	20000064 	.word	0x20000064

08008360 <__libc_init_array>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4d0d      	ldr	r5, [pc, #52]	@ (8008398 <__libc_init_array+0x38>)
 8008364:	4c0d      	ldr	r4, [pc, #52]	@ (800839c <__libc_init_array+0x3c>)
 8008366:	1b64      	subs	r4, r4, r5
 8008368:	10a4      	asrs	r4, r4, #2
 800836a:	2600      	movs	r6, #0
 800836c:	42a6      	cmp	r6, r4
 800836e:	d109      	bne.n	8008384 <__libc_init_array+0x24>
 8008370:	4d0b      	ldr	r5, [pc, #44]	@ (80083a0 <__libc_init_array+0x40>)
 8008372:	4c0c      	ldr	r4, [pc, #48]	@ (80083a4 <__libc_init_array+0x44>)
 8008374:	f000 fd66 	bl	8008e44 <_init>
 8008378:	1b64      	subs	r4, r4, r5
 800837a:	10a4      	asrs	r4, r4, #2
 800837c:	2600      	movs	r6, #0
 800837e:	42a6      	cmp	r6, r4
 8008380:	d105      	bne.n	800838e <__libc_init_array+0x2e>
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	f855 3b04 	ldr.w	r3, [r5], #4
 8008388:	4798      	blx	r3
 800838a:	3601      	adds	r6, #1
 800838c:	e7ee      	b.n	800836c <__libc_init_array+0xc>
 800838e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008392:	4798      	blx	r3
 8008394:	3601      	adds	r6, #1
 8008396:	e7f2      	b.n	800837e <__libc_init_array+0x1e>
 8008398:	0801e89c 	.word	0x0801e89c
 800839c:	0801e89c 	.word	0x0801e89c
 80083a0:	0801e89c 	.word	0x0801e89c
 80083a4:	0801e8a0 	.word	0x0801e8a0

080083a8 <__retarget_lock_init_recursive>:
 80083a8:	4770      	bx	lr

080083aa <__retarget_lock_acquire_recursive>:
 80083aa:	4770      	bx	lr

080083ac <__retarget_lock_release_recursive>:
 80083ac:	4770      	bx	lr

080083ae <memcpy>:
 80083ae:	440a      	add	r2, r1
 80083b0:	4291      	cmp	r1, r2
 80083b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80083b6:	d100      	bne.n	80083ba <memcpy+0xc>
 80083b8:	4770      	bx	lr
 80083ba:	b510      	push	{r4, lr}
 80083bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c4:	4291      	cmp	r1, r2
 80083c6:	d1f9      	bne.n	80083bc <memcpy+0xe>
 80083c8:	bd10      	pop	{r4, pc}
	...

080083cc <_free_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4605      	mov	r5, r0
 80083d0:	2900      	cmp	r1, #0
 80083d2:	d041      	beq.n	8008458 <_free_r+0x8c>
 80083d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d8:	1f0c      	subs	r4, r1, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bfb8      	it	lt
 80083de:	18e4      	addlt	r4, r4, r3
 80083e0:	f000 f8e0 	bl	80085a4 <__malloc_lock>
 80083e4:	4a1d      	ldr	r2, [pc, #116]	@ (800845c <_free_r+0x90>)
 80083e6:	6813      	ldr	r3, [r2, #0]
 80083e8:	b933      	cbnz	r3, 80083f8 <_free_r+0x2c>
 80083ea:	6063      	str	r3, [r4, #4]
 80083ec:	6014      	str	r4, [r2, #0]
 80083ee:	4628      	mov	r0, r5
 80083f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f4:	f000 b8dc 	b.w	80085b0 <__malloc_unlock>
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	d908      	bls.n	800840e <_free_r+0x42>
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	1821      	adds	r1, r4, r0
 8008400:	428b      	cmp	r3, r1
 8008402:	bf01      	itttt	eq
 8008404:	6819      	ldreq	r1, [r3, #0]
 8008406:	685b      	ldreq	r3, [r3, #4]
 8008408:	1809      	addeq	r1, r1, r0
 800840a:	6021      	streq	r1, [r4, #0]
 800840c:	e7ed      	b.n	80083ea <_free_r+0x1e>
 800840e:	461a      	mov	r2, r3
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	b10b      	cbz	r3, 8008418 <_free_r+0x4c>
 8008414:	42a3      	cmp	r3, r4
 8008416:	d9fa      	bls.n	800840e <_free_r+0x42>
 8008418:	6811      	ldr	r1, [r2, #0]
 800841a:	1850      	adds	r0, r2, r1
 800841c:	42a0      	cmp	r0, r4
 800841e:	d10b      	bne.n	8008438 <_free_r+0x6c>
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	4401      	add	r1, r0
 8008424:	1850      	adds	r0, r2, r1
 8008426:	4283      	cmp	r3, r0
 8008428:	6011      	str	r1, [r2, #0]
 800842a:	d1e0      	bne.n	80083ee <_free_r+0x22>
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	6053      	str	r3, [r2, #4]
 8008432:	4408      	add	r0, r1
 8008434:	6010      	str	r0, [r2, #0]
 8008436:	e7da      	b.n	80083ee <_free_r+0x22>
 8008438:	d902      	bls.n	8008440 <_free_r+0x74>
 800843a:	230c      	movs	r3, #12
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	e7d6      	b.n	80083ee <_free_r+0x22>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	1821      	adds	r1, r4, r0
 8008444:	428b      	cmp	r3, r1
 8008446:	bf04      	itt	eq
 8008448:	6819      	ldreq	r1, [r3, #0]
 800844a:	685b      	ldreq	r3, [r3, #4]
 800844c:	6063      	str	r3, [r4, #4]
 800844e:	bf04      	itt	eq
 8008450:	1809      	addeq	r1, r1, r0
 8008452:	6021      	streq	r1, [r4, #0]
 8008454:	6054      	str	r4, [r2, #4]
 8008456:	e7ca      	b.n	80083ee <_free_r+0x22>
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	bf00      	nop
 800845c:	20003168 	.word	0x20003168

08008460 <sbrk_aligned>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	4e0f      	ldr	r6, [pc, #60]	@ (80084a0 <sbrk_aligned+0x40>)
 8008464:	460c      	mov	r4, r1
 8008466:	6831      	ldr	r1, [r6, #0]
 8008468:	4605      	mov	r5, r0
 800846a:	b911      	cbnz	r1, 8008472 <sbrk_aligned+0x12>
 800846c:	f000 fcda 	bl	8008e24 <_sbrk_r>
 8008470:	6030      	str	r0, [r6, #0]
 8008472:	4621      	mov	r1, r4
 8008474:	4628      	mov	r0, r5
 8008476:	f000 fcd5 	bl	8008e24 <_sbrk_r>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d103      	bne.n	8008486 <sbrk_aligned+0x26>
 800847e:	f04f 34ff 	mov.w	r4, #4294967295
 8008482:	4620      	mov	r0, r4
 8008484:	bd70      	pop	{r4, r5, r6, pc}
 8008486:	1cc4      	adds	r4, r0, #3
 8008488:	f024 0403 	bic.w	r4, r4, #3
 800848c:	42a0      	cmp	r0, r4
 800848e:	d0f8      	beq.n	8008482 <sbrk_aligned+0x22>
 8008490:	1a21      	subs	r1, r4, r0
 8008492:	4628      	mov	r0, r5
 8008494:	f000 fcc6 	bl	8008e24 <_sbrk_r>
 8008498:	3001      	adds	r0, #1
 800849a:	d1f2      	bne.n	8008482 <sbrk_aligned+0x22>
 800849c:	e7ef      	b.n	800847e <sbrk_aligned+0x1e>
 800849e:	bf00      	nop
 80084a0:	20003164 	.word	0x20003164

080084a4 <_malloc_r>:
 80084a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a8:	1ccd      	adds	r5, r1, #3
 80084aa:	f025 0503 	bic.w	r5, r5, #3
 80084ae:	3508      	adds	r5, #8
 80084b0:	2d0c      	cmp	r5, #12
 80084b2:	bf38      	it	cc
 80084b4:	250c      	movcc	r5, #12
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	4606      	mov	r6, r0
 80084ba:	db01      	blt.n	80084c0 <_malloc_r+0x1c>
 80084bc:	42a9      	cmp	r1, r5
 80084be:	d904      	bls.n	80084ca <_malloc_r+0x26>
 80084c0:	230c      	movs	r3, #12
 80084c2:	6033      	str	r3, [r6, #0]
 80084c4:	2000      	movs	r0, #0
 80084c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085a0 <_malloc_r+0xfc>
 80084ce:	f000 f869 	bl	80085a4 <__malloc_lock>
 80084d2:	f8d8 3000 	ldr.w	r3, [r8]
 80084d6:	461c      	mov	r4, r3
 80084d8:	bb44      	cbnz	r4, 800852c <_malloc_r+0x88>
 80084da:	4629      	mov	r1, r5
 80084dc:	4630      	mov	r0, r6
 80084de:	f7ff ffbf 	bl	8008460 <sbrk_aligned>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	4604      	mov	r4, r0
 80084e6:	d158      	bne.n	800859a <_malloc_r+0xf6>
 80084e8:	f8d8 4000 	ldr.w	r4, [r8]
 80084ec:	4627      	mov	r7, r4
 80084ee:	2f00      	cmp	r7, #0
 80084f0:	d143      	bne.n	800857a <_malloc_r+0xd6>
 80084f2:	2c00      	cmp	r4, #0
 80084f4:	d04b      	beq.n	800858e <_malloc_r+0xea>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	4639      	mov	r1, r7
 80084fa:	4630      	mov	r0, r6
 80084fc:	eb04 0903 	add.w	r9, r4, r3
 8008500:	f000 fc90 	bl	8008e24 <_sbrk_r>
 8008504:	4581      	cmp	r9, r0
 8008506:	d142      	bne.n	800858e <_malloc_r+0xea>
 8008508:	6821      	ldr	r1, [r4, #0]
 800850a:	1a6d      	subs	r5, r5, r1
 800850c:	4629      	mov	r1, r5
 800850e:	4630      	mov	r0, r6
 8008510:	f7ff ffa6 	bl	8008460 <sbrk_aligned>
 8008514:	3001      	adds	r0, #1
 8008516:	d03a      	beq.n	800858e <_malloc_r+0xea>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	442b      	add	r3, r5
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	f8d8 3000 	ldr.w	r3, [r8]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	bb62      	cbnz	r2, 8008580 <_malloc_r+0xdc>
 8008526:	f8c8 7000 	str.w	r7, [r8]
 800852a:	e00f      	b.n	800854c <_malloc_r+0xa8>
 800852c:	6822      	ldr	r2, [r4, #0]
 800852e:	1b52      	subs	r2, r2, r5
 8008530:	d420      	bmi.n	8008574 <_malloc_r+0xd0>
 8008532:	2a0b      	cmp	r2, #11
 8008534:	d917      	bls.n	8008566 <_malloc_r+0xc2>
 8008536:	1961      	adds	r1, r4, r5
 8008538:	42a3      	cmp	r3, r4
 800853a:	6025      	str	r5, [r4, #0]
 800853c:	bf18      	it	ne
 800853e:	6059      	strne	r1, [r3, #4]
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	bf08      	it	eq
 8008544:	f8c8 1000 	streq.w	r1, [r8]
 8008548:	5162      	str	r2, [r4, r5]
 800854a:	604b      	str	r3, [r1, #4]
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f82f 	bl	80085b0 <__malloc_unlock>
 8008552:	f104 000b 	add.w	r0, r4, #11
 8008556:	1d23      	adds	r3, r4, #4
 8008558:	f020 0007 	bic.w	r0, r0, #7
 800855c:	1ac2      	subs	r2, r0, r3
 800855e:	bf1c      	itt	ne
 8008560:	1a1b      	subne	r3, r3, r0
 8008562:	50a3      	strne	r3, [r4, r2]
 8008564:	e7af      	b.n	80084c6 <_malloc_r+0x22>
 8008566:	6862      	ldr	r2, [r4, #4]
 8008568:	42a3      	cmp	r3, r4
 800856a:	bf0c      	ite	eq
 800856c:	f8c8 2000 	streq.w	r2, [r8]
 8008570:	605a      	strne	r2, [r3, #4]
 8008572:	e7eb      	b.n	800854c <_malloc_r+0xa8>
 8008574:	4623      	mov	r3, r4
 8008576:	6864      	ldr	r4, [r4, #4]
 8008578:	e7ae      	b.n	80084d8 <_malloc_r+0x34>
 800857a:	463c      	mov	r4, r7
 800857c:	687f      	ldr	r7, [r7, #4]
 800857e:	e7b6      	b.n	80084ee <_malloc_r+0x4a>
 8008580:	461a      	mov	r2, r3
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	42a3      	cmp	r3, r4
 8008586:	d1fb      	bne.n	8008580 <_malloc_r+0xdc>
 8008588:	2300      	movs	r3, #0
 800858a:	6053      	str	r3, [r2, #4]
 800858c:	e7de      	b.n	800854c <_malloc_r+0xa8>
 800858e:	230c      	movs	r3, #12
 8008590:	6033      	str	r3, [r6, #0]
 8008592:	4630      	mov	r0, r6
 8008594:	f000 f80c 	bl	80085b0 <__malloc_unlock>
 8008598:	e794      	b.n	80084c4 <_malloc_r+0x20>
 800859a:	6005      	str	r5, [r0, #0]
 800859c:	e7d6      	b.n	800854c <_malloc_r+0xa8>
 800859e:	bf00      	nop
 80085a0:	20003168 	.word	0x20003168

080085a4 <__malloc_lock>:
 80085a4:	4801      	ldr	r0, [pc, #4]	@ (80085ac <__malloc_lock+0x8>)
 80085a6:	f7ff bf00 	b.w	80083aa <__retarget_lock_acquire_recursive>
 80085aa:	bf00      	nop
 80085ac:	20003160 	.word	0x20003160

080085b0 <__malloc_unlock>:
 80085b0:	4801      	ldr	r0, [pc, #4]	@ (80085b8 <__malloc_unlock+0x8>)
 80085b2:	f7ff befb 	b.w	80083ac <__retarget_lock_release_recursive>
 80085b6:	bf00      	nop
 80085b8:	20003160 	.word	0x20003160

080085bc <__sfputc_r>:
 80085bc:	6893      	ldr	r3, [r2, #8]
 80085be:	3b01      	subs	r3, #1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	b410      	push	{r4}
 80085c4:	6093      	str	r3, [r2, #8]
 80085c6:	da08      	bge.n	80085da <__sfputc_r+0x1e>
 80085c8:	6994      	ldr	r4, [r2, #24]
 80085ca:	42a3      	cmp	r3, r4
 80085cc:	db01      	blt.n	80085d2 <__sfputc_r+0x16>
 80085ce:	290a      	cmp	r1, #10
 80085d0:	d103      	bne.n	80085da <__sfputc_r+0x1e>
 80085d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085d6:	f7ff bdda 	b.w	800818e <__swbuf_r>
 80085da:	6813      	ldr	r3, [r2, #0]
 80085dc:	1c58      	adds	r0, r3, #1
 80085de:	6010      	str	r0, [r2, #0]
 80085e0:	7019      	strb	r1, [r3, #0]
 80085e2:	4608      	mov	r0, r1
 80085e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <__sfputs_r>:
 80085ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	4614      	mov	r4, r2
 80085f2:	18d5      	adds	r5, r2, r3
 80085f4:	42ac      	cmp	r4, r5
 80085f6:	d101      	bne.n	80085fc <__sfputs_r+0x12>
 80085f8:	2000      	movs	r0, #0
 80085fa:	e007      	b.n	800860c <__sfputs_r+0x22>
 80085fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008600:	463a      	mov	r2, r7
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ffda 	bl	80085bc <__sfputc_r>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d1f3      	bne.n	80085f4 <__sfputs_r+0xa>
 800860c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008610 <_vfiprintf_r>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	460d      	mov	r5, r1
 8008616:	b09d      	sub	sp, #116	@ 0x74
 8008618:	4614      	mov	r4, r2
 800861a:	4698      	mov	r8, r3
 800861c:	4606      	mov	r6, r0
 800861e:	b118      	cbz	r0, 8008628 <_vfiprintf_r+0x18>
 8008620:	6a03      	ldr	r3, [r0, #32]
 8008622:	b90b      	cbnz	r3, 8008628 <_vfiprintf_r+0x18>
 8008624:	f7ff fcc2 	bl	8007fac <__sinit>
 8008628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800862a:	07d9      	lsls	r1, r3, #31
 800862c:	d405      	bmi.n	800863a <_vfiprintf_r+0x2a>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	059a      	lsls	r2, r3, #22
 8008632:	d402      	bmi.n	800863a <_vfiprintf_r+0x2a>
 8008634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008636:	f7ff feb8 	bl	80083aa <__retarget_lock_acquire_recursive>
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	071b      	lsls	r3, r3, #28
 800863e:	d501      	bpl.n	8008644 <_vfiprintf_r+0x34>
 8008640:	692b      	ldr	r3, [r5, #16]
 8008642:	b99b      	cbnz	r3, 800866c <_vfiprintf_r+0x5c>
 8008644:	4629      	mov	r1, r5
 8008646:	4630      	mov	r0, r6
 8008648:	f7ff fde0 	bl	800820c <__swsetup_r>
 800864c:	b170      	cbz	r0, 800866c <_vfiprintf_r+0x5c>
 800864e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008650:	07dc      	lsls	r4, r3, #31
 8008652:	d504      	bpl.n	800865e <_vfiprintf_r+0x4e>
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	b01d      	add	sp, #116	@ 0x74
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	0598      	lsls	r0, r3, #22
 8008662:	d4f7      	bmi.n	8008654 <_vfiprintf_r+0x44>
 8008664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008666:	f7ff fea1 	bl	80083ac <__retarget_lock_release_recursive>
 800866a:	e7f3      	b.n	8008654 <_vfiprintf_r+0x44>
 800866c:	2300      	movs	r3, #0
 800866e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008670:	2320      	movs	r3, #32
 8008672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008676:	f8cd 800c 	str.w	r8, [sp, #12]
 800867a:	2330      	movs	r3, #48	@ 0x30
 800867c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800882c <_vfiprintf_r+0x21c>
 8008680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008684:	f04f 0901 	mov.w	r9, #1
 8008688:	4623      	mov	r3, r4
 800868a:	469a      	mov	sl, r3
 800868c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008690:	b10a      	cbz	r2, 8008696 <_vfiprintf_r+0x86>
 8008692:	2a25      	cmp	r2, #37	@ 0x25
 8008694:	d1f9      	bne.n	800868a <_vfiprintf_r+0x7a>
 8008696:	ebba 0b04 	subs.w	fp, sl, r4
 800869a:	d00b      	beq.n	80086b4 <_vfiprintf_r+0xa4>
 800869c:	465b      	mov	r3, fp
 800869e:	4622      	mov	r2, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ffa1 	bl	80085ea <__sfputs_r>
 80086a8:	3001      	adds	r0, #1
 80086aa:	f000 80a7 	beq.w	80087fc <_vfiprintf_r+0x1ec>
 80086ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086b0:	445a      	add	r2, fp
 80086b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80086b4:	f89a 3000 	ldrb.w	r3, [sl]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 809f 	beq.w	80087fc <_vfiprintf_r+0x1ec>
 80086be:	2300      	movs	r3, #0
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295
 80086c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c8:	f10a 0a01 	add.w	sl, sl, #1
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80086d6:	4654      	mov	r4, sl
 80086d8:	2205      	movs	r2, #5
 80086da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086de:	4853      	ldr	r0, [pc, #332]	@ (800882c <_vfiprintf_r+0x21c>)
 80086e0:	f7f7 fd9e 	bl	8000220 <memchr>
 80086e4:	9a04      	ldr	r2, [sp, #16]
 80086e6:	b9d8      	cbnz	r0, 8008720 <_vfiprintf_r+0x110>
 80086e8:	06d1      	lsls	r1, r2, #27
 80086ea:	bf44      	itt	mi
 80086ec:	2320      	movmi	r3, #32
 80086ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086f2:	0713      	lsls	r3, r2, #28
 80086f4:	bf44      	itt	mi
 80086f6:	232b      	movmi	r3, #43	@ 0x2b
 80086f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008700:	2b2a      	cmp	r3, #42	@ 0x2a
 8008702:	d015      	beq.n	8008730 <_vfiprintf_r+0x120>
 8008704:	9a07      	ldr	r2, [sp, #28]
 8008706:	4654      	mov	r4, sl
 8008708:	2000      	movs	r0, #0
 800870a:	f04f 0c0a 	mov.w	ip, #10
 800870e:	4621      	mov	r1, r4
 8008710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008714:	3b30      	subs	r3, #48	@ 0x30
 8008716:	2b09      	cmp	r3, #9
 8008718:	d94b      	bls.n	80087b2 <_vfiprintf_r+0x1a2>
 800871a:	b1b0      	cbz	r0, 800874a <_vfiprintf_r+0x13a>
 800871c:	9207      	str	r2, [sp, #28]
 800871e:	e014      	b.n	800874a <_vfiprintf_r+0x13a>
 8008720:	eba0 0308 	sub.w	r3, r0, r8
 8008724:	fa09 f303 	lsl.w	r3, r9, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	46a2      	mov	sl, r4
 800872e:	e7d2      	b.n	80086d6 <_vfiprintf_r+0xc6>
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	1d19      	adds	r1, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	9103      	str	r1, [sp, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	bfbb      	ittet	lt
 800873c:	425b      	neglt	r3, r3
 800873e:	f042 0202 	orrlt.w	r2, r2, #2
 8008742:	9307      	strge	r3, [sp, #28]
 8008744:	9307      	strlt	r3, [sp, #28]
 8008746:	bfb8      	it	lt
 8008748:	9204      	strlt	r2, [sp, #16]
 800874a:	7823      	ldrb	r3, [r4, #0]
 800874c:	2b2e      	cmp	r3, #46	@ 0x2e
 800874e:	d10a      	bne.n	8008766 <_vfiprintf_r+0x156>
 8008750:	7863      	ldrb	r3, [r4, #1]
 8008752:	2b2a      	cmp	r3, #42	@ 0x2a
 8008754:	d132      	bne.n	80087bc <_vfiprintf_r+0x1ac>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	1d1a      	adds	r2, r3, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	9203      	str	r2, [sp, #12]
 800875e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008762:	3402      	adds	r4, #2
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800883c <_vfiprintf_r+0x22c>
 800876a:	7821      	ldrb	r1, [r4, #0]
 800876c:	2203      	movs	r2, #3
 800876e:	4650      	mov	r0, sl
 8008770:	f7f7 fd56 	bl	8000220 <memchr>
 8008774:	b138      	cbz	r0, 8008786 <_vfiprintf_r+0x176>
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	eba0 000a 	sub.w	r0, r0, sl
 800877c:	2240      	movs	r2, #64	@ 0x40
 800877e:	4082      	lsls	r2, r0
 8008780:	4313      	orrs	r3, r2
 8008782:	3401      	adds	r4, #1
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878a:	4829      	ldr	r0, [pc, #164]	@ (8008830 <_vfiprintf_r+0x220>)
 800878c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008790:	2206      	movs	r2, #6
 8008792:	f7f7 fd45 	bl	8000220 <memchr>
 8008796:	2800      	cmp	r0, #0
 8008798:	d03f      	beq.n	800881a <_vfiprintf_r+0x20a>
 800879a:	4b26      	ldr	r3, [pc, #152]	@ (8008834 <_vfiprintf_r+0x224>)
 800879c:	bb1b      	cbnz	r3, 80087e6 <_vfiprintf_r+0x1d6>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	3307      	adds	r3, #7
 80087a2:	f023 0307 	bic.w	r3, r3, #7
 80087a6:	3308      	adds	r3, #8
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ac:	443b      	add	r3, r7
 80087ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b0:	e76a      	b.n	8008688 <_vfiprintf_r+0x78>
 80087b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087b6:	460c      	mov	r4, r1
 80087b8:	2001      	movs	r0, #1
 80087ba:	e7a8      	b.n	800870e <_vfiprintf_r+0xfe>
 80087bc:	2300      	movs	r3, #0
 80087be:	3401      	adds	r4, #1
 80087c0:	9305      	str	r3, [sp, #20]
 80087c2:	4619      	mov	r1, r3
 80087c4:	f04f 0c0a 	mov.w	ip, #10
 80087c8:	4620      	mov	r0, r4
 80087ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ce:	3a30      	subs	r2, #48	@ 0x30
 80087d0:	2a09      	cmp	r2, #9
 80087d2:	d903      	bls.n	80087dc <_vfiprintf_r+0x1cc>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0c6      	beq.n	8008766 <_vfiprintf_r+0x156>
 80087d8:	9105      	str	r1, [sp, #20]
 80087da:	e7c4      	b.n	8008766 <_vfiprintf_r+0x156>
 80087dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80087e0:	4604      	mov	r4, r0
 80087e2:	2301      	movs	r3, #1
 80087e4:	e7f0      	b.n	80087c8 <_vfiprintf_r+0x1b8>
 80087e6:	ab03      	add	r3, sp, #12
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	462a      	mov	r2, r5
 80087ec:	4b12      	ldr	r3, [pc, #72]	@ (8008838 <_vfiprintf_r+0x228>)
 80087ee:	a904      	add	r1, sp, #16
 80087f0:	4630      	mov	r0, r6
 80087f2:	f3af 8000 	nop.w
 80087f6:	4607      	mov	r7, r0
 80087f8:	1c78      	adds	r0, r7, #1
 80087fa:	d1d6      	bne.n	80087aa <_vfiprintf_r+0x19a>
 80087fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087fe:	07d9      	lsls	r1, r3, #31
 8008800:	d405      	bmi.n	800880e <_vfiprintf_r+0x1fe>
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	059a      	lsls	r2, r3, #22
 8008806:	d402      	bmi.n	800880e <_vfiprintf_r+0x1fe>
 8008808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800880a:	f7ff fdcf 	bl	80083ac <__retarget_lock_release_recursive>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	065b      	lsls	r3, r3, #25
 8008812:	f53f af1f 	bmi.w	8008654 <_vfiprintf_r+0x44>
 8008816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008818:	e71e      	b.n	8008658 <_vfiprintf_r+0x48>
 800881a:	ab03      	add	r3, sp, #12
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	462a      	mov	r2, r5
 8008820:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <_vfiprintf_r+0x228>)
 8008822:	a904      	add	r1, sp, #16
 8008824:	4630      	mov	r0, r6
 8008826:	f000 f879 	bl	800891c <_printf_i>
 800882a:	e7e4      	b.n	80087f6 <_vfiprintf_r+0x1e6>
 800882c:	0801e860 	.word	0x0801e860
 8008830:	0801e86a 	.word	0x0801e86a
 8008834:	00000000 	.word	0x00000000
 8008838:	080085eb 	.word	0x080085eb
 800883c:	0801e866 	.word	0x0801e866

08008840 <_printf_common>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	4616      	mov	r6, r2
 8008846:	4698      	mov	r8, r3
 8008848:	688a      	ldr	r2, [r1, #8]
 800884a:	690b      	ldr	r3, [r1, #16]
 800884c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008850:	4293      	cmp	r3, r2
 8008852:	bfb8      	it	lt
 8008854:	4613      	movlt	r3, r2
 8008856:	6033      	str	r3, [r6, #0]
 8008858:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800885c:	4607      	mov	r7, r0
 800885e:	460c      	mov	r4, r1
 8008860:	b10a      	cbz	r2, 8008866 <_printf_common+0x26>
 8008862:	3301      	adds	r3, #1
 8008864:	6033      	str	r3, [r6, #0]
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	0699      	lsls	r1, r3, #26
 800886a:	bf42      	ittt	mi
 800886c:	6833      	ldrmi	r3, [r6, #0]
 800886e:	3302      	addmi	r3, #2
 8008870:	6033      	strmi	r3, [r6, #0]
 8008872:	6825      	ldr	r5, [r4, #0]
 8008874:	f015 0506 	ands.w	r5, r5, #6
 8008878:	d106      	bne.n	8008888 <_printf_common+0x48>
 800887a:	f104 0a19 	add.w	sl, r4, #25
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	6832      	ldr	r2, [r6, #0]
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	42ab      	cmp	r3, r5
 8008886:	dc26      	bgt.n	80088d6 <_printf_common+0x96>
 8008888:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800888c:	6822      	ldr	r2, [r4, #0]
 800888e:	3b00      	subs	r3, #0
 8008890:	bf18      	it	ne
 8008892:	2301      	movne	r3, #1
 8008894:	0692      	lsls	r2, r2, #26
 8008896:	d42b      	bmi.n	80088f0 <_printf_common+0xb0>
 8008898:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800889c:	4641      	mov	r1, r8
 800889e:	4638      	mov	r0, r7
 80088a0:	47c8      	blx	r9
 80088a2:	3001      	adds	r0, #1
 80088a4:	d01e      	beq.n	80088e4 <_printf_common+0xa4>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	6922      	ldr	r2, [r4, #16]
 80088aa:	f003 0306 	and.w	r3, r3, #6
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	bf02      	ittt	eq
 80088b2:	68e5      	ldreq	r5, [r4, #12]
 80088b4:	6833      	ldreq	r3, [r6, #0]
 80088b6:	1aed      	subeq	r5, r5, r3
 80088b8:	68a3      	ldr	r3, [r4, #8]
 80088ba:	bf0c      	ite	eq
 80088bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088c0:	2500      	movne	r5, #0
 80088c2:	4293      	cmp	r3, r2
 80088c4:	bfc4      	itt	gt
 80088c6:	1a9b      	subgt	r3, r3, r2
 80088c8:	18ed      	addgt	r5, r5, r3
 80088ca:	2600      	movs	r6, #0
 80088cc:	341a      	adds	r4, #26
 80088ce:	42b5      	cmp	r5, r6
 80088d0:	d11a      	bne.n	8008908 <_printf_common+0xc8>
 80088d2:	2000      	movs	r0, #0
 80088d4:	e008      	b.n	80088e8 <_printf_common+0xa8>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4652      	mov	r2, sl
 80088da:	4641      	mov	r1, r8
 80088dc:	4638      	mov	r0, r7
 80088de:	47c8      	blx	r9
 80088e0:	3001      	adds	r0, #1
 80088e2:	d103      	bne.n	80088ec <_printf_common+0xac>
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ec:	3501      	adds	r5, #1
 80088ee:	e7c6      	b.n	800887e <_printf_common+0x3e>
 80088f0:	18e1      	adds	r1, r4, r3
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	2030      	movs	r0, #48	@ 0x30
 80088f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088fa:	4422      	add	r2, r4
 80088fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008900:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008904:	3302      	adds	r3, #2
 8008906:	e7c7      	b.n	8008898 <_printf_common+0x58>
 8008908:	2301      	movs	r3, #1
 800890a:	4622      	mov	r2, r4
 800890c:	4641      	mov	r1, r8
 800890e:	4638      	mov	r0, r7
 8008910:	47c8      	blx	r9
 8008912:	3001      	adds	r0, #1
 8008914:	d0e6      	beq.n	80088e4 <_printf_common+0xa4>
 8008916:	3601      	adds	r6, #1
 8008918:	e7d9      	b.n	80088ce <_printf_common+0x8e>
	...

0800891c <_printf_i>:
 800891c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	7e0f      	ldrb	r7, [r1, #24]
 8008922:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008924:	2f78      	cmp	r7, #120	@ 0x78
 8008926:	4691      	mov	r9, r2
 8008928:	4680      	mov	r8, r0
 800892a:	460c      	mov	r4, r1
 800892c:	469a      	mov	sl, r3
 800892e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008932:	d807      	bhi.n	8008944 <_printf_i+0x28>
 8008934:	2f62      	cmp	r7, #98	@ 0x62
 8008936:	d80a      	bhi.n	800894e <_printf_i+0x32>
 8008938:	2f00      	cmp	r7, #0
 800893a:	f000 80d2 	beq.w	8008ae2 <_printf_i+0x1c6>
 800893e:	2f58      	cmp	r7, #88	@ 0x58
 8008940:	f000 80b9 	beq.w	8008ab6 <_printf_i+0x19a>
 8008944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008948:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800894c:	e03a      	b.n	80089c4 <_printf_i+0xa8>
 800894e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008952:	2b15      	cmp	r3, #21
 8008954:	d8f6      	bhi.n	8008944 <_printf_i+0x28>
 8008956:	a101      	add	r1, pc, #4	@ (adr r1, 800895c <_printf_i+0x40>)
 8008958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800895c:	080089b5 	.word	0x080089b5
 8008960:	080089c9 	.word	0x080089c9
 8008964:	08008945 	.word	0x08008945
 8008968:	08008945 	.word	0x08008945
 800896c:	08008945 	.word	0x08008945
 8008970:	08008945 	.word	0x08008945
 8008974:	080089c9 	.word	0x080089c9
 8008978:	08008945 	.word	0x08008945
 800897c:	08008945 	.word	0x08008945
 8008980:	08008945 	.word	0x08008945
 8008984:	08008945 	.word	0x08008945
 8008988:	08008ac9 	.word	0x08008ac9
 800898c:	080089f3 	.word	0x080089f3
 8008990:	08008a83 	.word	0x08008a83
 8008994:	08008945 	.word	0x08008945
 8008998:	08008945 	.word	0x08008945
 800899c:	08008aeb 	.word	0x08008aeb
 80089a0:	08008945 	.word	0x08008945
 80089a4:	080089f3 	.word	0x080089f3
 80089a8:	08008945 	.word	0x08008945
 80089ac:	08008945 	.word	0x08008945
 80089b0:	08008a8b 	.word	0x08008a8b
 80089b4:	6833      	ldr	r3, [r6, #0]
 80089b6:	1d1a      	adds	r2, r3, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6032      	str	r2, [r6, #0]
 80089bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80089c4:	2301      	movs	r3, #1
 80089c6:	e09d      	b.n	8008b04 <_printf_i+0x1e8>
 80089c8:	6833      	ldr	r3, [r6, #0]
 80089ca:	6820      	ldr	r0, [r4, #0]
 80089cc:	1d19      	adds	r1, r3, #4
 80089ce:	6031      	str	r1, [r6, #0]
 80089d0:	0606      	lsls	r6, r0, #24
 80089d2:	d501      	bpl.n	80089d8 <_printf_i+0xbc>
 80089d4:	681d      	ldr	r5, [r3, #0]
 80089d6:	e003      	b.n	80089e0 <_printf_i+0xc4>
 80089d8:	0645      	lsls	r5, r0, #25
 80089da:	d5fb      	bpl.n	80089d4 <_printf_i+0xb8>
 80089dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	da03      	bge.n	80089ec <_printf_i+0xd0>
 80089e4:	232d      	movs	r3, #45	@ 0x2d
 80089e6:	426d      	negs	r5, r5
 80089e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089ec:	4859      	ldr	r0, [pc, #356]	@ (8008b54 <_printf_i+0x238>)
 80089ee:	230a      	movs	r3, #10
 80089f0:	e011      	b.n	8008a16 <_printf_i+0xfa>
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	6833      	ldr	r3, [r6, #0]
 80089f6:	0608      	lsls	r0, r1, #24
 80089f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80089fc:	d402      	bmi.n	8008a04 <_printf_i+0xe8>
 80089fe:	0649      	lsls	r1, r1, #25
 8008a00:	bf48      	it	mi
 8008a02:	b2ad      	uxthmi	r5, r5
 8008a04:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a06:	4853      	ldr	r0, [pc, #332]	@ (8008b54 <_printf_i+0x238>)
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	bf14      	ite	ne
 8008a0c:	230a      	movne	r3, #10
 8008a0e:	2308      	moveq	r3, #8
 8008a10:	2100      	movs	r1, #0
 8008a12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a16:	6866      	ldr	r6, [r4, #4]
 8008a18:	60a6      	str	r6, [r4, #8]
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	bfa2      	ittt	ge
 8008a1e:	6821      	ldrge	r1, [r4, #0]
 8008a20:	f021 0104 	bicge.w	r1, r1, #4
 8008a24:	6021      	strge	r1, [r4, #0]
 8008a26:	b90d      	cbnz	r5, 8008a2c <_printf_i+0x110>
 8008a28:	2e00      	cmp	r6, #0
 8008a2a:	d04b      	beq.n	8008ac4 <_printf_i+0x1a8>
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a32:	fb03 5711 	mls	r7, r3, r1, r5
 8008a36:	5dc7      	ldrb	r7, [r0, r7]
 8008a38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a3c:	462f      	mov	r7, r5
 8008a3e:	42bb      	cmp	r3, r7
 8008a40:	460d      	mov	r5, r1
 8008a42:	d9f4      	bls.n	8008a2e <_printf_i+0x112>
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d10b      	bne.n	8008a60 <_printf_i+0x144>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	07df      	lsls	r7, r3, #31
 8008a4c:	d508      	bpl.n	8008a60 <_printf_i+0x144>
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	6861      	ldr	r1, [r4, #4]
 8008a52:	4299      	cmp	r1, r3
 8008a54:	bfde      	ittt	le
 8008a56:	2330      	movle	r3, #48	@ 0x30
 8008a58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a60:	1b92      	subs	r2, r2, r6
 8008a62:	6122      	str	r2, [r4, #16]
 8008a64:	f8cd a000 	str.w	sl, [sp]
 8008a68:	464b      	mov	r3, r9
 8008a6a:	aa03      	add	r2, sp, #12
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4640      	mov	r0, r8
 8008a70:	f7ff fee6 	bl	8008840 <_printf_common>
 8008a74:	3001      	adds	r0, #1
 8008a76:	d14a      	bne.n	8008b0e <_printf_i+0x1f2>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	b004      	add	sp, #16
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	f043 0320 	orr.w	r3, r3, #32
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	4833      	ldr	r0, [pc, #204]	@ (8008b58 <_printf_i+0x23c>)
 8008a8c:	2778      	movs	r7, #120	@ 0x78
 8008a8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	6831      	ldr	r1, [r6, #0]
 8008a96:	061f      	lsls	r7, r3, #24
 8008a98:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a9c:	d402      	bmi.n	8008aa4 <_printf_i+0x188>
 8008a9e:	065f      	lsls	r7, r3, #25
 8008aa0:	bf48      	it	mi
 8008aa2:	b2ad      	uxthmi	r5, r5
 8008aa4:	6031      	str	r1, [r6, #0]
 8008aa6:	07d9      	lsls	r1, r3, #31
 8008aa8:	bf44      	itt	mi
 8008aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8008aae:	6023      	strmi	r3, [r4, #0]
 8008ab0:	b11d      	cbz	r5, 8008aba <_printf_i+0x19e>
 8008ab2:	2310      	movs	r3, #16
 8008ab4:	e7ac      	b.n	8008a10 <_printf_i+0xf4>
 8008ab6:	4827      	ldr	r0, [pc, #156]	@ (8008b54 <_printf_i+0x238>)
 8008ab8:	e7e9      	b.n	8008a8e <_printf_i+0x172>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	f023 0320 	bic.w	r3, r3, #32
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	e7f6      	b.n	8008ab2 <_printf_i+0x196>
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	e7bd      	b.n	8008a44 <_printf_i+0x128>
 8008ac8:	6833      	ldr	r3, [r6, #0]
 8008aca:	6825      	ldr	r5, [r4, #0]
 8008acc:	6961      	ldr	r1, [r4, #20]
 8008ace:	1d18      	adds	r0, r3, #4
 8008ad0:	6030      	str	r0, [r6, #0]
 8008ad2:	062e      	lsls	r6, r5, #24
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	d501      	bpl.n	8008adc <_printf_i+0x1c0>
 8008ad8:	6019      	str	r1, [r3, #0]
 8008ada:	e002      	b.n	8008ae2 <_printf_i+0x1c6>
 8008adc:	0668      	lsls	r0, r5, #25
 8008ade:	d5fb      	bpl.n	8008ad8 <_printf_i+0x1bc>
 8008ae0:	8019      	strh	r1, [r3, #0]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	6123      	str	r3, [r4, #16]
 8008ae6:	4616      	mov	r6, r2
 8008ae8:	e7bc      	b.n	8008a64 <_printf_i+0x148>
 8008aea:	6833      	ldr	r3, [r6, #0]
 8008aec:	1d1a      	adds	r2, r3, #4
 8008aee:	6032      	str	r2, [r6, #0]
 8008af0:	681e      	ldr	r6, [r3, #0]
 8008af2:	6862      	ldr	r2, [r4, #4]
 8008af4:	2100      	movs	r1, #0
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7f7 fb92 	bl	8000220 <memchr>
 8008afc:	b108      	cbz	r0, 8008b02 <_printf_i+0x1e6>
 8008afe:	1b80      	subs	r0, r0, r6
 8008b00:	6060      	str	r0, [r4, #4]
 8008b02:	6863      	ldr	r3, [r4, #4]
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	2300      	movs	r3, #0
 8008b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b0c:	e7aa      	b.n	8008a64 <_printf_i+0x148>
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	4632      	mov	r2, r6
 8008b12:	4649      	mov	r1, r9
 8008b14:	4640      	mov	r0, r8
 8008b16:	47d0      	blx	sl
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d0ad      	beq.n	8008a78 <_printf_i+0x15c>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	079b      	lsls	r3, r3, #30
 8008b20:	d413      	bmi.n	8008b4a <_printf_i+0x22e>
 8008b22:	68e0      	ldr	r0, [r4, #12]
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	4298      	cmp	r0, r3
 8008b28:	bfb8      	it	lt
 8008b2a:	4618      	movlt	r0, r3
 8008b2c:	e7a6      	b.n	8008a7c <_printf_i+0x160>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4632      	mov	r2, r6
 8008b32:	4649      	mov	r1, r9
 8008b34:	4640      	mov	r0, r8
 8008b36:	47d0      	blx	sl
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d09d      	beq.n	8008a78 <_printf_i+0x15c>
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	68e3      	ldr	r3, [r4, #12]
 8008b40:	9903      	ldr	r1, [sp, #12]
 8008b42:	1a5b      	subs	r3, r3, r1
 8008b44:	42ab      	cmp	r3, r5
 8008b46:	dcf2      	bgt.n	8008b2e <_printf_i+0x212>
 8008b48:	e7eb      	b.n	8008b22 <_printf_i+0x206>
 8008b4a:	2500      	movs	r5, #0
 8008b4c:	f104 0619 	add.w	r6, r4, #25
 8008b50:	e7f5      	b.n	8008b3e <_printf_i+0x222>
 8008b52:	bf00      	nop
 8008b54:	0801e871 	.word	0x0801e871
 8008b58:	0801e882 	.word	0x0801e882

08008b5c <__sflush_r>:
 8008b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b64:	0716      	lsls	r6, r2, #28
 8008b66:	4605      	mov	r5, r0
 8008b68:	460c      	mov	r4, r1
 8008b6a:	d454      	bmi.n	8008c16 <__sflush_r+0xba>
 8008b6c:	684b      	ldr	r3, [r1, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dc02      	bgt.n	8008b78 <__sflush_r+0x1c>
 8008b72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dd48      	ble.n	8008c0a <__sflush_r+0xae>
 8008b78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	d045      	beq.n	8008c0a <__sflush_r+0xae>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b84:	682f      	ldr	r7, [r5, #0]
 8008b86:	6a21      	ldr	r1, [r4, #32]
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	d030      	beq.n	8008bee <__sflush_r+0x92>
 8008b8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	0759      	lsls	r1, r3, #29
 8008b92:	d505      	bpl.n	8008ba0 <__sflush_r+0x44>
 8008b94:	6863      	ldr	r3, [r4, #4]
 8008b96:	1ad2      	subs	r2, r2, r3
 8008b98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b9a:	b10b      	cbz	r3, 8008ba0 <__sflush_r+0x44>
 8008b9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b9e:	1ad2      	subs	r2, r2, r3
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ba4:	6a21      	ldr	r1, [r4, #32]
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	47b0      	blx	r6
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	d106      	bne.n	8008bbe <__sflush_r+0x62>
 8008bb0:	6829      	ldr	r1, [r5, #0]
 8008bb2:	291d      	cmp	r1, #29
 8008bb4:	d82b      	bhi.n	8008c0e <__sflush_r+0xb2>
 8008bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c60 <__sflush_r+0x104>)
 8008bb8:	410a      	asrs	r2, r1
 8008bba:	07d6      	lsls	r6, r2, #31
 8008bbc:	d427      	bmi.n	8008c0e <__sflush_r+0xb2>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	6062      	str	r2, [r4, #4]
 8008bc2:	04d9      	lsls	r1, r3, #19
 8008bc4:	6922      	ldr	r2, [r4, #16]
 8008bc6:	6022      	str	r2, [r4, #0]
 8008bc8:	d504      	bpl.n	8008bd4 <__sflush_r+0x78>
 8008bca:	1c42      	adds	r2, r0, #1
 8008bcc:	d101      	bne.n	8008bd2 <__sflush_r+0x76>
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	b903      	cbnz	r3, 8008bd4 <__sflush_r+0x78>
 8008bd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bd6:	602f      	str	r7, [r5, #0]
 8008bd8:	b1b9      	cbz	r1, 8008c0a <__sflush_r+0xae>
 8008bda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bde:	4299      	cmp	r1, r3
 8008be0:	d002      	beq.n	8008be8 <__sflush_r+0x8c>
 8008be2:	4628      	mov	r0, r5
 8008be4:	f7ff fbf2 	bl	80083cc <_free_r>
 8008be8:	2300      	movs	r3, #0
 8008bea:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bec:	e00d      	b.n	8008c0a <__sflush_r+0xae>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b0      	blx	r6
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	1c50      	adds	r0, r2, #1
 8008bf8:	d1c9      	bne.n	8008b8e <__sflush_r+0x32>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0c6      	beq.n	8008b8e <__sflush_r+0x32>
 8008c00:	2b1d      	cmp	r3, #29
 8008c02:	d001      	beq.n	8008c08 <__sflush_r+0xac>
 8008c04:	2b16      	cmp	r3, #22
 8008c06:	d11e      	bne.n	8008c46 <__sflush_r+0xea>
 8008c08:	602f      	str	r7, [r5, #0]
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e022      	b.n	8008c54 <__sflush_r+0xf8>
 8008c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c12:	b21b      	sxth	r3, r3
 8008c14:	e01b      	b.n	8008c4e <__sflush_r+0xf2>
 8008c16:	690f      	ldr	r7, [r1, #16]
 8008c18:	2f00      	cmp	r7, #0
 8008c1a:	d0f6      	beq.n	8008c0a <__sflush_r+0xae>
 8008c1c:	0793      	lsls	r3, r2, #30
 8008c1e:	680e      	ldr	r6, [r1, #0]
 8008c20:	bf08      	it	eq
 8008c22:	694b      	ldreq	r3, [r1, #20]
 8008c24:	600f      	str	r7, [r1, #0]
 8008c26:	bf18      	it	ne
 8008c28:	2300      	movne	r3, #0
 8008c2a:	eba6 0807 	sub.w	r8, r6, r7
 8008c2e:	608b      	str	r3, [r1, #8]
 8008c30:	f1b8 0f00 	cmp.w	r8, #0
 8008c34:	dde9      	ble.n	8008c0a <__sflush_r+0xae>
 8008c36:	6a21      	ldr	r1, [r4, #32]
 8008c38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c3a:	4643      	mov	r3, r8
 8008c3c:	463a      	mov	r2, r7
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b0      	blx	r6
 8008c42:	2800      	cmp	r0, #0
 8008c44:	dc08      	bgt.n	8008c58 <__sflush_r+0xfc>
 8008c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c58:	4407      	add	r7, r0
 8008c5a:	eba8 0800 	sub.w	r8, r8, r0
 8008c5e:	e7e7      	b.n	8008c30 <__sflush_r+0xd4>
 8008c60:	dfbffffe 	.word	0xdfbffffe

08008c64 <_fflush_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	690b      	ldr	r3, [r1, #16]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	b913      	cbnz	r3, 8008c74 <_fflush_r+0x10>
 8008c6e:	2500      	movs	r5, #0
 8008c70:	4628      	mov	r0, r5
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	b118      	cbz	r0, 8008c7e <_fflush_r+0x1a>
 8008c76:	6a03      	ldr	r3, [r0, #32]
 8008c78:	b90b      	cbnz	r3, 8008c7e <_fflush_r+0x1a>
 8008c7a:	f7ff f997 	bl	8007fac <__sinit>
 8008c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f3      	beq.n	8008c6e <_fflush_r+0xa>
 8008c86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c88:	07d0      	lsls	r0, r2, #31
 8008c8a:	d404      	bmi.n	8008c96 <_fflush_r+0x32>
 8008c8c:	0599      	lsls	r1, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_fflush_r+0x32>
 8008c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c92:	f7ff fb8a 	bl	80083aa <__retarget_lock_acquire_recursive>
 8008c96:	4628      	mov	r0, r5
 8008c98:	4621      	mov	r1, r4
 8008c9a:	f7ff ff5f 	bl	8008b5c <__sflush_r>
 8008c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ca0:	07da      	lsls	r2, r3, #31
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	d4e4      	bmi.n	8008c70 <_fflush_r+0xc>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	059b      	lsls	r3, r3, #22
 8008caa:	d4e1      	bmi.n	8008c70 <_fflush_r+0xc>
 8008cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cae:	f7ff fb7d 	bl	80083ac <__retarget_lock_release_recursive>
 8008cb2:	e7dd      	b.n	8008c70 <_fflush_r+0xc>

08008cb4 <__swhatbuf_r>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	b096      	sub	sp, #88	@ 0x58
 8008cc0:	4615      	mov	r5, r2
 8008cc2:	461e      	mov	r6, r3
 8008cc4:	da0d      	bge.n	8008ce2 <__swhatbuf_r+0x2e>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ccc:	f04f 0100 	mov.w	r1, #0
 8008cd0:	bf14      	ite	ne
 8008cd2:	2340      	movne	r3, #64	@ 0x40
 8008cd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cd8:	2000      	movs	r0, #0
 8008cda:	6031      	str	r1, [r6, #0]
 8008cdc:	602b      	str	r3, [r5, #0]
 8008cde:	b016      	add	sp, #88	@ 0x58
 8008ce0:	bd70      	pop	{r4, r5, r6, pc}
 8008ce2:	466a      	mov	r2, sp
 8008ce4:	f000 f87c 	bl	8008de0 <_fstat_r>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	dbec      	blt.n	8008cc6 <__swhatbuf_r+0x12>
 8008cec:	9901      	ldr	r1, [sp, #4]
 8008cee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cf6:	4259      	negs	r1, r3
 8008cf8:	4159      	adcs	r1, r3
 8008cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cfe:	e7eb      	b.n	8008cd8 <__swhatbuf_r+0x24>

08008d00 <__smakebuf_r>:
 8008d00:	898b      	ldrh	r3, [r1, #12]
 8008d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d04:	079d      	lsls	r5, r3, #30
 8008d06:	4606      	mov	r6, r0
 8008d08:	460c      	mov	r4, r1
 8008d0a:	d507      	bpl.n	8008d1c <__smakebuf_r+0x1c>
 8008d0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	6123      	str	r3, [r4, #16]
 8008d14:	2301      	movs	r3, #1
 8008d16:	6163      	str	r3, [r4, #20]
 8008d18:	b003      	add	sp, #12
 8008d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d1c:	ab01      	add	r3, sp, #4
 8008d1e:	466a      	mov	r2, sp
 8008d20:	f7ff ffc8 	bl	8008cb4 <__swhatbuf_r>
 8008d24:	9f00      	ldr	r7, [sp, #0]
 8008d26:	4605      	mov	r5, r0
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7ff fbba 	bl	80084a4 <_malloc_r>
 8008d30:	b948      	cbnz	r0, 8008d46 <__smakebuf_r+0x46>
 8008d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d36:	059a      	lsls	r2, r3, #22
 8008d38:	d4ee      	bmi.n	8008d18 <__smakebuf_r+0x18>
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	f043 0302 	orr.w	r3, r3, #2
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	e7e2      	b.n	8008d0c <__smakebuf_r+0xc>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	6020      	str	r0, [r4, #0]
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d56:	b15b      	cbz	r3, 8008d70 <__smakebuf_r+0x70>
 8008d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f000 f851 	bl	8008e04 <_isatty_r>
 8008d62:	b128      	cbz	r0, 8008d70 <__smakebuf_r+0x70>
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	f023 0303 	bic.w	r3, r3, #3
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	431d      	orrs	r5, r3
 8008d74:	81a5      	strh	r5, [r4, #12]
 8008d76:	e7cf      	b.n	8008d18 <__smakebuf_r+0x18>

08008d78 <_putc_r>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	4606      	mov	r6, r0
 8008d80:	b118      	cbz	r0, 8008d8a <_putc_r+0x12>
 8008d82:	6a03      	ldr	r3, [r0, #32]
 8008d84:	b90b      	cbnz	r3, 8008d8a <_putc_r+0x12>
 8008d86:	f7ff f911 	bl	8007fac <__sinit>
 8008d8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d8c:	07d8      	lsls	r0, r3, #31
 8008d8e:	d405      	bmi.n	8008d9c <_putc_r+0x24>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	0599      	lsls	r1, r3, #22
 8008d94:	d402      	bmi.n	8008d9c <_putc_r+0x24>
 8008d96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d98:	f7ff fb07 	bl	80083aa <__retarget_lock_acquire_recursive>
 8008d9c:	68a3      	ldr	r3, [r4, #8]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	60a3      	str	r3, [r4, #8]
 8008da4:	da05      	bge.n	8008db2 <_putc_r+0x3a>
 8008da6:	69a2      	ldr	r2, [r4, #24]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	db12      	blt.n	8008dd2 <_putc_r+0x5a>
 8008dac:	b2eb      	uxtb	r3, r5
 8008dae:	2b0a      	cmp	r3, #10
 8008db0:	d00f      	beq.n	8008dd2 <_putc_r+0x5a>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	6022      	str	r2, [r4, #0]
 8008db8:	701d      	strb	r5, [r3, #0]
 8008dba:	b2ed      	uxtb	r5, r5
 8008dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dbe:	07da      	lsls	r2, r3, #31
 8008dc0:	d405      	bmi.n	8008dce <_putc_r+0x56>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	059b      	lsls	r3, r3, #22
 8008dc6:	d402      	bmi.n	8008dce <_putc_r+0x56>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dca:	f7ff faef 	bl	80083ac <__retarget_lock_release_recursive>
 8008dce:	4628      	mov	r0, r5
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7ff f9d9 	bl	800818e <__swbuf_r>
 8008ddc:	4605      	mov	r5, r0
 8008dde:	e7ed      	b.n	8008dbc <_putc_r+0x44>

08008de0 <_fstat_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d07      	ldr	r5, [pc, #28]	@ (8008e00 <_fstat_r+0x20>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	4611      	mov	r1, r2
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	f7f7 ff3a 	bl	8000c66 <_fstat>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	d102      	bne.n	8008dfc <_fstat_r+0x1c>
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	b103      	cbz	r3, 8008dfc <_fstat_r+0x1c>
 8008dfa:	6023      	str	r3, [r4, #0]
 8008dfc:	bd38      	pop	{r3, r4, r5, pc}
 8008dfe:	bf00      	nop
 8008e00:	2000315c 	.word	0x2000315c

08008e04 <_isatty_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d06      	ldr	r5, [pc, #24]	@ (8008e20 <_isatty_r+0x1c>)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	f7f7 ff39 	bl	8000c86 <_isatty>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_isatty_r+0x1a>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_isatty_r+0x1a>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	2000315c 	.word	0x2000315c

08008e24 <_sbrk_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d06      	ldr	r5, [pc, #24]	@ (8008e40 <_sbrk_r+0x1c>)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	602b      	str	r3, [r5, #0]
 8008e30:	f7f7 ff42 	bl	8000cb8 <_sbrk>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_sbrk_r+0x1a>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_sbrk_r+0x1a>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	2000315c 	.word	0x2000315c

08008e44 <_init>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr

08008e50 <_fini>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr
