
G491_53L8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015e90  0800abf0  0800abf0  0000bbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020a80  08020a80  00022220  2**0
                  CONTENTS
  4 .ARM          00000008  08020a80  08020a80  00021a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020a88  08020a88  00022220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020a88  08020a88  00021a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020a8c  08020a8c  00021a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  08020a90  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bb4  20000220  08020cb0  00022220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dd4  08020cb0  00022dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153b0  00000000  00000000  00022250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332d  00000000  00000000  00037600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0003a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d86  00000000  00000000  0003bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211ac  00000000  00000000  0003c866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a73e  00000000  00000000  0005da12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c69fc  00000000  00000000  00078150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013eb4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e8  00000000  00000000  0013eb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00144378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000220 	.word	0x20000220
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800abd8 	.word	0x0800abd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000224 	.word	0x20000224
 800021c:	0800abd8 	.word	0x0800abd8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
 float   start_time2,end_time2,frame_frequency2=0;
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f003 ff56 	bl	8004da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f82e 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f000 f878 	bl	8000ff0 <MX_GPIO_Init>
  MX_TOF_Init();
 8000f00:	f007 f857 	bl	8007fb2 <MX_TOF_Init>


  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f003 fdd7 	bl	8004ab8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f003 fe09 	bl	8004b24 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <main+0x6c>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f18:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <main+0x6c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <main+0x6c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <main+0x6c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <main+0x6c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <main+0x6c>)
 8000f34:	2000      	movs	r0, #0
 8000f36:	f003 fe63 	bl	8004c00 <BSP_COM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <main+0x5c>
  {
    Error_Handler();
 8000f40:	f000 f900 	bl	8001144 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

HAL_Delay(2000);
 8000f44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f48:	f003 ff9c 	bl	8004e84 <HAL_Delay>

	     //HAL_Delay(5000);
    /* USER CODE END WHILE */

		//  printf("haaaaaa");
	 MX_TOF_Process();
 8000f4c:	f007 f837 	bl	8007fbe <MX_TOF_Process>
HAL_Delay(2000);
 8000f50:	bf00      	nop
 8000f52:	e7f7      	b.n	8000f44 <main+0x5c>
 8000f54:	2000023c 	.word	0x2000023c

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	@ 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	2238      	movs	r2, #56	@ 0x38
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f007 ffa6 	bl	8008eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f005 f9f8 	bl	8006370 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8a:	2340      	movs	r3, #64	@ 0x40
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f92:	2302      	movs	r3, #2
 8000f94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f96:	2304      	movs	r3, #4
 8000f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f9a:	2355      	movs	r3, #85	@ 0x55
 8000f9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 fa92 	bl	80064d8 <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fba:	f000 f8c3 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 fd90 	bl	8006afc <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fe2:	f000 f8af 	bl	8001144 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3750      	adds	r7, #80	@ 0x50
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b4d      	ldr	r3, [pc, #308]	@ (800113c <MX_GPIO_Init+0x14c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a4c      	ldr	r2, [pc, #304]	@ (800113c <MX_GPIO_Init+0x14c>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b4a      	ldr	r3, [pc, #296]	@ (800113c <MX_GPIO_Init+0x14c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	4b47      	ldr	r3, [pc, #284]	@ (800113c <MX_GPIO_Init+0x14c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <MX_GPIO_Init+0x14c>)
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b44      	ldr	r3, [pc, #272]	@ (800113c <MX_GPIO_Init+0x14c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0320 	and.w	r3, r3, #32
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b41      	ldr	r3, [pc, #260]	@ (800113c <MX_GPIO_Init+0x14c>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a40      	ldr	r2, [pc, #256]	@ (800113c <MX_GPIO_Init+0x14c>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b3e      	ldr	r3, [pc, #248]	@ (800113c <MX_GPIO_Init+0x14c>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <MX_GPIO_Init+0x14c>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a3a      	ldr	r2, [pc, #232]	@ (800113c <MX_GPIO_Init+0x14c>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b38      	ldr	r3, [pc, #224]	@ (800113c <MX_GPIO_Init+0x14c>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2120      	movs	r1, #32
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f004 facf 	bl	8005610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_PWR__GPIO_Port, TOF_PWR__Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2101      	movs	r1, #1
 8001076:	4832      	ldr	r0, [pc, #200]	@ (8001140 <MX_GPIO_Init+0x150>)
 8001078:	f004 faca 	bl	8005610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_I2C_RST_Pin|TOF_LPn_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2118      	movs	r1, #24
 8001080:	482f      	ldr	r0, [pc, #188]	@ (8001140 <MX_GPIO_Init+0x150>)
 8001082:	f004 fac5 	bl	8005610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOF_INT_Pin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8001086:	2310      	movs	r3, #16
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109e:	f004 f853 	bl	8005148 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010a2:	2320      	movs	r3, #32
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010bc:	f004 f844 	bl	8005148 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_PWR__Pin */
  GPIO_InitStruct.Pin = TOF_PWR__Pin;
 80010c0:	2301      	movs	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_PWR__GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	481a      	ldr	r0, [pc, #104]	@ (8001140 <MX_GPIO_Init+0x150>)
 80010d8:	f004 f836 	bl	8005148 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_I2C_RST_Pin */
  GPIO_InitStruct.Pin = TOF_I2C_RST_Pin;
 80010dc:	2308      	movs	r3, #8
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_I2C_RST_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4813      	ldr	r0, [pc, #76]	@ (8001140 <MX_GPIO_Init+0x150>)
 80010f4:	f004 f828 	bl	8005148 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_LPn_Pin */
  GPIO_InitStruct.Pin = TOF_LPn_Pin;
 80010f8:	2310      	movs	r3, #16
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_LPn_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	480c      	ldr	r0, [pc, #48]	@ (8001140 <MX_GPIO_Init+0x150>)
 8001110:	f004 f81a 	bl	8005148 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	200a      	movs	r0, #10
 800111a:	f003 ffb0 	bl	800507e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800111e:	200a      	movs	r0, #10
 8001120:	f003 ffc7 	bl	80050b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2028      	movs	r0, #40	@ 0x28
 800112a:	f003 ffa8 	bl	800507e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800112e:	2028      	movs	r0, #40	@ 0x28
 8001130:	f003 ffbf 	bl	80050b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	@ 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	48000400 	.word	0x48000400

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <HAL_MspInit+0x44>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6613      	str	r3, [r2, #96]	@ 0x60
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_MspInit+0x44>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_MspInit+0x44>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_MspInit+0x44>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001186:	f005 f997 	bl	80064b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <NMI_Handler+0x4>

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <MemManage_Handler+0x4>

080011b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <UsageFault_Handler+0x4>

080011c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ee:	f003 fe2b 	bl	8004e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 80011fa:	2010      	movs	r0, #16
 80011fc:	f004 fa20 	bl	8005640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001208:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800120c:	f004 fa18 	bl	8005640 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <BSP_I2C1_Init+0x70>)
 8001220:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <BSP_I2C1_Init+0x74>)
 8001222:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <BSP_I2C1_Init+0x78>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	4918      	ldr	r1, [pc, #96]	@ (800128c <BSP_I2C1_Init+0x78>)
 800122c:	600a      	str	r2, [r1, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d122      	bne.n	8001278 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001232:	4814      	ldr	r0, [pc, #80]	@ (8001284 <BSP_I2C1_Init+0x70>)
 8001234:	f004 fd28 	bl	8005c88 <HAL_I2C_GetState>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d11c      	bne.n	8001278 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800123e:	4811      	ldr	r0, [pc, #68]	@ (8001284 <BSP_I2C1_Init+0x70>)
 8001240:	f000 f8fe 	bl	8001440 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800124a:	480e      	ldr	r0, [pc, #56]	@ (8001284 <BSP_I2C1_Init+0x70>)
 800124c:	f000 f8b4 	bl	80013b8 <MX_I2C1_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001256:	f06f 0307 	mvn.w	r3, #7
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	e00c      	b.n	8001278 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125e:	2100      	movs	r1, #0
 8001260:	4808      	ldr	r0, [pc, #32]	@ (8001284 <BSP_I2C1_Init+0x70>)
 8001262:	f004 ffed 	bl	8006240 <HAL_I2CEx_ConfigAnalogFilter>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800126c:	f06f 0307 	mvn.w	r3, #7
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e001      	b.n	8001278 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000024c 	.word	0x2000024c
 8001288:	40005400 	.word	0x40005400
 800128c:	200002a0 	.word	0x200002a0

08001290 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <BSP_I2C1_DeInit+0x48>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d014      	beq.n	80012cc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <BSP_I2C1_DeInit+0x48>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <BSP_I2C1_DeInit+0x48>)
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <BSP_I2C1_DeInit+0x48>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10b      	bne.n	80012cc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <BSP_I2C1_DeInit+0x4c>)
 80012b6:	f000 f919 	bl	80014ec <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80012ba:	4808      	ldr	r0, [pc, #32]	@ (80012dc <BSP_I2C1_DeInit+0x4c>)
 80012bc:	f004 fa73 	bl	80057a6 <HAL_I2C_DeInit>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80012c6:	f06f 0307 	mvn.w	r3, #7
 80012ca:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200002a0 	.word	0x200002a0
 80012dc:	2000024c 	.word	0x2000024c

080012e0 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	81fb      	strh	r3, [r7, #14]
 80012ee:	460b      	mov	r3, r1
 80012f0:	81bb      	strh	r3, [r7, #12]
 80012f2:	4613      	mov	r3, r2
 80012f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80012fa:	89ba      	ldrh	r2, [r7, #12]
 80012fc:	89f9      	ldrh	r1, [r7, #14]
 80012fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2302      	movs	r3, #2
 800130e:	480c      	ldr	r0, [pc, #48]	@ (8001340 <BSP_I2C1_WriteReg16+0x60>)
 8001310:	f004 fa8c 	bl	800582c <HAL_I2C_Mem_Write>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00c      	beq.n	8001334 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800131a:	4809      	ldr	r0, [pc, #36]	@ (8001340 <BSP_I2C1_WriteReg16+0x60>)
 800131c:	f004 fcc2 	bl	8005ca4 <HAL_I2C_GetError>
 8001320:	4603      	mov	r3, r0
 8001322:	2b04      	cmp	r3, #4
 8001324:	d103      	bne.n	800132e <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001326:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e002      	b.n	8001334 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800132e:	f06f 0303 	mvn.w	r3, #3
 8001332:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001334:	697b      	ldr	r3, [r7, #20]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000024c 	.word	0x2000024c

08001344 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af04      	add	r7, sp, #16
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	461a      	mov	r2, r3
 800134e:	4603      	mov	r3, r0
 8001350:	81fb      	strh	r3, [r7, #14]
 8001352:	460b      	mov	r3, r1
 8001354:	81bb      	strh	r3, [r7, #12]
 8001356:	4613      	mov	r3, r2
 8001358:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800135e:	89ba      	ldrh	r2, [r7, #12]
 8001360:	89f9      	ldrh	r1, [r7, #14]
 8001362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2302      	movs	r3, #2
 8001372:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <BSP_I2C1_ReadReg16+0x60>)
 8001374:	f004 fb6e 	bl	8005a54 <HAL_I2C_Mem_Read>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00c      	beq.n	8001398 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800137e:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <BSP_I2C1_ReadReg16+0x60>)
 8001380:	f004 fc90 	bl	8005ca4 <HAL_I2C_GetError>
 8001384:	4603      	mov	r3, r0
 8001386:	2b04      	cmp	r3, #4
 8001388:	d003      	beq.n	8001392 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800138a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e002      	b.n	8001398 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001392:	f06f 0303 	mvn.w	r3, #3
 8001396:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001398:	697b      	ldr	r3, [r7, #20]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000024c 	.word	0x2000024c

080013a8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80013ac:	f003 fd5e 	bl	8004e6c <HAL_GetTick>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001438 <MX_I2C1_Init+0x80>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x40621236;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <MX_I2C1_Init+0x84>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f004 f938 	bl	8005670 <HAL_I2C_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f004 ff17 	bl	8006240 <HAL_I2CEx_ConfigAnalogFilter>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f004 ff59 	bl	80062d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40005400 	.word	0x40005400
 800143c:	40621236 	.word	0x40621236

08001440 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b09e      	sub	sp, #120	@ 0x78
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2250      	movs	r2, #80	@ 0x50
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f007 fd31 	bl	8008eb8 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001456:	2340      	movs	r3, #64	@ 0x40
 8001458:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4618      	mov	r0, r3
 8001464:	f005 fd66 	bl	8006f34 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <I2C1_MspInit+0xa4>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <I2C1_MspInit+0xa4>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <I2C1_MspInit+0xa4>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001484:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001486:	2312      	movs	r3, #18
 8001488:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001492:	2304      	movs	r3, #4
 8001494:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001496:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800149a:	4619      	mov	r1, r3
 800149c:	4812      	ldr	r0, [pc, #72]	@ (80014e8 <I2C1_MspInit+0xa8>)
 800149e:	f003 fe53 	bl	8005148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80014a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a8:	2312      	movs	r3, #18
 80014aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80014b4:	2304      	movs	r3, #4
 80014b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80014b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014bc:	4619      	mov	r1, r3
 80014be:	480a      	ldr	r0, [pc, #40]	@ (80014e8 <I2C1_MspInit+0xa8>)
 80014c0:	f003 fe42 	bl	8005148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <I2C1_MspInit+0xa4>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <I2C1_MspInit+0xa4>)
 80014ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <I2C1_MspInit+0xa4>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80014dc:	bf00      	nop
 80014de:	3778      	adds	r7, #120	@ 0x78
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400

080014ec <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <I2C1_MspDeInit+0x30>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	4a08      	ldr	r2, [pc, #32]	@ (800151c <I2C1_MspDeInit+0x30>)
 80014fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014fe:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001504:	4806      	ldr	r0, [pc, #24]	@ (8001520 <I2C1_MspDeInit+0x34>)
 8001506:	f003 ffa1 	bl	800544c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800150a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800150e:	4804      	ldr	r0, [pc, #16]	@ (8001520 <I2C1_MspDeInit+0x34>)
 8001510:	f003 ff9c 	bl	800544c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	48000400 	.word	0x48000400

08001524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_kill>:

int _kill(int pid, int sig)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800153e:	f007 fd0d 	bl	8008f5c <__errno>
 8001542:	4603      	mov	r3, r0
 8001544:	2216      	movs	r2, #22
 8001546:	601a      	str	r2, [r3, #0]
  return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_exit>:

void _exit (int status)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ffe7 	bl	8001534 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001566:	bf00      	nop
 8001568:	e7fd      	b.n	8001566 <_exit+0x12>

0800156a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e00a      	b.n	8001592 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800157c:	f3af 8000 	nop.w
 8001580:	4601      	mov	r1, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	60ba      	str	r2, [r7, #8]
 8001588:	b2ca      	uxtb	r2, r1
 800158a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	dbf0      	blt.n	800157c <_read+0x12>
  }

  return len;
 800159a:	687b      	ldr	r3, [r7, #4]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e009      	b.n	80015ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	60ba      	str	r2, [r7, #8]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fb80 	bl	8004cc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbf1      	blt.n	80015b6 <_write+0x12>
  }
  return len;
 80015d2:	687b      	ldr	r3, [r7, #4]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_close>:

int _close(int file)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001604:	605a      	str	r2, [r3, #4]
  return 0;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_isatty>:

int _isatty(int file)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800161c:	2301      	movs	r3, #1
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	@ (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f007 fc72 	bl	8008f5c <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2001c000 	.word	0x2001c000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	200002a4 	.word	0x200002a4
 80016ac:	20002dd8 	.word	0x20002dd8

080016b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016d4:	480d      	ldr	r0, [pc, #52]	@ (800170c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff ffea 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <LoopForever+0x6>)
  ldr r1, =_edata
 80016de:	490d      	ldr	r1, [pc, #52]	@ (8001714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <LoopForever+0xe>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001720 <LoopForever+0x16>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f007 fc31 	bl	8008f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001706:	f7ff fbef 	bl	8000ee8 <main>

0800170a <LoopForever>:

LoopForever:
    b LoopForever
 800170a:	e7fe      	b.n	800170a <LoopForever>
  ldr   r0, =_estack
 800170c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001718:	08020a90 	.word	0x08020a90
  ldr r2, =_sbss
 800171c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001720:	20002dd4 	.word	0x20002dd4

08001724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC1_2_IRQHandler>

08001726 <VL53L8A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d903      	bls.n	800173c <VL53L8A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001734:	f06f 0301 	mvn.w	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e003      	b.n	8001744 <VL53L8A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L8CX_Probe(Instance);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8a7 	bl	8001890 <VL53L8CX_Probe>
 8001742:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001744:	68fb      	ldr	r3, [r7, #12]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <VL53L8A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d903      	bls.n	8001768 <VL53L8A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001760:	f06f 0301 	mvn.w	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e012      	b.n	800178e <VL53L8A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ReadID(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <VL53L8A1_RANGING_SENSOR_ReadID+0x48>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	490b      	ldr	r1, [pc, #44]	@ (800179c <VL53L8A1_RANGING_SENSOR_ReadID+0x4c>)
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001776:	6839      	ldr	r1, [r7, #0]
 8001778:	4610      	mov	r0, r2
 800177a:	4798      	blx	r3
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	da03      	bge.n	800178a <VL53L8A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001782:	f06f 0304 	mvn.w	r3, #4
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e001      	b.n	800178e <VL53L8A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002b4 	.word	0x200002b4
 800179c:	200002a8 	.word	0x200002a8

080017a0 <VL53L8A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d903      	bls.n	80017b8 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017b0:	f06f 0301 	mvn.w	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	e012      	b.n	80017de <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x48>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	490b      	ldr	r1, [pc, #44]	@ (80017ec <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	4610      	mov	r0, r2
 80017ca:	4798      	blx	r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da03      	bge.n	80017da <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80017d2:	f06f 0304 	mvn.w	r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e001      	b.n	80017de <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200002b4 	.word	0x200002b4
 80017ec:	200002a8 	.word	0x200002a8

080017f0 <VL53L8A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d903      	bls.n	8001808 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001800:	f06f 0301 	mvn.w	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e012      	b.n	800182e <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x48>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	490b      	ldr	r1, [pc, #44]	@ (800183c <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4610      	mov	r0, r2
 800181a:	4798      	blx	r3
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	da03      	bge.n	800182a <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001822:	f06f 0304 	mvn.w	r3, #4
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e001      	b.n	800182e <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002b4 	.word	0x200002b4
 800183c:	200002a8 	.word	0x200002a8

08001840 <VL53L8A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d903      	bls.n	8001858 <VL53L8A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001850:	f06f 0301 	mvn.w	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e012      	b.n	800187e <VL53L8A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->Start(VL53L8A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <VL53L8A1_RANGING_SENSOR_Start+0x48>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	490b      	ldr	r1, [pc, #44]	@ (800188c <VL53L8A1_RANGING_SENSOR_Start+0x4c>)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	4610      	mov	r0, r2
 800186a:	4798      	blx	r3
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	da03      	bge.n	800187a <VL53L8A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001872:	f06f 0304 	mvn.w	r3, #4
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e001      	b.n	800187e <VL53L8A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200002b4 	.word	0x200002b4
 800188c:	200002a8 	.word	0x200002a8

08001890 <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 8001898:	2352      	movs	r3, #82	@ 0x52
 800189a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L8A1_I2C_INIT;
 800189c:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <VL53L8CX_Probe+0x10c>)
 800189e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L8A1_I2C_DEINIT;
 80018a0:	4b3f      	ldr	r3, [pc, #252]	@ (80019a0 <VL53L8CX_Probe+0x110>)
 80018a2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L8A1_I2C_WRITEREG;
 80018a4:	4b3f      	ldr	r3, [pc, #252]	@ (80019a4 <VL53L8CX_Probe+0x114>)
 80018a6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L8A1_I2C_READREG;
 80018a8:	4b3f      	ldr	r3, [pc, #252]	@ (80019a8 <VL53L8CX_Probe+0x118>)
 80018aa:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L8A1_GETTICK;
 80018ac:	4b3f      	ldr	r3, [pc, #252]	@ (80019ac <VL53L8CX_Probe+0x11c>)
 80018ae:	623b      	str	r3, [r7, #32]
  printf("hiiiiiii");
 80018b0:	483f      	ldr	r0, [pc, #252]	@ (80019b0 <VL53L8CX_Probe+0x120>)
 80018b2:	f007 f9b9 	bl	8008c28 <iprintf>
  if (VL53L8CX_RegisterBusIO(&(VL53L8CXObj[Instance]), &IOCtx) != VL53L8CX_OK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	4a3c      	ldr	r2, [pc, #240]	@ (80019b4 <VL53L8CX_Probe+0x124>)
 80018c2:	4413      	add	r3, r2
 80018c4:	f107 020c 	add.w	r2, r7, #12
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fbc5 	bl	800405a <VL53L8CX_RegisterBusIO>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <VL53L8CX_Probe+0x54>
  {
	  printf("hooooooi");
 80018d6:	4838      	ldr	r0, [pc, #224]	@ (80019b8 <VL53L8CX_Probe+0x128>)
 80018d8:	f007 f9a6 	bl	8008c28 <iprintf>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80018dc:	f06f 0304 	mvn.w	r3, #4
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e2:	e056      	b.n	8001992 <VL53L8CX_Probe+0x102>
  }
  else
  {
	  printf("haaaaaaaaa");
 80018e4:	4835      	ldr	r0, [pc, #212]	@ (80019bc <VL53L8CX_Probe+0x12c>)
 80018e6:	f007 f99f 	bl	8008c28 <iprintf>
    VL53L8A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;
 80018ea:	4b35      	ldr	r3, [pc, #212]	@ (80019c0 <VL53L8CX_Probe+0x130>)
 80018ec:	4a35      	ldr	r2, [pc, #212]	@ (80019c4 <VL53L8CX_Probe+0x134>)
 80018ee:	601a      	str	r2, [r3, #0]
    VL53L8A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L8CXObj[Instance]);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	4a2e      	ldr	r2, [pc, #184]	@ (80019b4 <VL53L8CX_Probe+0x124>)
 80018fc:	441a      	add	r2, r3
 80018fe:	4932      	ldr	r1, [pc, #200]	@ (80019c8 <VL53L8CX_Probe+0x138>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


    printf("hillllllllll");
 8001906:	4831      	ldr	r0, [pc, #196]	@ (80019cc <VL53L8CX_Probe+0x13c>)
 8001908:	f007 f98e 	bl	8008c28 <iprintf>

   // while(1);
      if (VL53L8CX_ReadID(&(VL53L8CXObj[Instance]), &id) != VL53L8CX_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	4a27      	ldr	r2, [pc, #156]	@ (80019b4 <VL53L8CX_Probe+0x124>)
 8001918:	4413      	add	r3, r2
 800191a:	f107 0208 	add.w	r2, r7, #8
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fc4a 	bl	80041ba <VL53L8CX_ReadID>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <VL53L8CX_Probe+0xaa>
     {
     	printf("Not ssuccesfull communication");
 800192c:	4828      	ldr	r0, [pc, #160]	@ (80019d0 <VL53L8CX_Probe+0x140>)
 800192e:	f007 f97b 	bl	8008c28 <iprintf>
       ret = BSP_ERROR_COMPONENT_FAILURE;
 8001932:	f06f 0304 	mvn.w	r3, #4
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
 8001938:	e02b      	b.n	8001992 <VL53L8CX_Probe+0x102>
     }


    else if (id != VL53L8CX_ID)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f24f 020c 	movw	r2, #61452	@ 0xf00c
 8001940:	4293      	cmp	r3, r2
 8001942:	d003      	beq.n	800194c <VL53L8CX_Probe+0xbc>
     {
       ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001944:	f06f 0306 	mvn.w	r3, #6
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
 800194a:	e022      	b.n	8001992 <VL53L8CX_Probe+0x102>
     }
     else if (VL53L8A1_RANGING_SENSOR_Drv->Init(VL53L8A1_RANGING_SENSOR_CompObj[Instance]) != VL53L8CX_OK)
 800194c:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <VL53L8CX_Probe+0x130>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	491d      	ldr	r1, [pc, #116]	@ (80019c8 <VL53L8CX_Probe+0x138>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800195a:	4610      	mov	r0, r2
 800195c:	4798      	blx	r3
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <VL53L8CX_Probe+0xdc>
     {
       ret = BSP_ERROR_COMPONENT_FAILURE;
 8001964:	f06f 0304 	mvn.w	r3, #4
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
 800196a:	e012      	b.n	8001992 <VL53L8CX_Probe+0x102>
     }
     else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance],
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <VL53L8CX_Probe+0x130>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4915      	ldr	r1, [pc, #84]	@ (80019c8 <VL53L8CX_Probe+0x138>)
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800197a:	4916      	ldr	r1, [pc, #88]	@ (80019d4 <VL53L8CX_Probe+0x144>)
 800197c:	4610      	mov	r0, r2
 800197e:	4798      	blx	r3
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <VL53L8CX_Probe+0xfe>
                                                           &VL53L8A1_RANGING_SENSOR_Cap) != VL53L8CX_OK)
     {
       ret = BSP_ERROR_COMPONENT_FAILURE;
 8001986:	f06f 0304 	mvn.w	r3, #4
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	e001      	b.n	8001992 <VL53L8CX_Probe+0x102>
     }
     else
     {
       ret = BSP_ERROR_NONE;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
     }
   }

   return ret;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 8001994:	4618      	mov	r0, r3
 8001996:	3728      	adds	r7, #40	@ 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	08001215 	.word	0x08001215
 80019a0:	08001291 	.word	0x08001291
 80019a4:	080012e1 	.word	0x080012e1
 80019a8:	08001345 	.word	0x08001345
 80019ac:	080013a9 	.word	0x080013a9
 80019b0:	0800abf0 	.word	0x0800abf0
 80019b4:	200002c8 	.word	0x200002c8
 80019b8:	0800abfc 	.word	0x0800abfc
 80019bc:	0800ac08 	.word	0x0800ac08
 80019c0:	200002b4 	.word	0x200002b4
 80019c4:	20000004 	.word	0x20000004
 80019c8:	200002a8 	.word	0x200002a8
 80019cc:	0800ac14 	.word	0x0800ac14
 80019d0:	0800ac24 	.word	0x0800ac24
 80019d4:	200002b8 	.word	0x200002b8

080019d8 <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	4608      	mov	r0, r1
 80019e2:	4611      	mov	r1, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	70fb      	strb	r3, [r7, #3]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70bb      	strb	r3, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 80019fa:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	8839      	ldrh	r1, [r7, #0]
 8001a06:	f002 fac1 	bl	8003f8c <VL53L8CX_RdMulti>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	73fb      	strb	r3, [r7, #15]
		status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	210a      	movs	r1, #10
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fb04 	bl	8004026 <VL53L8CX_WaitMs>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001a2c:	d904      	bls.n	8001a38 <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
			break;
 8001a36:	e01a      	b.n	8001a6e <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d909      	bls.n	8001a52 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8001a44:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a46:	d904      	bls.n	8001a52 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8001a4e:	73fb      	strb	r3, [r7, #15]
			break;
 8001a50:	e00d      	b.n	8001a6e <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8001a58:	78bb      	ldrb	r3, [r7, #2]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8001a62:	7e3b      	ldrb	r3, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	7f3a      	ldrb	r2, [r7, #28]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d1c5      	bne.n	80019fa <_vl53l8cx_poll_for_answer+0x22>

	return status;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f107 020b 	add.w	r2, r7, #11
 8001a8e:	2106      	movs	r1, #6
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fa39 	bl	8003f08 <VL53L8CX_RdByte>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8001aa0:	7afb      	ldrb	r3, [r7, #11]
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da10      	bge.n	8001aca <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f107 020a 	add.w	r2, r7, #10
 8001aae:	2107      	movs	r1, #7
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fa29 	bl	8003f08 <VL53L8CX_RdByte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 8001ac0:	7abb      	ldrb	r3, [r7, #10]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d111      	bne.n	8001aee <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 faa9 	bl	8004026 <VL53L8CX_WaitMs>
		timeout++;
 8001ad4:	89bb      	ldrh	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8001ae4:	89bb      	ldrh	r3, [r7, #12]
 8001ae6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001aea:	d3cd      	bcc.n	8001a88 <_vl53l8cx_poll_for_mcu_boot+0x10>
 8001aec:	e002      	b.n	8001af4 <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 8001aee:	bf00      	nop
 8001af0:	e000      	b.n	8001af4 <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 8001af2:	bf00      	nop

   return status;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0ea      	sub	sp, #424	@ 0x1a8
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b0a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b0e:	6018      	str	r0, [r3, #0]
 8001b10:	460a      	mov	r2, r1
 8001b12:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b16:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8001b1a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8001b22:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b26:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b2a:	4ad9      	ldr	r2, [pc, #868]	@ (8001e90 <_vl53l8cx_send_offset_data+0x390>)
 8001b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b30:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8001b34:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b38:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b3c:	4ad5      	ldr	r2, [pc, #852]	@ (8001e94 <_vl53l8cx_send_offset_data+0x394>)
 8001b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b42:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8001b46:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b4a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001b54:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b58:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8001b60:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001b64:	4619      	mov	r1, r3
 8001b66:	f007 fa26 	bl	8008fb6 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 8001b6a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b6e:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	f040 8122 	bne.w	8001dbe <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8001b7a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b7e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 8001b88:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b8c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b90:	cb03      	ldmia	r3!, {r0, r1}
 8001b92:	6010      	str	r0, [r2, #0]
 8001b94:	6051      	str	r1, [r2, #4]
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001b96:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001b9a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001ba4:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fa06 	bl	8003fba <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8001bae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001bb2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 8001bbc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f007 f9f6 	bl	8008fb6 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8001bca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001bce:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	4618      	mov	r0, r3
 8001be0:	f007 f9e9 	bl	8008fb6 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8001bea:	e0ac      	b.n	8001d46 <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8001bf2:	e09c      	b.n	8001d2e <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8001bf4:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001bf8:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	005a      	lsls	r2, r3, #1
 8001c02:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8001c0e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001c12:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	1c59      	adds	r1, r3, #1
 8001c1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c2a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8001c2c:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001c30:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	3304      	adds	r3, #4
 8001c3a:	0059      	lsls	r1, r3, #1
 8001c3c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c48:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8001c4a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001c4e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	f103 0109 	add.w	r1, r3, #9
 8001c5c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c68:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001c6a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001c6e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8001c76:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001c78:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8001c84:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001c88:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	005a      	lsls	r2, r3, #1
 8001c92:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001c96:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001c9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001c9e:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8001ca0:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001ca4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001cb4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001cb8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001cbc:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8001cbe:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001cc2:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001cc6:	00d2      	lsls	r2, r2, #3
 8001cc8:	440a      	add	r2, r1
 8001cca:	3204      	adds	r2, #4
 8001ccc:	0051      	lsls	r1, r2, #1
 8001cce:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8001cd2:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8001cd6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001cda:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001cdc:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001ce0:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001ce4:	00d2      	lsls	r2, r2, #3
 8001ce6:	440a      	add	r2, r1
 8001ce8:	0052      	lsls	r2, r2, #1
 8001cea:	f102 0109 	add.w	r1, r2, #9
 8001cee:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8001cf2:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8001cf6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001cfa:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da00      	bge.n	8001d02 <_vl53l8cx_send_offset_data+0x202>
 8001d00:	3303      	adds	r3, #3
 8001d02:	109b      	asrs	r3, r3, #2
 8001d04:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8001d06:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001d0a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	441a      	add	r2, r3
 8001d12:	b209      	sxth	r1, r1
 8001d14:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001d18:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8001d20:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8001d2e:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	f77f af5e 	ble.w	8001bf4 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8001d38:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8001d46:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	f77f af4e 	ble.w	8001bec <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	3320      	adds	r3, #32
 8001d56:	2260      	movs	r2, #96	@ 0x60
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f007 f8ac 	bl	8008eb8 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8001d60:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001d64:	3340      	adds	r3, #64	@ 0x40
 8001d66:	22c0      	movs	r2, #192	@ 0xc0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f007 f8a4 	bl	8008eb8 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8001d70:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001d74:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 8001d7e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8001d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d86:	4618      	mov	r0, r3
 8001d88:	f007 f915 	bl	8008fb6 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8001d8c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001d90:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8001d9a:	f107 0118 	add.w	r1, r7, #24
 8001d9e:	2280      	movs	r2, #128	@ 0x80
 8001da0:	4618      	mov	r0, r3
 8001da2:	f007 f908 	bl	8008fb6 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001da6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001daa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001db4:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 f8fe 	bl	8003fba <VL53L8CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8001dc4:	e01b      	b.n	8001dfe <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8001dc6:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001dca:	f103 0208 	add.w	r2, r3, #8
 8001dce:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001dd2:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8001dd6:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8001dda:	6809      	ldr	r1, [r1, #0]
 8001ddc:	440a      	add	r2, r1
 8001dde:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 8001de2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8001de6:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	460a      	mov	r2, r1
 8001df0:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001df4:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8001dfe:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001e02:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8001e06:	d3de      	bcc.n	8001dc6 <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8001e08:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001e0c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 8001e16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001e1a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e1e:	cb03      	ldmia	r3!, {r0, r1}
 8001e20:	6010      	str	r0, [r2, #0]
 8001e22:	6051      	str	r1, [r2, #4]
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8001e24:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001e28:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001e32:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8001e3c:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8001e40:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8001e44:	f002 f88b 	bl	8003f5e <VL53L8CX_WrMulti>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8001e56:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001e5a:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8001e5e:	2303      	movs	r3, #3
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	23ff      	movs	r3, #255	@ 0xff
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	6800      	ldr	r0, [r0, #0]
 8001e70:	f7ff fdb2 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001e82:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	0800ac44 	.word	0x0800ac44
 8001e94:	0800ac4c 	.word	0x0800ac4c

08001e98 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0ca      	sub	sp, #296	@ 0x128
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ea2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ea6:	6018      	str	r0, [r3, #0]
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001eae:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8001eb2:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8001eba:	4a9a      	ldr	r2, [pc, #616]	@ (8002124 <_vl53l8cx_send_xtalk_data+0x28c>)
 8001ebc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ec4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8001ec8:	4a97      	ldr	r2, [pc, #604]	@ (8002128 <_vl53l8cx_send_xtalk_data+0x290>)
 8001eca:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8001ed6:	4b95      	ldr	r3, [pc, #596]	@ (800212c <_vl53l8cx_send_xtalk_data+0x294>)
 8001ed8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001edc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ee0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 8001eea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001eee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ef8:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8001efc:	4619      	mov	r1, r3
 8001efe:	f007 f85a 	bl	8008fb6 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 8001f02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f06:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	f040 80d2 	bne.w	80020b6 <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8001f12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8001f20:	461a      	mov	r2, r3
 8001f22:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001f26:	cb03      	ldmia	r3!, {r0, r1}
 8001f28:	6010      	str	r0, [r2, #0]
 8001f2a:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8001f2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001f40:	cb03      	ldmia	r3!, {r0, r1}
 8001f42:	6010      	str	r0, [r2, #0]
 8001f44:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001f46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001f54:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 f82e 	bl	8003fba <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8001f5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f74:	4618      	mov	r0, r3
 8001f76:	f007 f81e 	bl	8008fb6 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001f80:	e05d      	b.n	800203e <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001f88:	e04e      	b.n	8002028 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8001f8a:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8001f8e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	005a      	lsls	r2, r3, #1
 8001f98:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001fa4:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001fa8:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fb8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fc0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8001fc2:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001fc6:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	3304      	adds	r3, #4
 8001fd0:	0059      	lsls	r1, r3, #1
 8001fd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fd6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fde:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001fe0:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001fe4:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	f103 0109 	add.w	r1, r3, #9
 8001ff2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ff6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ffa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ffe:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8002000:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002004:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800200c:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800200e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002012:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800201a:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8002028:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800202c:	2b03      	cmp	r3, #3
 800202e:	ddac      	ble.n	8001f8a <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8002030:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3301      	adds	r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800203e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002042:	2b03      	cmp	r3, #3
 8002044:	dd9d      	ble.n	8001f82 <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	3340      	adds	r3, #64	@ 0x40
 800204c:	22c0      	movs	r2, #192	@ 0xc0
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f006 ff31 	bl	8008eb8 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8002056:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800205a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 8002064:	f107 0108 	add.w	r1, r7, #8
 8002068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800206c:	4618      	mov	r0, r3
 800206e:	f006 ffa2 	bl	8008fb6 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8002072:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002076:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002080:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8002084:	4618      	mov	r0, r3
 8002086:	f001 ff98 	bl	8003fba <VL53L8CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800208a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800208e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8002098:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800209c:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800209e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80020a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 80020ac:	2204      	movs	r2, #4
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f006 ff01 	bl	8008eb8 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 80020b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80020ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020be:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 80020c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80020c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 80020ce:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80020d2:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 80020d6:	f001 ff42 	bl	8003f5e <VL53L8CX_WrMulti>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80020e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80020ec:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 80020f0:	2303      	movs	r3, #3
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	23ff      	movs	r3, #255	@ 0xff
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80020fc:	2201      	movs	r2, #1
 80020fe:	2104      	movs	r1, #4
 8002100:	6800      	ldr	r0, [r0, #0]
 8002102:	f7ff fc69 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800210e:	4313      	orrs	r3, r2
 8002110:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002114:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8002118:	4618      	mov	r0, r3
 800211a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	0800ac54 	.word	0x0800ac54
 8002128:	0800ac5c 	.word	0x0800ac5c
 800212c:	0001fca0 	.word	0x0001fca0

08002130 <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 800213c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002140:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8002142:	2301      	movs	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
	uint32_t crc_checksum = 0x00;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a80      	ldr	r2, [pc, #512]	@ (8002350 <vl53l8cx_init+0x220>)
 800214e:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a80      	ldr	r2, [pc, #512]	@ (8002354 <vl53l8cx_init+0x224>)
 8002154:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2abc 	strb.w	r2, [r3, #2748]	@ 0xabc

	/* SW reboot sequence */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fee3 	bl	8003f32 <VL53L8CX_WrByte>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	4313      	orrs	r3, r2
 8002174:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2204      	movs	r2, #4
 800217a:	2109      	movs	r1, #9
 800217c:	4618      	mov	r0, r3
 800217e:	f001 fed8 	bl	8003f32 <VL53L8CX_WrByte>
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	4313      	orrs	r3, r2
 800218a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2240      	movs	r2, #64	@ 0x40
 8002190:	210f      	movs	r1, #15
 8002192:	4618      	mov	r0, r3
 8002194:	f001 fecd 	bl	8003f32 <VL53L8CX_WrByte>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	4313      	orrs	r3, r2
 80021a0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2203      	movs	r2, #3
 80021a6:	210a      	movs	r1, #10
 80021a8:	4618      	mov	r0, r3
 80021aa:	f001 fec2 	bl	8003f32 <VL53L8CX_WrByte>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f107 0216 	add.w	r2, r7, #22
 80021be:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 fea0 	bl	8003f08 <VL53L8CX_RdByte>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	210c      	movs	r1, #12
 80021d8:	4618      	mov	r0, r3
 80021da:	f001 feaa 	bl	8003f32 <VL53L8CX_WrByte>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f240 1101 	movw	r1, #257	@ 0x101
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fe9e 	bl	8003f32 <VL53L8CX_WrByte>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002208:	4618      	mov	r0, r3
 800220a:	f001 fe92 	bl	8003f32 <VL53L8CX_WrByte>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	4313      	orrs	r3, r2
 8002216:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fe86 	bl	8003f32 <VL53L8CX_WrByte>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	4313      	orrs	r3, r2
 800222e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002238:	4618      	mov	r0, r3
 800223a:	f001 fe7a 	bl	8003f32 <VL53L8CX_WrByte>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	4313      	orrs	r3, r2
 8002246:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fe6e 	bl	8003f32 <VL53L8CX_WrByte>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	4313      	orrs	r3, r2
 800225e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2203      	movs	r2, #3
 8002264:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002268:	4618      	mov	r0, r3
 800226a:	f001 fe62 	bl	8003f32 <VL53L8CX_WrByte>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	4313      	orrs	r3, r2
 8002276:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f240 1103 	movw	r1, #259	@ 0x103
 8002280:	4618      	mov	r0, r3
 8002282:	f001 fe56 	bl	8003f32 <VL53L8CX_WrByte>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	4313      	orrs	r3, r2
 800228e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	210c      	movs	r1, #12
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fe4b 	bl	8003f32 <VL53L8CX_WrByte>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2243      	movs	r2, #67	@ 0x43
 80022aa:	210f      	movs	r1, #15
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 fe40 	bl	8003f32 <VL53L8CX_WrByte>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 feb0 	bl	8004026 <VL53L8CX_WaitMs>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	210f      	movs	r1, #15
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 fe2b 	bl	8003f32 <VL53L8CX_WrByte>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	210a      	movs	r1, #10
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fe20 	bl	8003f32 <VL53L8CX_WrByte>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 100);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2164      	movs	r1, #100	@ 0x64
 8002300:	4618      	mov	r0, r3
 8002302:	f001 fe90 	bl	8004026 <VL53L8CX_WaitMs>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	4313      	orrs	r3, r2
 800230e:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002318:	4618      	mov	r0, r3
 800231a:	f001 fe0a 	bl	8003f32 <VL53L8CX_WrByte>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	4313      	orrs	r3, r2
 8002326:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8002328:	2301      	movs	r3, #1
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	23ff      	movs	r3, #255	@ 0xff
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2306      	movs	r3, #6
 8002332:	2200      	movs	r2, #0
 8002334:	2101      	movs	r1, #1
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fb4e 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	4313      	orrs	r3, r2
 8002344:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 8309 	bne.w	8002960 <vl53l8cx_init+0x830>
 800234e:	e003      	b.n	8002358 <vl53l8cx_init+0x228>
 8002350:	080203c4 	.word	0x080203c4
 8002354:	0801fff8 	.word	0x0801fff8
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	210e      	movs	r1, #14
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fde7 	bl	8003f32 <VL53L8CX_WrByte>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	4313      	orrs	r3, r2
 800236c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fddb 	bl	8003f32 <VL53L8CX_WrByte>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	4313      	orrs	r3, r2
 8002384:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800238e:	4618      	mov	r0, r3
 8002390:	f001 fdcf 	bl	8003f32 <VL53L8CX_WrByte>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	4313      	orrs	r3, r2
 800239c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x01);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	2106      	movs	r1, #6
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fdc4 	bl	8003f32 <VL53L8CX_WrByte>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 80023b4:	2304      	movs	r3, #4
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	23ff      	movs	r3, #255	@ 0xff
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2321      	movs	r3, #33	@ 0x21
 80023be:	2200      	movs	r2, #0
 80023c0:	2101      	movs	r1, #1
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fb08 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 fda9 	bl	8003f32 <VL53L8CX_WrByte>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f107 0216 	add.w	r2, r7, #22
 80023f0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 fd87 	bl	8003f08 <VL53L8CX_RdByte>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	4313      	orrs	r3, r2
 8002402:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	210c      	movs	r1, #12
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fd91 	bl	8003f32 <VL53L8CX_WrByte>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	4313      	orrs	r3, r2
 8002418:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fd85 	bl	8003f32 <VL53L8CX_WrByte>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	4313      	orrs	r3, r2
 8002430:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f240 1101 	movw	r1, #257	@ 0x101
 800243a:	4618      	mov	r0, r3
 800243c:	f001 fd79 	bl	8003f32 <VL53L8CX_WrByte>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	4313      	orrs	r3, r2
 8002448:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fd6d 	bl	8003f32 <VL53L8CX_WrByte>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	4313      	orrs	r3, r2
 8002460:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800246a:	4618      	mov	r0, r3
 800246c:	f001 fd61 	bl	8003f32 <VL53L8CX_WrByte>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	4313      	orrs	r3, r2
 8002478:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002482:	4618      	mov	r0, r3
 8002484:	f001 fd55 	bl	8003f32 <VL53L8CX_WrByte>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	4313      	orrs	r3, r2
 8002490:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f244 0102 	movw	r1, #16386	@ 0x4002
 800249a:	4618      	mov	r0, r3
 800249c:	f001 fd49 	bl	8003f32 <VL53L8CX_WrByte>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 fd3d 	bl	8003f32 <VL53L8CX_WrByte>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	4313      	orrs	r3, r2
 80024c0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f240 1103 	movw	r1, #259	@ 0x103
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 fd31 	bl	8003f32 <VL53L8CX_WrByte>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f244 010f 	movw	r1, #16399	@ 0x400f
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 fd25 	bl	8003f32 <VL53L8CX_WrByte>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2243      	movs	r2, #67	@ 0x43
 80024f6:	f240 211a 	movw	r1, #538	@ 0x21a
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 fd19 	bl	8003f32 <VL53L8CX_WrByte>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	4313      	orrs	r3, r2
 8002508:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	f240 211a 	movw	r1, #538	@ 0x21a
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fd0d 	bl	8003f32 <VL53L8CX_WrByte>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	4313      	orrs	r3, r2
 8002520:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f240 211a 	movw	r1, #538	@ 0x21a
 800252a:	4618      	mov	r0, r3
 800252c:	f001 fd01 	bl	8003f32 <VL53L8CX_WrByte>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	4313      	orrs	r3, r2
 8002538:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f240 211a 	movw	r1, #538	@ 0x21a
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fcf5 	bl	8003f32 <VL53L8CX_WrByte>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	4313      	orrs	r3, r2
 8002550:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f240 2119 	movw	r1, #537	@ 0x219
 800255a:	4618      	mov	r0, r3
 800255c:	f001 fce9 	bl	8003f32 <VL53L8CX_WrByte>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	4313      	orrs	r3, r2
 8002568:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f240 211b 	movw	r1, #539	@ 0x21b
 8002572:	4618      	mov	r0, r3
 8002574:	f001 fcdd 	bl	8003f32 <VL53L8CX_WrByte>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	4313      	orrs	r3, r2
 8002580:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fcd1 	bl	8003f32 <VL53L8CX_WrByte>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	4313      	orrs	r3, r2
 8002598:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f107 0216 	add.w	r2, r7, #22
 80025a0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 fcaf 	bl	8003f08 <VL53L8CX_RdByte>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 fcb8 	bl	8003f32 <VL53L8CX_WrByte>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L8CX */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2209      	movs	r2, #9
 80025d0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 fcac 	bl	8003f32 <VL53L8CX_WrByte>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025ea:	4ade      	ldr	r2, [pc, #888]	@ (8002964 <vl53l8cx_init+0x834>)
 80025ec:	2100      	movs	r1, #0
 80025ee:	f001 fcb6 	bl	8003f5e <VL53L8CX_WrMulti>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	220a      	movs	r2, #10
 8002600:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fc94 	bl	8003f32 <VL53L8CX_WrByte>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	4313      	orrs	r3, r2
 8002612:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800261a:	4ad3      	ldr	r2, [pc, #844]	@ (8002968 <vl53l8cx_init+0x838>)
 800261c:	2100      	movs	r1, #0
 800261e:	f001 fc9e 	bl	8003f5e <VL53L8CX_WrMulti>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	4313      	orrs	r3, r2
 800262a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	220b      	movs	r2, #11
 8002630:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002634:	4618      	mov	r0, r3
 8002636:	f001 fc7c 	bl	8003f32 <VL53L8CX_WrByte>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	4313      	orrs	r3, r2
 8002642:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800264a:	4ac8      	ldr	r2, [pc, #800]	@ (800296c <vl53l8cx_init+0x83c>)
 800264c:	2100      	movs	r1, #0
 800264e:	f001 fc86 	bl	8003f5e <VL53L8CX_WrMulti>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	4313      	orrs	r3, r2
 800265a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002664:	4618      	mov	r0, r3
 8002666:	f001 fc64 	bl	8003f32 <VL53L8CX_WrByte>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	4313      	orrs	r3, r2
 8002672:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fc58 	bl	8003f32 <VL53L8CX_WrByte>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	4313      	orrs	r3, r2
 800268a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x03);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2203      	movs	r2, #3
 8002690:	2106      	movs	r1, #6
 8002692:	4618      	mov	r0, r3
 8002694:	f001 fc4d 	bl	8003f32 <VL53L8CX_WrByte>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	4313      	orrs	r3, r2
 80026a0:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WaitMs(&(p_dev->platform), 5);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2105      	movs	r1, #5
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 fcbd 	bl	8004026 <VL53L8CX_WaitMs>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 fc37 	bl	8003f32 <VL53L8CX_WrByte>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f107 0216 	add.w	r2, r7, #22
 80026d4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 fc15 	bl	8003f08 <VL53L8CX_RdByte>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	210c      	movs	r1, #12
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fc1f 	bl	8003f32 <VL53L8CX_WrByte>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002706:	4618      	mov	r0, r3
 8002708:	f001 fc13 	bl	8003f32 <VL53L8CX_WrByte>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	4313      	orrs	r3, r2
 8002714:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fc07 	bl	8003f32 <VL53L8CX_WrByte>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	4313      	orrs	r3, r2
 800272c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f240 1115 	movw	r1, #277	@ 0x115
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fbfb 	bl	8003f32 <VL53L8CX_WrByte>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	4313      	orrs	r3, r2
 8002744:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2242      	movs	r2, #66	@ 0x42
 800274a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fbef 	bl	8003f32 <VL53L8CX_WrByte>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	4313      	orrs	r3, r2
 800275c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f240 1117 	movw	r1, #279	@ 0x117
 8002766:	4618      	mov	r0, r3
 8002768:	f001 fbe3 	bl	8003f32 <VL53L8CX_WrByte>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	4313      	orrs	r3, r2
 8002774:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	210b      	movs	r1, #11
 800277c:	4618      	mov	r0, r3
 800277e:	f001 fbd8 	bl	8003f32 <VL53L8CX_WrByte>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	4313      	orrs	r3, r2
 800278a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f107 0216 	add.w	r2, r7, #22
 8002792:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fbb6 	bl	8003f08 <VL53L8CX_RdByte>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	210c      	movs	r1, #12
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 fbc0 	bl	8003f32 <VL53L8CX_WrByte>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	210b      	movs	r1, #11
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 fbb5 	bl	8003f32 <VL53L8CX_WrByte>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff f950 	bl	8001a78 <_vl53l8cx_poll_for_mcu_boot>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	4313      	orrs	r3, r2
 80027e0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 80c9 	bne.w	800297c <vl53l8cx_init+0x84c>
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 fb9d 	bl	8003f32 <VL53L8CX_WrByte>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	4313      	orrs	r3, r2
 8002800:	75fb      	strb	r3, [r7, #23]

	/* Firmware checksum */
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8002802:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 4);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 800280a:	2304      	movs	r3, #4
 800280c:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002810:	f001 fbbc 	bl	8003f8c <VL53L8CX_RdMulti>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	4313      	orrs	r3, r2
 800281c:	75fb      	strb	r3, [r7, #23]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, 4);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002824:	2104      	movs	r1, #4
 8002826:	4618      	mov	r0, r3
 8002828:	f001 fbc7 	bl	8003fba <VL53L8CX_SwapBuffer>
	memcpy((uint8_t*)&crc_checksum, &(p_dev->temp_buffer[0]), 4);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60bb      	str	r3, [r7, #8]
	if (crc_checksum != (uint32_t)0xc0b6c9e)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4a4d      	ldr	r2, [pc, #308]	@ (8002970 <vl53l8cx_init+0x840>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <vl53l8cx_init+0x718>
	{
		status |= VL53L8CX_STATUS_FW_CHECKSUM_FAIL;
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	f043 0305 	orr.w	r3, r3, #5
 8002844:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8002846:	e09a      	b.n	800297e <vl53l8cx_init+0x84e>
	}

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	2328      	movs	r3, #40	@ 0x28
 800284c:	4a49      	ldr	r2, [pc, #292]	@ (8002974 <vl53l8cx_init+0x844>)
 800284e:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8002852:	f001 fb84 	bl	8003f5e <VL53L8CX_WrMulti>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	4313      	orrs	r3, r2
 800285e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 8002860:	2302      	movs	r3, #2
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	23ff      	movs	r3, #255	@ 0xff
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800286c:	2200      	movs	r2, #0
 800286e:	2104      	movs	r1, #4
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff f8b1 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8002876:	4603      	mov	r3, r0
 8002878:	461a      	mov	r2, r3
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	4313      	orrs	r3, r2
 800287e:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8002880:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8002888:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800288c:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8002890:	f001 fb7c 	bl	8003f8c <VL53L8CX_RdMulti>
 8002894:	4603      	mov	r3, r0
 8002896:	461a      	mov	r2, r3
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	4313      	orrs	r3, r2
 800289c:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f103 0020 	add.w	r0, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80028aa:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80028ae:	4619      	mov	r1, r3
 80028b0:	f006 fb81 	bl	8008fb6 <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 80028b4:	2110      	movs	r1, #16
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff f922 	bl	8001b00 <_vl53l8cx_send_offset_data>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80028cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <vl53l8cx_init+0x848>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	4611      	mov	r1, r2
 80028d2:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80028d6:	461a      	mov	r2, r3
 80028d8:	f006 fb6d 	bl	8008fb6 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 80028dc:	2110      	movs	r1, #16
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fada 	bl	8001e98 <_vl53l8cx_send_xtalk_data>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2c34,
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 80028f8:	f642 4134 	movw	r1, #11316	@ 0x2c34
 80028fc:	f001 fb2f 	bl	8003f5e <VL53L8CX_WrMulti>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	4313      	orrs	r3, r2
 8002908:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800290a:	2303      	movs	r3, #3
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	23ff      	movs	r3, #255	@ 0xff
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002916:	2201      	movs	r2, #1
 8002918:	2104      	movs	r1, #4
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff f85c 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8002920:	4603      	mov	r3, r0
 8002922:	461a      	mov	r2, r3
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	4313      	orrs	r3, r2
 8002928:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 800292a:	f107 0110 	add.w	r1, r7, #16
 800292e:	2304      	movs	r3, #4
 8002930:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f001 f87f 	bl	8003a38 <vl53l8cx_dci_write_data>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	4313      	orrs	r3, r2
 8002942:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002944:	f107 010c 	add.w	r1, r7, #12
 8002948:	2304      	movs	r3, #4
 800294a:	f64d 1264 	movw	r2, #55652	@ 0xd964
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f001 f872 	bl	8003a38 <vl53l8cx_dci_write_data>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	4313      	orrs	r3, r2
 800295c:	75fb      	strb	r3, [r7, #23]
 800295e:	e00e      	b.n	800297e <vl53l8cx_init+0x84e>
		goto exit;
 8002960:	bf00      	nop
 8002962:	e00c      	b.n	800297e <vl53l8cx_init+0x84e>
 8002964:	0800aff8 	.word	0x0800aff8
 8002968:	08012ff8 	.word	0x08012ff8
 800296c:	0801aff8 	.word	0x0801aff8
 8002970:	0c0b6c9e 	.word	0x0c0b6c9e
 8002974:	080206cc 	.word	0x080206cc
 8002978:	080203c4 	.word	0x080203c4
		goto exit;
 800297c:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 800297e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <vl53l8cx_set_i2c_address>:

uint8_t vl53l8cx_set_i2c_address(
		VL53L8CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fac6 	bl	8003f32 <VL53L8CX_WrByte>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	2104      	movs	r1, #4
 80029be:	f001 fab8 	bl	8003f32 <VL53L8CX_WrByte>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	801a      	strh	r2, [r3, #0]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80029da:	4618      	mov	r0, r3
 80029dc:	f001 faa9 	bl	8003f32 <VL53L8CX_WrByte>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	73fb      	strb	r3, [r7, #15]

	return status;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <vl53l8cx_get_power_mode>:

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 fa91 	bl	8003f32 <VL53L8CX_WrByte>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f107 020e 	add.w	r2, r7, #14
 8002a20:	2109      	movs	r1, #9
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 fa70 	bl	8003f08 <VL53L8CX_RdByte>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8002a32:	7bbb      	ldrb	r3, [r7, #14]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d005      	beq.n	8002a44 <vl53l8cx_get_power_mode+0x50>
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d11a      	bne.n	8002a72 <vl53l8cx_get_power_mode+0x7e>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
			break;
 8002a42:	e01c      	b.n	8002a7e <vl53l8cx_get_power_mode+0x8a>
		case 0x2:
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &tmp);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f107 020e 	add.w	r2, r7, #14
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f001 fa5b 	bl	8003f08 <VL53L8CX_RdByte>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	73fb      	strb	r3, [r7, #15]
			if(tmp == 0x43)
 8002a5c:	7bbb      	ldrb	r3, [r7, #14]
 8002a5e:	2b43      	cmp	r3, #67	@ 0x43
 8002a60:	d103      	bne.n	8002a6a <vl53l8cx_get_power_mode+0x76>
			{
				*p_power_mode = VL53L8CX_POWER_MODE_DEEP_SLEEP;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2202      	movs	r2, #2
 8002a66:	701a      	strb	r2, [r3, #0]
			else
			{
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
			}

			break;
 8002a68:	e009      	b.n	8002a7e <vl53l8cx_get_power_mode+0x8a>
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
			break;
 8002a70:	e005      	b.n	8002a7e <vl53l8cx_get_power_mode+0x8a>
		default:
			*p_power_mode = 0;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 8002a78:	23ff      	movs	r3, #255	@ 0xff
 8002a7a:	73fb      	strb	r3, [r7, #15]
			break;
 8002a7c:	bf00      	nop
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fa53 	bl	8003f32 <VL53L8CX_WrByte>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	461a      	mov	r2, r3
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	73fb      	strb	r3, [r7, #15]

	return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, stored_mode, status = VL53L8CX_STATUS_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 8002ab0:	f107 030e 	add.w	r3, r7, #14
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff9c 	bl	80029f4 <vl53l8cx_get_power_mode>
 8002abc:	4603      	mov	r3, r0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8002ac6:	7bbb      	ldrb	r3, [r7, #14]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	f000 80c0 	beq.w	8002c50 <vl53l8cx_set_power_mode+0x1b0>
	{
	switch(power_mode)
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d07a      	beq.n	8002bcc <vl53l8cx_set_power_mode+0x12c>
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	f300 80aa 	bgt.w	8002c30 <vl53l8cx_set_power_mode+0x190>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d04e      	beq.n	8002b7e <vl53l8cx_set_power_mode+0xde>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 80a5 	bne.w	8002c30 <vl53l8cx_set_power_mode+0x190>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 fa1f 	bl	8003f32 <VL53L8CX_WrByte>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2204      	movs	r2, #4
 8002b02:	2109      	movs	r1, #9
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 fa14 	bl	8003f32 <VL53L8CX_WrByte>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &stored_mode);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f107 020d 	add.w	r2, r7, #13
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 f9f3 	bl	8003f08 <VL53L8CX_RdByte>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	73fb      	strb	r3, [r7, #15]
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8002b2c:	7b7b      	ldrb	r3, [r7, #13]
 8002b2e:	2b43      	cmp	r3, #67	@ 0x43
 8002b30:	d10a      	bne.n	8002b48 <vl53l8cx_set_power_mode+0xa8>
			{
				status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2240      	movs	r2, #64	@ 0x40
 8002b36:	210f      	movs	r1, #15
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 f9fa 	bl	8003f32 <VL53L8CX_WrByte>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	73fb      	strb	r3, [r7, #15]
			}
			status |= _vl53l8cx_poll_for_answer(
 8002b48:	2301      	movs	r3, #1
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2306      	movs	r3, #6
 8002b52:	2200      	movs	r2, #0
 8002b54:	2101      	movs	r1, #1
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe ff3e 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8002b66:	7b7b      	ldrb	r3, [r7, #13]
 8002b68:	2b43      	cmp	r3, #67	@ 0x43
 8002b6a:	d164      	bne.n	8002c36 <vl53l8cx_set_power_mode+0x196>
			{
				status |= vl53l8cx_init(p_dev);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fadf 	bl	8002130 <vl53l8cx_init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002b7c:	e05b      	b.n	8002c36 <vl53l8cx_set_power_mode+0x196>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 f9d3 	bl	8003f32 <VL53L8CX_WrByte>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	2109      	movs	r1, #9
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 f9c8 	bl	8003f32 <VL53L8CX_WrByte>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8002bac:	2300      	movs	r3, #0
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2101      	movs	r1, #1
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe ff0c 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8002bca:	e035      	b.n	8002c38 <vl53l8cx_set_power_mode+0x198>

		case VL53L8CX_POWER_MODE_DEEP_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 f9ac 	bl	8003f32 <VL53L8CX_WrByte>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	2109      	movs	r1, #9
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 f9a1 	bl	8003f32 <VL53L8CX_WrByte>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2306      	movs	r3, #6
 8002c04:	2200      	movs	r2, #0
 8002c06:	2101      	movs	r1, #1
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7fe fee5 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	73fb      	strb	r3, [r7, #15]
					p_dev, 1, 0, 0x06, 0x01, 0);
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2243      	movs	r2, #67	@ 0x43
 8002c1c:	210f      	movs	r1, #15
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 f987 	bl	8003f32 <VL53L8CX_WrByte>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	73fb      	strb	r3, [r7, #15]
			break;
 8002c2e:	e003      	b.n	8002c38 <vl53l8cx_set_power_mode+0x198>

		default:
			status = VL53L8CX_STATUS_ERROR;
 8002c30:	23ff      	movs	r3, #255	@ 0xff
 8002c32:	73fb      	strb	r3, [r7, #15]
			break;
 8002c34:	e000      	b.n	8002c38 <vl53l8cx_set_power_mode+0x198>
			break;
 8002c36:	bf00      	nop
		}
		status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 f976 	bl	8003f32 <VL53L8CX_WrByte>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8002c5c:	b5b0      	push	{r4, r5, r7, lr}
 8002c5e:	b09c      	sub	sp, #112	@ 0x70
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c6e:	2300      	movs	r3, #0
 8002c70:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8002c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c76:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 8002c78:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fcaa 	bl	80035d8 <vl53l8cx_get_resolution>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	22ff      	movs	r2, #255	@ 0xff
 8002c9c:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8002c9e:	4bb8      	ldr	r3, [pc, #736]	@ (8002f80 <vl53l8cx_start_ranging+0x324>)
 8002ca0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 8002caa:	4bb6      	ldr	r3, [pc, #728]	@ (8002f84 <vl53l8cx_start_ranging+0x328>)
 8002cac:	f107 040c 	add.w	r4, r7, #12
 8002cb0:	461d      	mov	r5, r3
 8002cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8002cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cca:	3310      	adds	r3, #16
 8002ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8002cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd0:	3320      	adds	r3, #32
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8002cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd6:	3340      	adds	r3, #64	@ 0x40
 8002cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8002cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cdc:	3380      	adds	r3, #128	@ 0x80
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8002cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8002cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d04:	e073      	b.n	8002dee <vl53l8cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8002d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	3368      	adds	r3, #104	@ 0x68
 8002d0c:	443b      	add	r3, r7
 8002d0e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d067      	beq.n	8002de6 <vl53l8cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8002d16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	3368      	adds	r3, #104	@ 0x68
 8002d1e:	443b      	add	r3, r7
 8002d20:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8002d24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d057      	beq.n	8002de6 <vl53l8cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8002d36:	f107 020c 	add.w	r2, r7, #12
 8002d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8002d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03a      	beq.n	8002dc6 <vl53l8cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8002d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d833      	bhi.n	8002dc6 <vl53l8cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8002d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d60:	885b      	ldrh	r3, [r3, #2]
 8002d62:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d910      	bls.n	8002d8c <vl53l8cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8002d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d6c:	885b      	ldrh	r3, [r3, #2]
 8002d6e:	f645 028f 	movw	r2, #22671	@ 0x588f
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d80a      	bhi.n	8002d8c <vl53l8cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8002d76:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7e:	b299      	uxth	r1, r3
 8002d80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d82:	8813      	ldrh	r3, [r2, #0]
 8002d84:	f361 130f 	bfi	r3, r1, #4, #12
 8002d88:	8013      	strh	r3, [r2, #0]
 8002d8a:	e009      	b.n	8002da0 <vl53l8cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8002d8c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	b299      	uxth	r1, r3
 8002d96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d98:	8813      	ldrh	r3, [r2, #0]
 8002d9a:	f361 130f 	bfi	r3, r1, #4, #12
 8002d9e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002da6:	7812      	ldrb	r2, [r2, #0]
 8002da8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	4611      	mov	r1, r2
 8002db0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002db8:	b292      	uxth	r2, r2
 8002dba:	fb01 f202 	mul.w	r2, r1, r2
 8002dbe:	441a      	add	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	615a      	str	r2, [r3, #20]
 8002dc4:	e009      	b.n	8002dda <vl53l8cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002dcc:	8812      	ldrh	r2, [r2, #0]
 8002dce:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	1d1a      	adds	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	615a      	str	r2, [r3, #20]
 8002de4:	e000      	b.n	8002de8 <vl53l8cx_start_ranging+0x18c>
			continue;
 8002de6:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002de8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dea:	3301      	adds	r3, #1
 8002dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002df0:	2b0b      	cmp	r3, #11
 8002df2:	d988      	bls.n	8002d06 <vl53l8cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f103 0218 	add.w	r2, r3, #24
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	615a      	str	r2, [r3, #20]

	status |= vl53l8cx_dci_write_data(p_dev,
 8002e00:	f107 010c 	add.w	r1, r7, #12
 8002e04:	2330      	movs	r3, #48	@ 0x30
 8002e06:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fe14 	bl	8003a38 <vl53l8cx_dci_write_data>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8002e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e26:	3301      	adds	r3, #1
 8002e28:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 8002e2a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002e2e:	2308      	movs	r3, #8
 8002e30:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fdff 	bl	8003a38 <vl53l8cx_dci_write_data>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 8002e48:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fdf0 	bl	8003a38 <vl53l8cx_dci_write_data>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f85f 	bl	8003f32 <VL53L8CX_WrByte>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461a      	mov	r2, r3
 8002e78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2205      	movs	r2, #5
 8002e86:	2109      	movs	r1, #9
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f001 f852 	bl	8003f32 <VL53L8CX_WrByte>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f001 f844 	bl	8003f32 <VL53L8CX_WrByte>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002ec4:	f001 f84b 	bl	8003f5e <VL53L8CX_WrMulti>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	23ff      	movs	r3, #255	@ 0xff
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fd76 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8002f00:	230c      	movs	r3, #12
 8002f02:	f245 4240 	movw	r2, #21568	@ 0x5440
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fd0c 	bl	8003924 <vl53l8cx_dci_read_data>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8002f28:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d002      	beq.n	8002f3c <vl53l8cx_start_ranging+0x2e0>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8002f36:	23ff      	movs	r3, #255	@ 0xff
 8002f38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8002f42:	2308      	movs	r3, #8
 8002f44:	f24e 02c4 	movw	r2, #57540	@ 0xe0c4
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fceb 	bl	8003924 <vl53l8cx_dci_read_data>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3516 	ldrb.w	r3, [r3, #1302]	@ 0x516
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <vl53l8cx_start_ranging+0x316>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 8002f66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002f6a:	f043 0303 	orr.w	r3, r3, #3
 8002f6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8002f72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3768      	adds	r7, #104	@ 0x68
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	0800ac64 	.word	0x0800ac64
 8002f84:	0800ac74 	.word	0x0800ac74

08002f88 <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	74fb      	strb	r3, [r7, #19]
 8002f94:	2300      	movs	r3, #0
 8002f96:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]

	status |= VL53L8CX_RdMulti(&(p_dev->platform),
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f107 020c 	add.w	r2, r7, #12
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002fac:	f000 ffee 	bl	8003f8c <VL53L8CX_RdMulti>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d04d      	beq.n	8003060 <vl53l8cx_stop_ranging+0xd8>
			&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3abc 	ldrb.w	r3, [r3, #2748]	@ 0xabc
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d148      	bne.n	8003060 <vl53l8cx_stop_ranging+0xd8>
	{
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 ffab 	bl	8003f32 <VL53L8CX_WrByte>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2216      	movs	r2, #22
 8002fea:	2115      	movs	r1, #21
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 ffa0 	bl	8003f32 <VL53L8CX_WrByte>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	75fb      	strb	r3, [r7, #23]
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	2114      	movs	r1, #20
 8003002:	4618      	mov	r0, r3
 8003004:	f000 ff95 	bl	8003f32 <VL53L8CX_WrByte>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	4313      	orrs	r3, r2
 8003010:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8003012:	e021      	b.n	8003058 <vl53l8cx_stop_ranging+0xd0>
	        {
	        	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f107 0213 	add.w	r2, r7, #19
 800301a:	2106      	movs	r1, #6
 800301c:	4618      	mov	r0, r3
 800301e:	f000 ff73 	bl	8003f08 <VL53L8CX_RdByte>
 8003022:	4603      	mov	r3, r0
 8003024:	461a      	mov	r2, r3
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	4313      	orrs	r3, r2
 800302a:	75fb      	strb	r3, [r7, #23]
	        	status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	210a      	movs	r1, #10
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fff8 	bl	8004026 <VL53L8CX_WaitMs>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	4313      	orrs	r3, r2
 800303e:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8003040:	8abb      	ldrh	r3, [r7, #20]
 8003042:	3301      	adds	r3, #1
 8003044:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8003046:	8abb      	ldrh	r3, [r7, #20]
 8003048:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800304c:	d904      	bls.n	8003058 <vl53l8cx_stop_ranging+0xd0>
				{
					status |= tmp;
 800304e:	7cfa      	ldrb	r2, [r7, #19]
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	4313      	orrs	r3, r2
 8003054:	75fb      	strb	r3, [r7, #23]
					break;
 8003056:	e003      	b.n	8003060 <vl53l8cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	b25b      	sxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	dad9      	bge.n	8003014 <vl53l8cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f107 0213 	add.w	r2, r7, #19
 8003066:	2106      	movs	r1, #6
 8003068:	4618      	mov	r0, r3
 800306a:	f000 ff4d 	bl	8003f08 <VL53L8CX_RdByte>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	4313      	orrs	r3, r2
 8003076:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	b25b      	sxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	da15      	bge.n	80030ac <vl53l8cx_stop_ranging+0x124>
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f107 0213 	add.w	r2, r7, #19
 8003086:	2107      	movs	r1, #7
 8003088:	4618      	mov	r0, r3
 800308a:	f000 ff3d 	bl	8003f08 <VL53L8CX_RdByte>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	4313      	orrs	r3, r2
 8003096:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b84      	cmp	r3, #132	@ 0x84
 800309c:	d006      	beq.n	80030ac <vl53l8cx_stop_ranging+0x124>
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b85      	cmp	r3, #133	@ 0x85
 80030a2:	d003      	beq.n	80030ac <vl53l8cx_stop_ranging+0x124>
		   status |= tmp;
 80030a4:	7cfa      	ldrb	r2, [r7, #19]
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ff3c 	bl	8003f32 <VL53L8CX_WrByte>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2114      	movs	r1, #20
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ff31 	bl	8003f32 <VL53L8CX_WrByte>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	2115      	movs	r1, #21
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 ff26 	bl	8003f32 <VL53L8CX_WrByte>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2204      	movs	r2, #4
 80030f4:	2109      	movs	r1, #9
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 ff1b 	bl	8003f32 <VL53L8CX_WrByte>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	4313      	orrs	r3, r2
 8003104:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800310e:	4618      	mov	r0, r3
 8003110:	f000 ff0f 	bl	8003f32 <VL53L8CX_WrByte>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	4313      	orrs	r3, r2
 800311c:	75fb      	strb	r3, [r7, #23]

	return status;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800313e:	2304      	movs	r3, #4
 8003140:	2100      	movs	r1, #0
 8003142:	f000 ff23 	bl	8003f8c <VL53L8CX_RdMulti>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	4313      	orrs	r3, r2
 800314e:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7c1b      	ldrb	r3, [r3, #16]
 800315a:	429a      	cmp	r2, r3
 800315c:	d020      	beq.n	80031a0 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003164:	2bff      	cmp	r3, #255	@ 0xff
 8003166:	d01b      	beq.n	80031a0 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 800316e:	2b05      	cmp	r3, #5
 8003170:	d116      	bne.n	80031a0 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8003178:	f003 0305 	and.w	r3, r3, #5
 800317c:	2b05      	cmp	r3, #5
 800317e:	d10f      	bne.n	80031a0 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	741a      	strb	r2, [r3, #16]
 800319e:	e00e      	b.n	80031be <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da05      	bge.n	80031b8 <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80031be:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 80031d6:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2100      	movs	r1, #0
 80031e4:	f000 fed2 	bl	8003f8c <VL53L8CX_RdMulti>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	7ffb      	ldrb	r3, [r7, #31]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	741a      	strb	r2, [r3, #16]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	b29b      	uxth	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f000 fed5 	bl	8003fba <VL53L8CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8003210:	2310      	movs	r3, #16
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	e10e      	b.n	8003434 <vl53l8cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d915      	bls.n	800325c <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d80e      	bhi.n	800325c <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003252:	b29b      	uxth	r3, r3
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e005      	b.n	8003268 <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003264:	b29b      	uxth	r3, r3
 8003266:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	885b      	ldrh	r3, [r3, #2]
 800326c:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8003270:	4293      	cmp	r3, r2
 8003272:	f000 80bb 	beq.w	80033ec <vl53l8cx_get_ranging_data+0x224>
 8003276:	f24e 0284 	movw	r2, #57476	@ 0xe084
 800327a:	4293      	cmp	r3, r2
 800327c:	f300 80d2 	bgt.w	8003424 <vl53l8cx_get_ranging_data+0x25c>
 8003280:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8003284:	4293      	cmp	r3, r2
 8003286:	f000 80a3 	beq.w	80033d0 <vl53l8cx_get_ranging_data+0x208>
 800328a:	f24e 0244 	movw	r2, #57412	@ 0xe044
 800328e:	4293      	cmp	r3, r2
 8003290:	f300 80c8 	bgt.w	8003424 <vl53l8cx_get_ranging_data+0x25c>
 8003294:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003298:	4293      	cmp	r3, r2
 800329a:	f000 808b 	beq.w	80033b4 <vl53l8cx_get_ranging_data+0x1ec>
 800329e:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 80032a2:	4293      	cmp	r3, r2
 80032a4:	f300 80be 	bgt.w	8003424 <vl53l8cx_get_ranging_data+0x25c>
 80032a8:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d073      	beq.n	8003398 <vl53l8cx_get_ranging_data+0x1d0>
 80032b0:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 80032b4:	4293      	cmp	r3, r2
 80032b6:	f300 80b5 	bgt.w	8003424 <vl53l8cx_get_ranging_data+0x25c>
 80032ba:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80032be:	4293      	cmp	r3, r2
 80032c0:	d05c      	beq.n	800337c <vl53l8cx_get_ranging_data+0x1b4>
 80032c2:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f300 80ac 	bgt.w	8003424 <vl53l8cx_get_ranging_data+0x25c>
 80032cc:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d045      	beq.n	8003360 <vl53l8cx_get_ranging_data+0x198>
 80032d4:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80032d8:	4293      	cmp	r3, r2
 80032da:	f300 80a3 	bgt.w	8003424 <vl53l8cx_get_ranging_data+0x25c>
 80032de:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f000 8090 	beq.w	8003408 <vl53l8cx_get_ranging_data+0x240>
 80032e8:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80032ec:	4293      	cmp	r3, r2
 80032ee:	f300 8099 	bgt.w	8003424 <vl53l8cx_get_ranging_data+0x25c>
 80032f2:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d024      	beq.n	8003344 <vl53l8cx_get_ranging_data+0x17c>
 80032fa:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80032fe:	4293      	cmp	r3, r2
 8003300:	f300 8090 	bgt.w	8003424 <vl53l8cx_get_ranging_data+0x25c>
 8003304:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <vl53l8cx_get_ranging_data+0x14e>
 800330c:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8003310:	4293      	cmp	r3, r2
 8003312:	d00a      	beq.n	800332a <vl53l8cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8003314:	e086      	b.n	8003424 <vl53l8cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	330c      	adds	r3, #12
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003322:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	701a      	strb	r2, [r3, #0]
				break;
 8003328:	e07d      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	3304      	adds	r3, #4
 8003332:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4619      	mov	r1, r3
 800333e:	f005 fe3a 	bl	8008fb6 <memcpy>
				break;
 8003342:	e070      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	3304      	adds	r3, #4
 800334e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4619      	mov	r1, r3
 800335a:	f005 fe2c 	bl	8008fb6 <memcpy>
				break;
 800335e:	e062      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	3304      	adds	r3, #4
 800336a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4619      	mov	r1, r3
 8003376:	f005 fe1e 	bl	8008fb6 <memcpy>
				break;
 800337a:	e054      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	3304      	adds	r3, #4
 8003386:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4619      	mov	r1, r3
 8003392:	f005 fe10 	bl	8008fb6 <memcpy>
				break;
 8003396:	e046      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3304      	adds	r3, #4
 80033a2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4619      	mov	r1, r3
 80033ae:	f005 fe02 	bl	8008fb6 <memcpy>
				break;
 80033b2:	e038      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	3304      	adds	r3, #4
 80033be:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f005 fdf4 	bl	8008fb6 <memcpy>
				break;
 80033ce:	e02a      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3304      	adds	r3, #4
 80033da:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4619      	mov	r1, r3
 80033e6:	f005 fde6 	bl	8008fb6 <memcpy>
				break;
 80033ea:	e01c      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	3304      	adds	r3, #4
 80033f6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4619      	mov	r1, r3
 8003402:	f005 fdd8 	bl	8008fb6 <memcpy>
				break;
 8003406:	e00e      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	3304      	adds	r3, #4
 8003412:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4619      	mov	r1, r3
 800341e:	f005 fdca 	bl	8008fb6 <memcpy>
				break;
 8003422:	e000      	b.n	8003426 <vl53l8cx_get_ranging_data+0x25e>
				break;
 8003424:	bf00      	nop
		}
		i += msize;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4413      	add	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	3304      	adds	r3, #4
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	429a      	cmp	r2, r3
 800343c:	f4ff aeeb 	bcc.w	8003216 <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003440:	2300      	movs	r3, #0
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	e00d      	b.n	8003462 <vl53l8cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0ada      	lsrs	r2, r3, #11
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	3301      	adds	r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b3f      	cmp	r3, #63	@ 0x3f
 8003466:	d9ee      	bls.n	8003446 <vl53l8cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e044      	b.n	80034f8 <vl53l8cx_get_ranging_data+0x330>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	da00      	bge.n	8003484 <vl53l8cx_get_ranging_data+0x2bc>
 8003482:	3303      	adds	r3, #3
 8003484:	109b      	asrs	r3, r3, #2
 8003486:	b219      	sxth	r1, r3
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	460a      	mov	r2, r1
 8003496:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4413      	add	r3, r2
 800349e:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	b2d9      	uxtb	r1, r3
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4413      	add	r3, r2
 80034ae:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80034b2:	460a      	mov	r2, r1
 80034b4:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	889b      	ldrh	r3, [r3, #4]
 80034c4:	09db      	lsrs	r3, r3, #7
 80034c6:	b299      	uxth	r1, r3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	460a      	mov	r2, r1
 80034d6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3390      	adds	r3, #144	@ 0x90
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	0ada      	lsrs	r2, r3, #11
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	3390      	adds	r3, #144	@ 0x90
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	3301      	adds	r3, #1
 80034f6:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80034fc:	d9b7      	bls.n	800346e <vl53l8cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e01b      	b.n	800353c <vl53l8cx_get_ranging_data+0x374>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4413      	add	r3, r2
 800350a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d110      	bne.n	8003536 <vl53l8cx_get_ranging_data+0x36e>
			for(j = 0; j < (uint32_t)
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e00a      	b.n	8003530 <vl53l8cx_get_ranging_data+0x368>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	4413      	add	r3, r2
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4413      	add	r3, r2
 8003524:	22ff      	movs	r2, #255	@ 0xff
 8003526:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	3301      	adds	r3, #1
 800352e:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f1      	beq.n	800351a <vl53l8cx_get_ranging_data+0x352>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	3301      	adds	r3, #1
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003540:	d9e0      	bls.n	8003504 <vl53l8cx_get_ranging_data+0x33c>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e014      	b.n	8003572 <vl53l8cx_get_ranging_data+0x3aa>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	4a1f      	ldr	r2, [pc, #124]	@ (80035d4 <vl53l8cx_get_ranging_data+0x40c>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	0bda      	lsrs	r2, r3, #15
 800355e:	6839      	ldr	r1, [r7, #0]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	3301      	adds	r3, #1
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b1f      	cmp	r3, #31
 8003576:	d9e7      	bls.n	8003548 <vl53l8cx_get_ranging_data+0x380>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 8003588:	461a      	mov	r2, r3
 800358a:	89fb      	ldrh	r3, [r7, #14]
 800358c:	4313      	orrs	r3, r2
 800358e:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8003594:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 80035a6:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80035b0:	461a      	mov	r2, r3
 80035b2:	89bb      	ldrh	r3, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 80035b8:	89fa      	ldrh	r2, [r7, #14]
 80035ba:	89bb      	ldrh	r3, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d003      	beq.n	80035c8 <vl53l8cx_get_ranging_data+0x400>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 80035c0:	7ffb      	ldrb	r3, [r7, #31]
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80035c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	80008001 	.word	0x80008001

080035d8 <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80035ec:	2308      	movs	r3, #8
 80035ee:	f245 4250 	movw	r2, #21584	@ 0x5450
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f996 	bl	8003924 <vl53l8cx_dci_read_data>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	4313      	orrs	r3, r2
 8003600:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 800360e:	fb12 f303 	smulbb	r3, r2, r3
 8003612:	b2da      	uxtb	r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	701a      	strb	r2, [r3, #0]

	return status;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	2b10      	cmp	r3, #16
 8003636:	d002      	beq.n	800363e <vl53l8cx_set_resolution+0x1c>
 8003638:	2b40      	cmp	r3, #64	@ 0x40
 800363a:	d055      	beq.n	80036e8 <vl53l8cx_set_resolution+0xc6>
 800363c:	e0a9      	b.n	8003792 <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8003644:	2310      	movs	r3, #16
 8003646:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f96a 	bl	8003924 <vl53l8cx_dci_read_data>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	4313      	orrs	r3, r2
 8003658:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2240      	movs	r2, #64	@ 0x40
 800365e:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2240      	movs	r2, #64	@ 0x40
 8003666:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2204      	movs	r2, #4
 800366e:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8003678:	2310      	movs	r3, #16
 800367a:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f9da 	bl	8003a38 <vl53l8cx_dci_write_data>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	4313      	orrs	r3, r2
 800368c:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8003694:	2308      	movs	r3, #8
 8003696:	f245 4250 	movw	r2, #21584	@ 0x5450
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f942 	bl	8003924 <vl53l8cx_dci_read_data>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2204      	movs	r2, #4
 80036ae:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2204      	movs	r2, #4
 80036b6:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2208      	movs	r2, #8
 80036be:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2208      	movs	r2, #8
 80036c6:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 80036d0:	2308      	movs	r3, #8
 80036d2:	f245 4250 	movw	r2, #21584	@ 0x5450
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9ae 	bl	8003a38 <vl53l8cx_dci_write_data>
 80036dc:	4603      	mov	r3, r0
 80036de:	461a      	mov	r2, r3
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 80036e6:	e057      	b.n	8003798 <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80036ee:	2310      	movs	r3, #16
 80036f0:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f915 	bl	8003924 <vl53l8cx_dci_read_data>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	4313      	orrs	r3, r2
 8003702:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2210      	movs	r2, #16
 8003708:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2210      	movs	r2, #16
 8003710:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8003722:	2310      	movs	r3, #16
 8003724:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f985 	bl	8003a38 <vl53l8cx_dci_write_data>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	4313      	orrs	r3, r2
 8003736:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 800373e:	2308      	movs	r3, #8
 8003740:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f8ed 	bl	8003924 <vl53l8cx_dci_read_data>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	4313      	orrs	r3, r2
 8003752:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2208      	movs	r2, #8
 8003758:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2208      	movs	r2, #8
 8003760:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 800377a:	2308      	movs	r3, #8
 800377c:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f959 	bl	8003a38 <vl53l8cx_dci_write_data>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	4313      	orrs	r3, r2
 800378e:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 8003790:	e002      	b.n	8003798 <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8003792:	237f      	movs	r3, #127	@ 0x7f
 8003794:	73fb      	strb	r3, [r7, #15]
			break;
 8003796:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fe f9af 	bl	8001b00 <_vl53l8cx_send_offset_data>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fe fb71 	bl	8001e98 <_vl53l8cx_send_xtalk_data>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	4313      	orrs	r3, r2
 80037be:	73fb      	strb	r3, [r7, #15]

	return status;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b088      	sub	sp, #32
 80037ce:	af04      	add	r7, sp, #16
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80037e0:	2301      	movs	r3, #1
 80037e2:	9302      	str	r3, [sp, #8]
 80037e4:	2301      	movs	r3, #1
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	1cfb      	adds	r3, r7, #3
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2304      	movs	r3, #4
 80037ee:	f245 4258 	movw	r2, #21592	@ 0x5458
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f9be 	bl	8003b74 <vl53l8cx_dci_replace_data>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	4313      	orrs	r3, r2
 8003800:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af04      	add	r7, sp, #16
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d903      	bls.n	800382c <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800382a:	d904      	bls.n	8003836 <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e01a      	b.n	800386c <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003848:	2300      	movs	r3, #0
 800384a:	9302      	str	r3, [sp, #8]
 800384c:	2304      	movs	r3, #4
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	f107 0308 	add.w	r3, r7, #8
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	2314      	movs	r3, #20
 8003858:	f245 425c 	movw	r2, #21596	@ 0x545c
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f989 	bl	8003b74 <vl53l8cx_dci_replace_data>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	4313      	orrs	r3, r2
 800386a:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003890:	2308      	movs	r3, #8
 8003892:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f844 	bl	8003924 <vl53l8cx_dci_read_data>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d002      	beq.n	80038b2 <vl53l8cx_set_ranging_mode+0x3c>
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d00b      	beq.n	80038c8 <vl53l8cx_set_ranging_mode+0x52>
 80038b0:	e015      	b.n	80038de <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2203      	movs	r2, #3
 80038be:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
			break;
 80038c6:	e00d      	b.n	80038e4 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2203      	movs	r2, #3
 80038cc:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 80038d8:	2301      	movs	r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
			break;
 80038dc:	e002      	b.n	80038e4 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 80038de:	237f      	movs	r3, #127	@ 0x7f
 80038e0:	73fb      	strb	r3, [r7, #15]
			break;
 80038e2:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80038ea:	2308      	movs	r3, #8
 80038ec:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8a1 	bl	8003a38 <vl53l8cx_dci_write_data>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8003900:	f107 0108 	add.w	r1, r7, #8
 8003904:	2304      	movs	r3, #4
 8003906:	f64d 1264 	movw	r2, #55652	@ 0xd964
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f894 	bl	8003a38 <vl53l8cx_dci_write_data>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	4313      	orrs	r3, r2
 8003918:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	@ 0x30
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8003938:	887b      	ldrh	r3, [r7, #2]
 800393a:	330c      	adds	r3, #12
 800393c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800393e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a34 <vl53l8cx_dci_read_data+0x110>)
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	ca07      	ldmia	r2, {r0, r1, r2}
 8003946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8003950:	d903      	bls.n	800395a <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8003952:	23ff      	movs	r3, #255	@ 0xff
 8003954:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003958:	e065      	b.n	8003a26 <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	b2db      	uxtb	r3, r3
 8003960:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	111b      	asrs	r3, r3, #4
 800396c:	b2db      	uxtb	r3, r3
 800396e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	b2db      	uxtb	r3, r3
 8003978:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f107 0214 	add.w	r2, r7, #20
 8003980:	230c      	movs	r3, #12
 8003982:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8003986:	f000 faea 	bl	8003f5e <VL53L8CX_WrMulti>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003992:	4313      	orrs	r3, r2
 8003994:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8003998:	2303      	movs	r3, #3
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	23ff      	movs	r3, #255	@ 0xff
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80039a4:	2201      	movs	r2, #1
 80039a6:	2104      	movs	r1, #4
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7fe f815 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 80039bc:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80039ca:	f000 fadf 	bl	8003f8c <VL53L8CX_RdMulti>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	330c      	adds	r3, #12
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f000 fae5 	bl	8003fba <VL53L8CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80039f0:	2300      	movs	r3, #0
 80039f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80039f4:	e011      	b.n	8003a1a <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 80039f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80039fa:	1d1a      	adds	r2, r3, #4
 80039fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	440b      	add	r3, r1
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	440a      	add	r2, r1
 8003a08:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 8003a0c:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8003a0e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003a1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a1e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8003a22:	429a      	cmp	r2, r3
 8003a24:	dbe7      	blt.n	80039f6 <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 8003a26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3728      	adds	r7, #40	@ 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	0800aca4 	.word	0x0800aca4

08003a38 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	@ 0x30
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8003a50:	2300      	movs	r3, #0
 8003a52:	753b      	strb	r3, [r7, #20]
 8003a54:	2300      	movs	r3, #0
 8003a56:	757b      	strb	r3, [r7, #21]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75bb      	strb	r3, [r7, #22]
 8003a5c:	230f      	movs	r3, #15
 8003a5e:	75fb      	strb	r3, [r7, #23]
 8003a60:	2305      	movs	r3, #5
 8003a62:	763b      	strb	r3, [r7, #24]
 8003a64:	2301      	movs	r3, #1
 8003a66:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	121b      	asrs	r3, r3, #8
 8003a6e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8003a70:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8003a72:	887b      	ldrh	r3, [r7, #2]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	3308      	adds	r3, #8
 8003a78:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8003a7a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8003a82:	3334      	adds	r3, #52	@ 0x34
 8003a84:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8003a8c:	d903      	bls.n	8003a96 <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 8003a8e:	23ff      	movs	r3, #255	@ 0xff
 8003a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003a94:	e068      	b.n	8003b68 <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8003aa4:	887b      	ldrh	r3, [r7, #2]
 8003aa6:	111b      	asrs	r3, r3, #4
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L8CX_SwapBuffer(data, data_size);
 8003ab6:	887b      	ldrh	r3, [r7, #2]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	68b8      	ldr	r0, [r7, #8]
 8003abc:	f000 fa7d 	bl	8003fba <VL53L8CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003ac8:	e012      	b.n	8003af0 <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8003aca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	7811      	ldrb	r1, [r2, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	460a      	mov	r2, r1
 8003ae0:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8003ae4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003af0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	dae8      	bge.n	8003aca <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	3304      	adds	r3, #4
 8003b06:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	cb03      	ldmia	r3!, {r0, r1}
 8003b16:	6010      	str	r0, [r2, #0]
 8003b18:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8003b1a:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8003b22:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8003b24:	330c      	adds	r3, #12
 8003b26:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8003b28:	f000 fa19 	bl	8003f5e <VL53L8CX_WrMulti>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	23ff      	movs	r3, #255	@ 0xff
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003b46:	2201      	movs	r2, #1
 8003b48:	2104      	movs	r1, #4
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7fd ff44 	bl	80019d8 <_vl53l8cx_poll_for_answer>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L8CX_SwapBuffer(data, data_size);
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	4619      	mov	r1, r3
 8003b62:	68b8      	ldr	r0, [r7, #8]
 8003b64:	f000 fa29 	bl	8003fba <VL53L8CX_SwapBuffer>
	}

	return status;
 8003b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff fec9 	bl	8003924 <vl53l8cx_dci_read_data>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8003b9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f005 fa05 	bl	8008fb6 <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7ff ff40 	bl	8003a38 <vl53l8cx_dci_write_data>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	75fb      	strb	r3, [r7, #23]

	return status;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af04      	add	r7, sp, #16
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8003bdc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003be0:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d104      	bne.n	8003bf2 <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8003be8:	2301      	movs	r3, #1
 8003bea:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8003bec:	2304      	movs	r3, #4
 8003bee:	73bb      	strb	r3, [r7, #14]
 8003bf0:	e003      	b.n	8003bfa <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003c00:	2300      	movs	r3, #0
 8003c02:	9302      	str	r3, [sp, #8]
 8003c04:	2304      	movs	r3, #4
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	f107 0308 	add.w	r3, r7, #8
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2308      	movs	r3, #8
 8003c10:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ffad 	bl	8003b74 <vl53l8cx_dci_replace_data>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003c2a:	2311      	movs	r3, #17
 8003c2c:	9302      	str	r3, [sp, #8]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	f107 030e 	add.w	r3, r7, #14
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2314      	movs	r3, #20
 8003c3a:	f245 4288 	movw	r2, #21640	@ 0x5488
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ff98 	bl	8003b74 <vl53l8cx_dci_replace_data>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8003c66:	4aa7      	ldr	r2, [pc, #668]	@ (8003f04 <vl53l8cx_set_detection_thresholds+0x2ac>)
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c70:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]
 8003c78:	e120      	b.n	8003ebc <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	7a1b      	ldrb	r3, [r3, #8]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	2b12      	cmp	r3, #18
 8003c82:	f200 8117 	bhi.w	8003eb4 <vl53l8cx_set_detection_thresholds+0x25c>
 8003c86:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <vl53l8cx_set_detection_thresholds+0x34>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003d27 	.word	0x08003d27
 8003c94:	08003eb5 	.word	0x08003eb5
 8003c98:	08003d75 	.word	0x08003d75
 8003c9c:	08003eb5 	.word	0x08003eb5
 8003ca0:	08003eb5 	.word	0x08003eb5
 8003ca4:	08003eb5 	.word	0x08003eb5
 8003ca8:	08003dc3 	.word	0x08003dc3
 8003cac:	08003eb5 	.word	0x08003eb5
 8003cb0:	08003eb5 	.word	0x08003eb5
 8003cb4:	08003eb5 	.word	0x08003eb5
 8003cb8:	08003eb5 	.word	0x08003eb5
 8003cbc:	08003e11 	.word	0x08003e11
 8003cc0:	08003eb5 	.word	0x08003eb5
 8003cc4:	08003eb5 	.word	0x08003eb5
 8003cc8:	08003eb5 	.word	0x08003eb5
 8003ccc:	08003eb5 	.word	0x08003eb5
 8003cd0:	08003eb5 	.word	0x08003eb5
 8003cd4:	08003e5f 	.word	0x08003e5f
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8003cd8:	7dfa      	ldrb	r2, [r7, #23]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	7dfa      	ldrb	r2, [r7, #23]
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	008a      	lsls	r2, r1, #2
 8003cfc:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8003cfe:	7dfa      	ldrb	r2, [r7, #23]
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	7dfa      	ldrb	r2, [r7, #23]
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4413      	add	r3, r2
 8003d20:	008a      	lsls	r2, r1, #2
 8003d22:	605a      	str	r2, [r3, #4]
				break;
 8003d24:	e0c7      	b.n	8003eb6 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8003d26:	7dfa      	ldrb	r2, [r7, #23]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	461a      	mov	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	7dfa      	ldrb	r2, [r7, #23]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	461a      	mov	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	02ca      	lsls	r2, r1, #11
 8003d4a:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8003d4c:	7dfa      	ldrb	r2, [r7, #23]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	461a      	mov	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	7dfa      	ldrb	r2, [r7, #23]
 8003d60:	4613      	mov	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	02ca      	lsls	r2, r1, #11
 8003d70:	605a      	str	r2, [r3, #4]
				break;
 8003d72:	e0a0      	b.n	8003eb6 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8003d74:	7dfa      	ldrb	r2, [r7, #23]
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	461a      	mov	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4413      	add	r3, r2
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	7dfa      	ldrb	r2, [r7, #23]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	461a      	mov	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	4413      	add	r3, r2
 8003d96:	01ca      	lsls	r2, r1, #7
 8003d98:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8003d9a:	7dfa      	ldrb	r2, [r7, #23]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	461a      	mov	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	7dfa      	ldrb	r2, [r7, #23]
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	461a      	mov	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	01ca      	lsls	r2, r1, #7
 8003dbe:	605a      	str	r2, [r3, #4]
				break;
 8003dc0:	e079      	b.n	8003eb6 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8003dc2:	7dfa      	ldrb	r2, [r7, #23]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	7dfa      	ldrb	r2, [r7, #23]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	461a      	mov	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	02ca      	lsls	r2, r1, #11
 8003de6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8003de8:	7dfa      	ldrb	r2, [r7, #23]
 8003dea:	4613      	mov	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	461a      	mov	r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	6859      	ldr	r1, [r3, #4]
 8003dfa:	7dfa      	ldrb	r2, [r7, #23]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	461a      	mov	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	02ca      	lsls	r2, r1, #11
 8003e0c:	605a      	str	r2, [r3, #4]
				break;
 8003e0e:	e052      	b.n	8003eb6 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 8003e10:	7dfa      	ldrb	r2, [r7, #23]
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4413      	add	r3, r2
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	7dfa      	ldrb	r2, [r7, #23]
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	020a      	lsls	r2, r1, #8
 8003e34:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8003e36:	7dfa      	ldrb	r2, [r7, #23]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	461a      	mov	r2, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	7dfa      	ldrb	r2, [r7, #23]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	461a      	mov	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	020a      	lsls	r2, r1, #8
 8003e5a:	605a      	str	r2, [r3, #4]
				break;
 8003e5c:	e02b      	b.n	8003eb6 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 8003e5e:	7dfa      	ldrb	r2, [r7, #23]
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	7df9      	ldrb	r1, [r7, #23]
 8003e72:	460b      	mov	r3, r1
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	440b      	add	r3, r1
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4419      	add	r1, r3
 8003e80:	4613      	mov	r3, r2
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8003e88:	7dfa      	ldrb	r2, [r7, #23]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	461a      	mov	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	7df9      	ldrb	r1, [r7, #23]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	440b      	add	r3, r1
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	4419      	add	r1, r3
 8003eaa:	4613      	mov	r3, r2
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
				break;
 8003eb2:	e000      	b.n	8003eb6 <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 8003eb4:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ec0:	f67f aedb 	bls.w	8003c7a <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8003ec4:	f107 010c 	add.w	r1, r7, #12
 8003ec8:	2308      	movs	r3, #8
 8003eca:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fdb2 	bl	8003a38 <vl53l8cx_dci_write_data>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	7dbb      	ldrb	r3, [r7, #22]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 8003ede:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ee2:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fda5 	bl	8003a38 <vl53l8cx_dci_write_data>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	7dbb      	ldrb	r3, [r7, #22]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 8003ef8:	7dbb      	ldrb	r3, [r7, #22]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	0800acb0 	.word	0x0800acb0

08003f08 <VL53L8CX_RdByte>:

uint8_t VL53L8CX_RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	460b      	mov	r3, r1
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689c      	ldr	r4, [r3, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8818      	ldrh	r0, [r3, #0]
 8003f1e:	8979      	ldrh	r1, [r7, #10]
 8003f20:	2301      	movs	r3, #1
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	47a0      	blx	r4
 8003f26:	4603      	mov	r3, r0
 8003f28:	b2db      	uxtb	r3, r3
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}

08003f32 <VL53L8CX_WrByte>:

uint8_t VL53L8CX_WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8003f32:	b590      	push	{r4, r7, lr}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	807b      	strh	r3, [r7, #2]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685c      	ldr	r4, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8818      	ldrh	r0, [r3, #0]
 8003f4a:	1c7a      	adds	r2, r7, #1
 8003f4c:	8879      	ldrh	r1, [r7, #2]
 8003f4e:	2301      	movs	r3, #1
 8003f50:	47a0      	blx	r4
 8003f52:	4603      	mov	r3, r0
 8003f54:	b2db      	uxtb	r3, r3
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}

08003f5e <VL53L8CX_WrMulti>:
uint8_t VL53L8CX_WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003f5e:	b590      	push	{r4, r7, lr}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685c      	ldr	r4, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8818      	ldrh	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8979      	ldrh	r1, [r7, #10]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	47a0      	blx	r4
 8003f80:	4603      	mov	r3, r0
 8003f82:	b2db      	uxtb	r3, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd90      	pop	{r4, r7, pc}

08003f8c <VL53L8CX_RdMulti>:
uint8_t VL53L8CX_RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689c      	ldr	r4, [r3, #8]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8818      	ldrh	r0, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	8979      	ldrh	r1, [r7, #10]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	47a0      	blx	r4
 8003fae:	4603      	mov	r3, r0
 8003fb0:	b2db      	uxtb	r3, r3
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd90      	pop	{r4, r7, pc}

08003fba <VL53L8CX_SwapBuffer>:

void VL53L8CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e021      	b.n	8004010 <VL53L8CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	440b      	add	r3, r1
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	440b      	add	r3, r1
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	3203      	adds	r2, #3
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	7812      	ldrb	r2, [r2, #0]
 8003ffc:	4313      	orrs	r3, r2
		tmp = (
 8003ffe:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4) 
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3304      	adds	r3, #4
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	887b      	ldrh	r3, [r7, #2]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	429a      	cmp	r2, r3
 8004016:	d3d9      	bcc.n	8003fcc <VL53L8CX_SwapBuffer+0x12>
	}
}	
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <VL53L8CX_WaitMs>:

uint8_t VL53L8CX_WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4798      	blx	r3
 8004036:	4603      	mov	r3, r0
 8004038:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 800403a:	bf00      	nop
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4798      	blx	r3
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d8f5      	bhi.n	800403c <VL53L8CX_WaitMs+0x16>

  return 0;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <VL53L8CX_RegisterBusIO>:
  * @param pObj    vl53l8cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <VL53L8CX_RegisterBusIO+0x16>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004070:	f06f 0301 	mvn.w	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	e033      	b.n	80040e0 <VL53L8CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	891a      	ldrh	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	891a      	ldrh	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <VL53L8CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4798      	blx	r3
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	e002      	b.n	80040e0 <VL53L8CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80040f8:	f06f 0301 	mvn.w	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e02e      	b.n	800415e <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e025      	b.n	800415e <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3318      	adds	r3, #24
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe f80a 	bl	8002130 <vl53l8cx_init>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e019      	b.n	800415e <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsBlocking = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
    pObj->IsContinuous = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
    pObj->IsAmbientEnabled = 0U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd
    pObj->IsInitialized = 1U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    ret = VL53L8CX_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800415e:	68fb      	ldr	r3, [r7, #12]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d103      	bne.n	800417e <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004176:	f06f 0301 	mvn.w	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e018      	b.n	80041b0 <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8004184:	2b01      	cmp	r3, #1
 8004186:	d110      	bne.n	80041aa <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4798      	blx	r3
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 8004194:	f04f 33ff 	mov.w	r3, #4294967295
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e009      	b.n	80041b0 <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
 80041a8:	e002      	b.n	80041b0 <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80041b0:	68fb      	ldr	r3, [r7, #12]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <VL53L8CX_ReadID+0x22>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80041dc:	f06f 0301 	mvn.w	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e045      	b.n	8004270 <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3318      	adds	r3, #24
 80041e8:	2200      	movs	r2, #0
 80041ea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fe9f 	bl	8003f32 <VL53L8CX_WrByte>
 80041f4:	4603      	mov	r3, r0
 80041f6:	461a      	mov	r2, r3
 80041f8:	7afb      	ldrb	r3, [r7, #11]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3318      	adds	r3, #24
 8004202:	f107 020a 	add.w	r2, r7, #10
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fe7d 	bl	8003f08 <VL53L8CX_RdByte>
 800420e:	4603      	mov	r3, r0
 8004210:	461a      	mov	r2, r3
 8004212:	7afb      	ldrb	r3, [r7, #11]
 8004214:	4313      	orrs	r3, r2
 8004216:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3318      	adds	r3, #24
 800421c:	f107 0209 	add.w	r2, r7, #9
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fe70 	bl	8003f08 <VL53L8CX_RdByte>
 8004228:	4603      	mov	r3, r0
 800422a:	461a      	mov	r2, r3
 800422c:	7afb      	ldrb	r3, [r7, #11]
 800422e:	4313      	orrs	r3, r2
 8004230:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3318      	adds	r3, #24
 8004236:	2202      	movs	r2, #2
 8004238:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fe78 	bl	8003f32 <VL53L8CX_WrByte>
 8004242:	4603      	mov	r3, r0
 8004244:	461a      	mov	r2, r3
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	4313      	orrs	r3, r2
 800424a:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d108      	bne.n	8004264 <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8004252:	7abb      	ldrb	r3, [r7, #10]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	7a7a      	ldrb	r2, [r7, #9]
 8004258:	441a      	add	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e005      	b.n	8004270 <VL53L8CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004270:	68fb      	ldr	r3, [r7, #12]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <VL53L8CX_GetCapabilities+0x16>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004290:	f06f 0301 	mvn.w	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e00d      	b.n	80042b4 <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2240      	movs	r2, #64	@ 0x40
 800429c:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2201      	movs	r2, #1
 80042a2:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2201      	movs	r2, #1
 80042ae:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80042b4:	68fb      	ldr	r3, [r7, #12]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <VL53L8CX_ConfigProfile+0x4c>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 80042f0:	7c7b      	ldrb	r3, [r7, #17]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d822      	bhi.n	800433e <VL53L8CX_ConfigProfile+0x7a>
 80042f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004300 <VL53L8CX_ConfigProfile+0x3c>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004317 	.word	0x08004317
 8004304:	08004321 	.word	0x08004321
 8004308:	0800432b 	.word	0x0800432b
 800430c:	08004335 	.word	0x08004335
    return VL53L8CX_INVALID_PARAM;
 8004310:	f06f 0301 	mvn.w	r3, #1
 8004314:	e070      	b.n	80043f8 <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8004316:	2310      	movs	r3, #16
 8004318:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 800431a:	2301      	movs	r3, #1
 800431c:	74bb      	strb	r3, [r7, #18]
    break;
 800431e:	e016      	b.n	800434e <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8004320:	2310      	movs	r3, #16
 8004322:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8004324:	2303      	movs	r3, #3
 8004326:	74bb      	strb	r3, [r7, #18]
    break;
 8004328:	e011      	b.n	800434e <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 800432a:	2340      	movs	r3, #64	@ 0x40
 800432c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 800432e:	2301      	movs	r3, #1
 8004330:	74bb      	strb	r3, [r7, #18]
    break;
 8004332:	e00c      	b.n	800434e <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8004334:	2340      	movs	r3, #64	@ 0x40
 8004336:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8004338:	2303      	movs	r3, #3
 800433a:	74bb      	strb	r3, [r7, #18]
    break;
 800433c:	e007      	b.n	800434e <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 800433e:	2300      	movs	r3, #0
 8004340:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8004342:	2300      	movs	r3, #0
 8004344:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 8004346:	f06f 0301 	mvn.w	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
    break;
 800434c:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	e04f      	b.n	80043f8 <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3318      	adds	r3, #24
 800435c:	7cfa      	ldrb	r2, [r7, #19]
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff f95e 	bl	8003622 <vl53l8cx_set_resolution>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 800436c:	f04f 33ff 	mov.w	r3, #4294967295
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e040      	b.n	80043f6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3318      	adds	r3, #24
 8004378:	7cba      	ldrb	r2, [r7, #18]
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fa7a 	bl	8003876 <vl53l8cx_set_ranging_mode>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 8004388:	f04f 33ff 	mov.w	r3, #4294967295
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e032      	b.n	80043f6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3318      	adds	r3, #24
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fa38 	bl	800380c <vl53l8cx_set_integration_time_ms>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e025      	b.n	80043f6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3318      	adds	r3, #24
 80043ae:	7afa      	ldrb	r2, [r7, #11]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fa09 	bl	80037ca <vl53l8cx_set_ranging_frequency_hz>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e017      	b.n	80043f6 <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd

    ret = VL53L8CX_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80043f6:	697b      	ldr	r3, [r7, #20]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 800440a:	f06f 0303 	mvn.w	r3, #3
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <VL53L8CX_ConfigIT+0x1a>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004436:	f06f 0301 	mvn.w	r3, #1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e09f      	b.n	800457e <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2bff      	cmp	r3, #255	@ 0xff
 8004444:	d113      	bne.n	800446e <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3318      	adds	r3, #24
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fbbd 	bl	8003bcc <vl53l8cx_set_detection_thresholds_enable>
 8004452:	4603      	mov	r3, r0
 8004454:	461a      	mov	r2, r3
 8004456:	7abb      	ldrb	r3, [r7, #10]
 8004458:	4313      	orrs	r3, r2
 800445a:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800445c:	7abb      	ldrb	r3, [r7, #10]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <VL53L8CX_ConfigIT+0x4c>
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	e000      	b.n	800446a <VL53L8CX_ConfigIT+0x4e>
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e087      	b.n	800457e <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3318      	adds	r3, #24
 8004472:	f107 0209 	add.w	r2, r7, #9
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff f8ad 	bl	80035d8 <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800447e:	2300      	movs	r3, #0
 8004480:	72fb      	strb	r3, [r7, #11]
 8004482:	e044      	b.n	800450e <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8004484:	7afa      	ldrb	r2, [r7, #11]
 8004486:	4940      	ldr	r1, [pc, #256]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	330a      	adds	r3, #10
 8004494:	7afa      	ldrb	r2, [r7, #11]
 8004496:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 8004498:	7afa      	ldrb	r2, [r7, #11]
 800449a:	493b      	ldr	r1, [pc, #236]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	3308      	adds	r3, #8
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	7afa      	ldrb	r2, [r7, #11]
 80044b2:	b2d8      	uxtb	r0, r3
 80044b4:	4934      	ldr	r1, [pc, #208]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3309      	adds	r3, #9
 80044c2:	4602      	mov	r2, r0
 80044c4:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 80044c6:	7afa      	ldrb	r2, [r7, #11]
 80044c8:	492f      	ldr	r1, [pc, #188]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	330b      	adds	r3, #11
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	7afa      	ldrb	r2, [r7, #11]
 80044e0:	4618      	mov	r0, r3
 80044e2:	4929      	ldr	r1, [pc, #164]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 80044e4:	4613      	mov	r3, r2
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	7afa      	ldrb	r2, [r7, #11]
 80044f6:	4618      	mov	r0, r3
 80044f8:	4923      	ldr	r1, [pc, #140]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 80044fa:	4613      	mov	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3304      	adds	r3, #4
 8004506:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8004508:	7afb      	ldrb	r3, [r7, #11]
 800450a:	3301      	adds	r3, #1
 800450c:	72fb      	strb	r3, [r7, #11]
 800450e:	7a7b      	ldrb	r3, [r7, #9]
 8004510:	7afa      	ldrb	r2, [r7, #11]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3b6      	bcc.n	8004484 <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 8004516:	7afa      	ldrb	r2, [r7, #11]
 8004518:	491b      	ldr	r1, [pc, #108]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	330a      	adds	r3, #10
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	7afa      	ldrb	r2, [r7, #11]
 800452a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800452e:	b2d8      	uxtb	r0, r3
 8004530:	4915      	ldr	r1, [pc, #84]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	330a      	adds	r3, #10
 800453e:	4602      	mov	r2, r0
 8004540:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3318      	adds	r3, #24
 8004546:	4910      	ldr	r1, [pc, #64]	@ (8004588 <VL53L8CX_ConfigIT+0x16c>)
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fb85 	bl	8003c58 <vl53l8cx_set_detection_thresholds>
 800454e:	4603      	mov	r3, r0
 8004550:	461a      	mov	r2, r3
 8004552:	7abb      	ldrb	r3, [r7, #10]
 8004554:	4313      	orrs	r3, r2
 8004556:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3318      	adds	r3, #24
 800455c:	2101      	movs	r1, #1
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fb34 	bl	8003bcc <vl53l8cx_set_detection_thresholds_enable>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	7abb      	ldrb	r3, [r7, #10]
 800456a:	4313      	orrs	r3, r2
 800456c:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800456e:	7abb      	ldrb	r3, [r7, #10]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <VL53L8CX_ConfigIT+0x15e>
 8004574:	f04f 33ff 	mov.w	r3, #4294967295
 8004578:	e000      	b.n	800457c <VL53L8CX_ConfigIT+0x160>
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20002368 	.word	0x20002368

0800458c <VL53L8CX_GetDistance>:
  * @param pObj    vl53l8cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L8CX_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <VL53L8CX_GetDistance+0x1a>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d103      	bne.n	80045ae <VL53L8CX_GetDistance+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80045a6:	f06f 0301 	mvn.w	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e007      	b.n	80045be <VL53L8CX_GetDistance+0x32>
  }
  else if (pObj->IsRanging == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <VL53L8CX_GetDistance+0x32>
  {
    ret = VL53L8CX_ERROR;
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	60fb      	str	r3, [r7, #12]
  }

  if (ret == VL53L8CX_OK)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d110      	bne.n	80045e6 <VL53L8CX_GetDistance+0x5a>
  {
    if (pObj->IsBlocking == 1U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3ada 	ldrb.w	r3, [r3, #2778]	@ 0xada
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d106      	bne.n	80045dc <VL53L8CX_GetDistance+0x50>
    {
      ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 80045ce:	f241 3188 	movw	r1, #5000	@ 0x1388
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f939 	bl	800484a <vl53l8cx_poll_for_measurement>
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	e004      	b.n	80045e6 <VL53L8CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 80045dc:	2100      	movs	r1, #0
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f933 	bl	800484a <vl53l8cx_poll_for_measurement>
 80045e4:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L8CX_OK)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <VL53L8CX_GetDistance+0x6a>
  {
    ret = vl53l8cx_get_result(pObj, pResult);
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f95e 	bl	80048b0 <vl53l8cx_get_result>
 80045f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d103      	bne.n	8004618 <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004610:	f06f 0301 	mvn.w	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e04c      	b.n	80046b2 <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3318      	adds	r3, #24
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe fb1d 	bl	8002c5c <vl53l8cx_start_ranging>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d141      	bne.n	80046ac <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	3b01      	subs	r3, #1
 8004638:	2b03      	cmp	r3, #3
 800463a:	d82f      	bhi.n	800469c <VL53L8CX_Start+0x9c>
 800463c:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <VL53L8CX_Start+0x44>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004655 	.word	0x08004655
 8004648:	08004667 	.word	0x08004667
 800464c:	08004679 	.word	0x08004679
 8004650:	0800468b 	.word	0x0800468b
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8004664:	e025      	b.n	80046b2 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8004676:	e01c      	b.n	80046b2 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8004688:	e013      	b.n	80046b2 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 800469a:	e00a      	b.n	80046b2 <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
        ret = VL53L8CX_INVALID_PARAM;
 80046a4:	f06f 0301 	mvn.w	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
        break;
 80046aa:	e002      	b.n	80046b2 <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 80046ac:	f04f 33ff 	mov.w	r3, #4294967295
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80046b2:	68fb      	ldr	r3, [r7, #12]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80046ca:	f06f 0301 	mvn.w	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e01a      	b.n	8004708 <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 80046dc:	f04f 33ff 	mov.w	r3, #4294967295
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e011      	b.n	8004708 <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3318      	adds	r3, #24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fc4d 	bl	8002f88 <vl53l8cx_stop_ranging>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e002      	b.n	8004708 <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <VL53L8CX_SetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param Address     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetAddress(VL53L8CX_Object_t *pObj, uint32_t Address)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <VL53L8CX_SetAddress+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004722:	f06f 0301 	mvn.w	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e015      	b.n	8004756 <VL53L8CX_SetAddress+0x44>
  }
  else if (vl53l8cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L8CX_STATUS_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3318      	adds	r3, #24
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe f927 	bl	8002988 <vl53l8cx_set_i2c_address>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <VL53L8CX_SetAddress+0x36>
  {
    ret = VL53L8CX_ERROR;
 8004740:	f04f 33ff 	mov.w	r3, #4294967295
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e006      	b.n	8004756 <VL53L8CX_SetAddress+0x44>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	811a      	strh	r2, [r3, #8]
    ret = VL53L8CX_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <VL53L8CX_GetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetAddress(VL53L8CX_Object_t *pObj, uint32_t *pAddress)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <VL53L8CX_GetAddress+0x16>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <VL53L8CX_GetAddress+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004776:	f06f 0301 	mvn.w	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e006      	b.n	800478c <VL53L8CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	891b      	ldrh	r3, [r3, #8]
 8004782:	461a      	mov	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800478c:	68fb      	ldr	r3, [r7, #12]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80047aa:	f06f 0301 	mvn.w	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e01a      	b.n	80047e8 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d006      	beq.n	80047c6 <VL53L8CX_SetPowerMode+0x2c>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d003      	beq.n	80047c6 <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 80047be:	f06f 0301 	mvn.w	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e010      	b.n	80047e8 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3318      	adds	r3, #24
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe f965 	bl	8002aa0 <vl53l8cx_set_power_mode>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e001      	b.n	80047e8 <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <VL53L8CX_GetPowerMode+0x16>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d103      	bne.n	8004810 <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8004808:	f06f 0301 	mvn.w	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e017      	b.n	8004840 <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3318      	adds	r3, #24
 8004814:	f107 020b 	add.w	r2, r7, #11
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe f8ea 	bl	80029f4 <vl53l8cx_get_power_mode>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 800482c:	f04f 33ff 	mov.w	r3, #4294967295
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e005      	b.n	8004840 <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8004834:	7afb      	ldrb	r3, [r7, #11]
 8004836:	461a      	mov	r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004840:	68fb      	ldr	r3, [r7, #12]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b086      	sub	sp, #24
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <vl53l8cx_poll_for_measurement+0x1c>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800485e:	f06f 0301 	mvn.w	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e01f      	b.n	80048a6 <vl53l8cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L8CX_TIMEOUT;
 8004866:	f06f 0302 	mvn.w	r3, #2
 800486a:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	4798      	blx	r3
 8004872:	4603      	mov	r3, r0
 8004874:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3318      	adds	r3, #24
 800487a:	f107 020f 	add.w	r2, r7, #15
 800487e:	4611      	mov	r1, r2
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe fc51 	bl	8003128 <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d102      	bne.n	8004892 <vl53l8cx_poll_for_measurement+0x48>
      {
        ret = VL53L8CX_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
        break;
 8004890:	e009      	b.n	80048a6 <vl53l8cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4798      	blx	r3
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d8e7      	bhi.n	8004876 <vl53l8cx_poll_for_measurement+0x2c>

  }

  return ret;
 80048a6:	697b      	ldr	r3, [r7, #20]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <vl53l8cx_get_result+0x16>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <vl53l8cx_get_result+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80048c6:	f06f 0301 	mvn.w	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e0cf      	b.n	8004a6e <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3318      	adds	r3, #24
 80048d2:	f107 0208 	add.w	r2, r7, #8
 80048d6:	4611      	mov	r1, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe fe7d 	bl	80035d8 <vl53l8cx_get_resolution>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <vl53l8cx_get_result+0x3c>
  {
    ret = VL53L8CX_ERROR;
 80048e4:	f04f 33ff 	mov.w	r3, #4294967295
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e0c0      	b.n	8004a6e <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3318      	adds	r3, #24
 80048f0:	4961      	ldr	r1, [pc, #388]	@ (8004a78 <vl53l8cx_get_result+0x1c8>)
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fc68 	bl	80031c8 <vl53l8cx_get_ranging_data>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <vl53l8cx_get_result+0x56>
  {
    ret = VL53L8CX_ERROR;
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e0b3      	b.n	8004a6e <vl53l8cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8004906:	7a3b      	ldrb	r3, [r7, #8]
 8004908:	461a      	mov	r2, r3
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	72fb      	strb	r3, [r7, #11]
 8004912:	e0a5      	b.n	8004a60 <vl53l8cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8004914:	7afb      	ldrb	r3, [r7, #11]
 8004916:	7afa      	ldrb	r2, [r7, #11]
 8004918:	4957      	ldr	r1, [pc, #348]	@ (8004a78 <vl53l8cx_get_result+0x1c8>)
 800491a:	440b      	add	r3, r1
 800491c:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 8004920:	6839      	ldr	r1, [r7, #0]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	3304      	adds	r3, #4
 800492e:	4602      	mov	r2, r0
 8004930:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8004932:	2300      	movs	r3, #0
 8004934:	72bb      	strb	r3, [r7, #10]
 8004936:	e087      	b.n	8004a48 <vl53l8cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8004938:	7afa      	ldrb	r2, [r7, #11]
 800493a:	7abb      	ldrb	r3, [r7, #10]
 800493c:	4413      	add	r3, r2
 800493e:	4a4e      	ldr	r2, [pc, #312]	@ (8004a78 <vl53l8cx_get_result+0x1c8>)
 8004940:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800494c:	7afa      	ldrb	r2, [r7, #11]
 800494e:	7ab8      	ldrb	r0, [r7, #10]
 8004950:	461c      	mov	r4, r3
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	4403      	add	r3, r0
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3adc 	ldrb.w	r3, [r3, #2780]	@ 0xadc
 8004968:	2b01      	cmp	r3, #1
 800496a:	d116      	bne.n	800499a <vl53l8cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 800496c:	7afb      	ldrb	r3, [r7, #11]
 800496e:	4a42      	ldr	r2, [pc, #264]	@ (8004a78 <vl53l8cx_get_result+0x1c8>)
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	7afa      	ldrb	r2, [r7, #11]
 8004978:	7ab8      	ldrb	r0, [r7, #10]
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	4403      	add	r3, r0
 800498c:	3302      	adds	r3, #2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	3308      	adds	r3, #8
 8004994:	edc3 7a00 	vstr	s15, [r3]
 8004998:	e00d      	b.n	80049b6 <vl53l8cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800499a:	7afa      	ldrb	r2, [r7, #11]
 800499c:	7ab8      	ldrb	r0, [r7, #10]
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	4403      	add	r3, r0
 80049a8:	3302      	adds	r3, #2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	3308      	adds	r3, #8
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3add 	ldrb.w	r3, [r3, #2781]	@ 0xadd
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d119      	bne.n	80049f4 <vl53l8cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80049c0:	7afa      	ldrb	r2, [r7, #11]
 80049c2:	7abb      	ldrb	r3, [r7, #10]
 80049c4:	4413      	add	r3, r2
 80049c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004a78 <vl53l8cx_get_result+0x1c8>)
 80049c8:	3390      	adds	r3, #144	@ 0x90
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 80049d0:	7afa      	ldrb	r2, [r7, #11]
 80049d2:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	4403      	add	r3, r0
 80049e6:	3304      	adds	r3, #4
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	3304      	adds	r3, #4
 80049ee:	edc3 7a00 	vstr	s15, [r3]
 80049f2:	e00d      	b.n	8004a10 <vl53l8cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80049f4:	7afa      	ldrb	r2, [r7, #11]
 80049f6:	7ab8      	ldrb	r0, [r7, #10]
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	4403      	add	r3, r0
 8004a02:	3304      	adds	r3, #4
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	3304      	adds	r3, #4
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8004a10:	7afa      	ldrb	r2, [r7, #11]
 8004a12:	7abb      	ldrb	r3, [r7, #10]
 8004a14:	4413      	add	r3, r2
 8004a16:	4a18      	ldr	r2, [pc, #96]	@ (8004a78 <vl53l8cx_get_result+0x1c8>)
 8004a18:	4413      	add	r3, r2
 8004a1a:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 8004a1e:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 8004a20:	7a7b      	ldrb	r3, [r7, #9]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f82a 	bl	8004a7c <vl53l8cx_map_target_status>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	7afa      	ldrb	r2, [r7, #11]
 8004a2c:	7ab8      	ldrb	r0, [r7, #10]
 8004a2e:	461c      	mov	r4, r3
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	4403      	add	r3, r0
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8004a42:	7abb      	ldrb	r3, [r7, #10]
 8004a44:	3301      	adds	r3, #1
 8004a46:	72bb      	strb	r3, [r7, #10]
 8004a48:	7afb      	ldrb	r3, [r7, #11]
 8004a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8004a78 <vl53l8cx_get_result+0x1c8>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8004a52:	7aba      	ldrb	r2, [r7, #10]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	f4ff af6f 	bcc.w	8004938 <vl53l8cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 8004a5a:	7afb      	ldrb	r3, [r7, #11]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	72fb      	strb	r3, [r7, #11]
 8004a60:	7a3b      	ldrb	r3, [r7, #8]
 8004a62:	7afa      	ldrb	r2, [r7, #11]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	f4ff af55 	bcc.w	8004914 <vl53l8cx_get_result+0x64>
      }
    }

    ret = VL53L8CX_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd90      	pop	{r4, r7, pc}
 8004a78:	20002668 	.word	0x20002668

08004a7c <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	d002      	beq.n	8004a92 <vl53l8cx_map_target_status+0x16>
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2b09      	cmp	r3, #9
 8004a90:	d102      	bne.n	8004a98 <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	e007      	b.n	8004aa8 <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 8004a9e:	23ff      	movs	r3, #255	@ 0xff
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e001      	b.n	8004aa8 <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8004ac2:	4b16      	ldr	r3, [pc, #88]	@ (8004b1c <BSP_LED_Init+0x64>)
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac6:	4a15      	ldr	r2, [pc, #84]	@ (8004b1c <BSP_LED_Init+0x64>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ace:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <BSP_LED_Init+0x64>)
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8004ada:	2320      	movs	r3, #32
 8004adc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	4a0c      	ldr	r2, [pc, #48]	@ (8004b20 <BSP_LED_Init+0x68>)
 8004aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af2:	f107 020c 	add.w	r2, r7, #12
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fb25 	bl	8005148 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	4a07      	ldr	r2, [pc, #28]	@ (8004b20 <BSP_LED_Init+0x68>)
 8004b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b06:	2120      	movs	r1, #32
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fd80 	bl	8005610 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	2000003c 	.word	0x2000003c

08004b24 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	460a      	mov	r2, r1
 8004b2e:	71fb      	strb	r3, [r7, #7]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8004b34:	4b2c      	ldr	r3, [pc, #176]	@ (8004be8 <BSP_PB_Init+0xc4>)
 8004b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b38:	4a2b      	ldr	r2, [pc, #172]	@ (8004be8 <BSP_PB_Init+0xc4>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b40:	4b29      	ldr	r3, [pc, #164]	@ (8004be8 <BSP_PB_Init+0xc4>)
 8004b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b50:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8004b52:	2302      	movs	r3, #2
 8004b54:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b56:	2302      	movs	r3, #2
 8004b58:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8004b5a:	79bb      	ldrb	r3, [r7, #6]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10c      	bne.n	8004b7a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	4a21      	ldr	r2, [pc, #132]	@ (8004bec <BSP_PB_Init+0xc8>)
 8004b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6c:	f107 020c 	add.w	r2, r7, #12
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fae8 	bl	8005148 <HAL_GPIO_Init>
 8004b78:	e031      	b.n	8004bde <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004b7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b7e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	4a1a      	ldr	r2, [pc, #104]	@ (8004bec <BSP_PB_Init+0xc8>)
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	f107 020c 	add.w	r2, r7, #12
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fada 	bl	8005148 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4a15      	ldr	r2, [pc, #84]	@ (8004bf0 <BSP_PB_Init+0xcc>)
 8004b9a:	441a      	add	r2, r3
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	4915      	ldr	r1, [pc, #84]	@ (8004bf4 <BSP_PB_Init+0xd0>)
 8004ba0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f000 faba 	bl	8005120 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8004bf0 <BSP_PB_Init+0xcc>)
 8004bb2:	1898      	adds	r0, r3, r2
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	4a10      	ldr	r2, [pc, #64]	@ (8004bf8 <BSP_PB_Init+0xd4>)
 8004bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f000 fa91 	bl	80050e6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004bc4:	2028      	movs	r0, #40	@ 0x28
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8004bfc <BSP_PB_Init+0xd8>)
 8004bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f000 fa54 	bl	800507e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004bd6:	2328      	movs	r3, #40	@ 0x28
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fa6a 	bl	80050b2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	20000040 	.word	0x20000040
 8004bf0:	20002bb8 	.word	0x20002bb8
 8004bf4:	080206f4 	.word	0x080206f4
 8004bf8:	20000048 	.word	0x20000048
 8004bfc:	2000004c 	.word	0x2000004c

08004c00 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d903      	bls.n	8004c1e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004c16:	f06f 0301 	mvn.w	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	e018      	b.n	8004c50 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	2294      	movs	r2, #148	@ 0x94
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	4a0d      	ldr	r2, [pc, #52]	@ (8004c5c <BSP_COM_Init+0x5c>)
 8004c28:	4413      	add	r3, r2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 f86e 	bl	8004d0c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	2294      	movs	r2, #148	@ 0x94
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	4a08      	ldr	r2, [pc, #32]	@ (8004c5c <BSP_COM_Init+0x5c>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f80e 	bl	8004c60 <MX_LPUART1_Init>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8004c4a:	f06f 0303 	mvn.w	r3, #3
 8004c4e:	e000      	b.n	8004c52 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8004c50:	68fb      	ldr	r3, [r7, #12]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20002bc0 	.word	0x20002bc0

08004c60 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8004c6a:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <MX_LPUART1_Init+0x60>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	220c      	movs	r2, #12
 8004c7e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	895b      	ldrh	r3, [r3, #10]
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	891b      	ldrh	r3, [r3, #8]
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	899b      	ldrh	r3, [r3, #12]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004cac:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f002 fb7c 	bl	80073ac <HAL_UART_Init>
 8004cb4:	4603      	mov	r3, r0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000044 	.word	0x20000044

08004cc4 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8004ccc:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <__io_putchar+0x30>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2394      	movs	r3, #148	@ 0x94
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
 8004cd8:	4a07      	ldr	r2, [pc, #28]	@ (8004cf8 <__io_putchar+0x34>)
 8004cda:	1898      	adds	r0, r3, r2
 8004cdc:	1d39      	adds	r1, r7, #4
 8004cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f002 fbbc 	bl	8007460 <HAL_UART_Transmit>
  return ch;
 8004ce8:	687b      	ldr	r3, [r7, #4]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20002c54 	.word	0x20002c54
 8004cf8:	20002bc0 	.word	0x20002bc0

08004cfc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004d00:	2000      	movs	r0, #0
 8004d02:	f003 fa53 	bl	80081ac <BSP_PB_Callback>
}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	@ 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004d14:	4b22      	ldr	r3, [pc, #136]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d18:	4a21      	ldr	r2, [pc, #132]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d20:	4b1f      	ldr	r3, [pc, #124]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d30:	4a1b      	ldr	r2, [pc, #108]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d38:	4b19      	ldr	r3, [pc, #100]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004d44:	4b16      	ldr	r3, [pc, #88]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	4a15      	ldr	r2, [pc, #84]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004d50:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <COM1_MspInit+0x94>)
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004d60:	2302      	movs	r3, #2
 8004d62:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004d64:	2302      	movs	r3, #2
 8004d66:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8004d6c:	230c      	movs	r3, #12
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004d70:	f107 0314 	add.w	r3, r7, #20
 8004d74:	4619      	mov	r1, r3
 8004d76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d7a:	f000 f9e5 	bl	8005148 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8004d7e:	2308      	movs	r3, #8
 8004d80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004d82:	2302      	movs	r3, #2
 8004d84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8004d86:	230c      	movs	r3, #12
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8004d8a:	f107 0314 	add.w	r3, r7, #20
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d94:	f000 f9d8 	bl	8005148 <HAL_GPIO_Init>
}
 8004d98:	bf00      	nop
 8004d9a:	3728      	adds	r7, #40	@ 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000

08004da4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dae:	2003      	movs	r0, #3
 8004db0:	f000 f95a 	bl	8005068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004db4:	2000      	movs	r0, #0
 8004db6:	f000 f80d 	bl	8004dd4 <HAL_InitTick>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	71fb      	strb	r3, [r7, #7]
 8004dc4:	e001      	b.n	8004dca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004dc6:	f7fc f9c3 	bl	8001150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004dca:	79fb      	ldrb	r3, [r7, #7]

}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004de0:	4b16      	ldr	r3, [pc, #88]	@ (8004e3c <HAL_InitTick+0x68>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d022      	beq.n	8004e2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004de8:	4b15      	ldr	r3, [pc, #84]	@ (8004e40 <HAL_InitTick+0x6c>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b13      	ldr	r3, [pc, #76]	@ (8004e3c <HAL_InitTick+0x68>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f966 	bl	80050ce <HAL_SYSTICK_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b0f      	cmp	r3, #15
 8004e0c:	d809      	bhi.n	8004e22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	f000 f932 	bl	800507e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <HAL_InitTick+0x70>)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e007      	b.n	8004e32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e004      	b.n	8004e32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
 8004e2c:	e001      	b.n	8004e32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000054 	.word	0x20000054
 8004e40:	20000000 	.word	0x20000000
 8004e44:	20000050 	.word	0x20000050

08004e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <HAL_IncTick+0x1c>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <HAL_IncTick+0x20>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4413      	add	r3, r2
 8004e56:	4a03      	ldr	r2, [pc, #12]	@ (8004e64 <HAL_IncTick+0x1c>)
 8004e58:	6013      	str	r3, [r2, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	20002c58 	.word	0x20002c58
 8004e68:	20000054 	.word	0x20000054

08004e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e70:	4b03      	ldr	r3, [pc, #12]	@ (8004e80 <HAL_GetTick+0x14>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20002c58 	.word	0x20002c58

08004e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e8c:	f7ff ffee 	bl	8004e6c <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d004      	beq.n	8004ea8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <HAL_Delay+0x40>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ea8:	bf00      	nop
 8004eaa:	f7ff ffdf 	bl	8004e6c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d8f7      	bhi.n	8004eaa <HAL_Delay+0x26>
  {
  }
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000054 	.word	0x20000054

08004ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	60d3      	str	r3, [r2, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f14:	4b04      	ldr	r3, [pc, #16]	@ (8004f28 <__NVIC_GetPriorityGrouping+0x18>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	f003 0307 	and.w	r3, r3, #7
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db0b      	blt.n	8004f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	4907      	ldr	r1, [pc, #28]	@ (8004f64 <__NVIC_EnableIRQ+0x38>)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	e000e100 	.word	0xe000e100

08004f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	6039      	str	r1, [r7, #0]
 8004f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	db0a      	blt.n	8004f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	490c      	ldr	r1, [pc, #48]	@ (8004fb4 <__NVIC_SetPriority+0x4c>)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	0112      	lsls	r2, r2, #4
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f90:	e00a      	b.n	8004fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4908      	ldr	r1, [pc, #32]	@ (8004fb8 <__NVIC_SetPriority+0x50>)
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	0112      	lsls	r2, r2, #4
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	761a      	strb	r2, [r3, #24]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	e000e100 	.word	0xe000e100
 8004fb8:	e000ed00 	.word	0xe000ed00

08004fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	@ 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f1c3 0307 	rsb	r3, r3, #7
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	bf28      	it	cs
 8004fda:	2304      	movcs	r3, #4
 8004fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2b06      	cmp	r3, #6
 8004fe4:	d902      	bls.n	8004fec <NVIC_EncodePriority+0x30>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3b03      	subs	r3, #3
 8004fea:	e000      	b.n	8004fee <NVIC_EncodePriority+0x32>
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43da      	mvns	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	401a      	ands	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005004:	f04f 31ff 	mov.w	r1, #4294967295
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	43d9      	mvns	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005014:	4313      	orrs	r3, r2
         );
}
 8005016:	4618      	mov	r0, r3
 8005018:	3724      	adds	r7, #36	@ 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005034:	d301      	bcc.n	800503a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005036:	2301      	movs	r3, #1
 8005038:	e00f      	b.n	800505a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800503a:	4a0a      	ldr	r2, [pc, #40]	@ (8005064 <SysTick_Config+0x40>)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005042:	210f      	movs	r1, #15
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	f7ff ff8e 	bl	8004f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <SysTick_Config+0x40>)
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005052:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <SysTick_Config+0x40>)
 8005054:	2207      	movs	r2, #7
 8005056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000e010 	.word	0xe000e010

08005068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff29 	bl	8004ec8 <__NVIC_SetPriorityGrouping>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	4603      	mov	r3, r0
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800508c:	f7ff ff40 	bl	8004f10 <__NVIC_GetPriorityGrouping>
 8005090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	f7ff ff90 	bl	8004fbc <NVIC_EncodePriority>
 800509c:	4602      	mov	r2, r0
 800509e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a2:	4611      	mov	r1, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ff5f 	bl	8004f68 <__NVIC_SetPriority>
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	4603      	mov	r3, r0
 80050ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff ff33 	bl	8004f2c <__NVIC_EnableIRQ>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff ffa4 	bl	8005024 <SysTick_Config>
 80050dc:	4603      	mov	r3, r0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80050e6:	b480      	push	{r7}
 80050e8:	b087      	sub	sp, #28
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	460b      	mov	r3, r1
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80050f8:	7afb      	ldrb	r3, [r7, #11]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	605a      	str	r2, [r3, #4]
      break;
 8005104:	e005      	b.n	8005112 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
      break;
 8005110:	bf00      	nop
  }

  return status;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
}
 8005114:	4618      	mov	r0, r3
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e003      	b.n	800513c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800513a:	2300      	movs	r3, #0
  }
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005156:	e15a      	b.n	800540e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2101      	movs	r1, #1
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 814c 	beq.w	8005408 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d005      	beq.n	8005188 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005184:	2b02      	cmp	r3, #2
 8005186:	d130      	bne.n	80051ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	2203      	movs	r2, #3
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4013      	ands	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051be:	2201      	movs	r2, #1
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 0201 	and.w	r2, r3, #1
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d017      	beq.n	8005226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	2203      	movs	r2, #3
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43db      	mvns	r3, r3
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4013      	ands	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d123      	bne.n	800527a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	08da      	lsrs	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3208      	adds	r2, #8
 800523a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	08da      	lsrs	r2, r3, #3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3208      	adds	r2, #8
 8005274:	6939      	ldr	r1, [r7, #16]
 8005276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 0203 	and.w	r2, r3, #3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80a6 	beq.w	8005408 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052bc:	4b5b      	ldr	r3, [pc, #364]	@ (800542c <HAL_GPIO_Init+0x2e4>)
 80052be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c0:	4a5a      	ldr	r2, [pc, #360]	@ (800542c <HAL_GPIO_Init+0x2e4>)
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80052c8:	4b58      	ldr	r3, [pc, #352]	@ (800542c <HAL_GPIO_Init+0x2e4>)
 80052ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052d4:	4a56      	ldr	r2, [pc, #344]	@ (8005430 <HAL_GPIO_Init+0x2e8>)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	3302      	adds	r3, #2
 80052dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	220f      	movs	r2, #15
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	43db      	mvns	r3, r3
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4013      	ands	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80052fe:	d01f      	beq.n	8005340 <HAL_GPIO_Init+0x1f8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a4c      	ldr	r2, [pc, #304]	@ (8005434 <HAL_GPIO_Init+0x2ec>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d019      	beq.n	800533c <HAL_GPIO_Init+0x1f4>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a4b      	ldr	r2, [pc, #300]	@ (8005438 <HAL_GPIO_Init+0x2f0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_GPIO_Init+0x1f0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a4a      	ldr	r2, [pc, #296]	@ (800543c <HAL_GPIO_Init+0x2f4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00d      	beq.n	8005334 <HAL_GPIO_Init+0x1ec>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a49      	ldr	r2, [pc, #292]	@ (8005440 <HAL_GPIO_Init+0x2f8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <HAL_GPIO_Init+0x1e8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a48      	ldr	r2, [pc, #288]	@ (8005444 <HAL_GPIO_Init+0x2fc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d101      	bne.n	800532c <HAL_GPIO_Init+0x1e4>
 8005328:	2305      	movs	r3, #5
 800532a:	e00a      	b.n	8005342 <HAL_GPIO_Init+0x1fa>
 800532c:	2306      	movs	r3, #6
 800532e:	e008      	b.n	8005342 <HAL_GPIO_Init+0x1fa>
 8005330:	2304      	movs	r3, #4
 8005332:	e006      	b.n	8005342 <HAL_GPIO_Init+0x1fa>
 8005334:	2303      	movs	r3, #3
 8005336:	e004      	b.n	8005342 <HAL_GPIO_Init+0x1fa>
 8005338:	2302      	movs	r3, #2
 800533a:	e002      	b.n	8005342 <HAL_GPIO_Init+0x1fa>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <HAL_GPIO_Init+0x1fa>
 8005340:	2300      	movs	r3, #0
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	f002 0203 	and.w	r2, r2, #3
 8005348:	0092      	lsls	r2, r2, #2
 800534a:	4093      	lsls	r3, r2
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005352:	4937      	ldr	r1, [pc, #220]	@ (8005430 <HAL_GPIO_Init+0x2e8>)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	089b      	lsrs	r3, r3, #2
 8005358:	3302      	adds	r3, #2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005360:	4b39      	ldr	r3, [pc, #228]	@ (8005448 <HAL_GPIO_Init+0x300>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	43db      	mvns	r3, r3
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4013      	ands	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005384:	4a30      	ldr	r2, [pc, #192]	@ (8005448 <HAL_GPIO_Init+0x300>)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800538a:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <HAL_GPIO_Init+0x300>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	43db      	mvns	r3, r3
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4013      	ands	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053ae:	4a26      	ldr	r2, [pc, #152]	@ (8005448 <HAL_GPIO_Init+0x300>)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80053b4:	4b24      	ldr	r3, [pc, #144]	@ (8005448 <HAL_GPIO_Init+0x300>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	43db      	mvns	r3, r3
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4013      	ands	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80053d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005448 <HAL_GPIO_Init+0x300>)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80053de:	4b1a      	ldr	r3, [pc, #104]	@ (8005448 <HAL_GPIO_Init+0x300>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	43db      	mvns	r3, r3
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005402:	4a11      	ldr	r2, [pc, #68]	@ (8005448 <HAL_GPIO_Init+0x300>)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	3301      	adds	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f ae9d 	bne.w	8005158 <HAL_GPIO_Init+0x10>
  }
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40021000 	.word	0x40021000
 8005430:	40010000 	.word	0x40010000
 8005434:	48000400 	.word	0x48000400
 8005438:	48000800 	.word	0x48000800
 800543c:	48000c00 	.word	0x48000c00
 8005440:	48001000 	.word	0x48001000
 8005444:	48001400 	.word	0x48001400
 8005448:	40010400 	.word	0x40010400

0800544c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800545a:	e0bd      	b.n	80055d8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800545c:	2201      	movs	r2, #1
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	4013      	ands	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80b0 	beq.w	80055d2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8005472:	4a60      	ldr	r2, [pc, #384]	@ (80055f4 <HAL_GPIO_DeInit+0x1a8>)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	089b      	lsrs	r3, r3, #2
 8005478:	3302      	adds	r3, #2
 800547a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	220f      	movs	r2, #15
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4013      	ands	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800549a:	d01f      	beq.n	80054dc <HAL_GPIO_DeInit+0x90>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a56      	ldr	r2, [pc, #344]	@ (80055f8 <HAL_GPIO_DeInit+0x1ac>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d019      	beq.n	80054d8 <HAL_GPIO_DeInit+0x8c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a55      	ldr	r2, [pc, #340]	@ (80055fc <HAL_GPIO_DeInit+0x1b0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <HAL_GPIO_DeInit+0x88>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a54      	ldr	r2, [pc, #336]	@ (8005600 <HAL_GPIO_DeInit+0x1b4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00d      	beq.n	80054d0 <HAL_GPIO_DeInit+0x84>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a53      	ldr	r2, [pc, #332]	@ (8005604 <HAL_GPIO_DeInit+0x1b8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <HAL_GPIO_DeInit+0x80>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a52      	ldr	r2, [pc, #328]	@ (8005608 <HAL_GPIO_DeInit+0x1bc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d101      	bne.n	80054c8 <HAL_GPIO_DeInit+0x7c>
 80054c4:	2305      	movs	r3, #5
 80054c6:	e00a      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 80054c8:	2306      	movs	r3, #6
 80054ca:	e008      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 80054cc:	2304      	movs	r3, #4
 80054ce:	e006      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 80054d0:	2303      	movs	r3, #3
 80054d2:	e004      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e002      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 80054dc:	2300      	movs	r3, #0
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	f002 0203 	and.w	r2, r2, #3
 80054e4:	0092      	lsls	r2, r2, #2
 80054e6:	4093      	lsls	r3, r2
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d132      	bne.n	8005554 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80054ee:	4b47      	ldr	r3, [pc, #284]	@ (800560c <HAL_GPIO_DeInit+0x1c0>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	43db      	mvns	r3, r3
 80054f6:	4945      	ldr	r1, [pc, #276]	@ (800560c <HAL_GPIO_DeInit+0x1c0>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80054fc:	4b43      	ldr	r3, [pc, #268]	@ (800560c <HAL_GPIO_DeInit+0x1c0>)
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	43db      	mvns	r3, r3
 8005504:	4941      	ldr	r1, [pc, #260]	@ (800560c <HAL_GPIO_DeInit+0x1c0>)
 8005506:	4013      	ands	r3, r2
 8005508:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800550a:	4b40      	ldr	r3, [pc, #256]	@ (800560c <HAL_GPIO_DeInit+0x1c0>)
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	43db      	mvns	r3, r3
 8005512:	493e      	ldr	r1, [pc, #248]	@ (800560c <HAL_GPIO_DeInit+0x1c0>)
 8005514:	4013      	ands	r3, r2
 8005516:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005518:	4b3c      	ldr	r3, [pc, #240]	@ (800560c <HAL_GPIO_DeInit+0x1c0>)
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	43db      	mvns	r3, r3
 8005520:	493a      	ldr	r1, [pc, #232]	@ (800560c <HAL_GPIO_DeInit+0x1c0>)
 8005522:	4013      	ands	r3, r2
 8005524:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	220f      	movs	r2, #15
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005536:	4a2f      	ldr	r2, [pc, #188]	@ (80055f4 <HAL_GPIO_DeInit+0x1a8>)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	3302      	adds	r3, #2
 800553e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	43da      	mvns	r2, r3
 8005546:	482b      	ldr	r0, [pc, #172]	@ (80055f4 <HAL_GPIO_DeInit+0x1a8>)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	400a      	ands	r2, r1
 800554e:	3302      	adds	r3, #2
 8005550:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	2103      	movs	r1, #3
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	08da      	lsrs	r2, r3, #3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3208      	adds	r2, #8
 8005570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	220f      	movs	r2, #15
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	08d2      	lsrs	r2, r2, #3
 8005588:	4019      	ands	r1, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	2103      	movs	r1, #3
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	401a      	ands	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	2101      	movs	r1, #1
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	fa01 f303 	lsl.w	r3, r1, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	401a      	ands	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	2103      	movs	r1, #3
 80055c6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	401a      	ands	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3301      	adds	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f47f af3b 	bne.w	800545c <HAL_GPIO_DeInit+0x10>
  }
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40010000 	.word	0x40010000
 80055f8:	48000400 	.word	0x48000400
 80055fc:	48000800 	.word	0x48000800
 8005600:	48000c00 	.word	0x48000c00
 8005604:	48001000 	.word	0x48001000
 8005608:	48001400 	.word	0x48001400
 800560c:	40010400 	.word	0x40010400

08005610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
 800561c:	4613      	mov	r3, r2
 800561e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005620:	787b      	ldrb	r3, [r7, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800562c:	e002      	b.n	8005634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800564a:	4b08      	ldr	r3, [pc, #32]	@ (800566c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005656:	4a05      	ldr	r2, [pc, #20]	@ (800566c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	4618      	mov	r0, r3
 8005660:	f002 fdb4 	bl	80081cc <HAL_GPIO_EXTI_Callback>
  }
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40010400 	.word	0x40010400

08005670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e08d      	b.n	800579e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8b4 	bl	8005804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2224      	movs	r2, #36	@ 0x24
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0201 	bic.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80056c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d107      	bne.n	80056ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	e006      	b.n	80056f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80056f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d108      	bne.n	8005712 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800570e:	605a      	str	r2, [r3, #4]
 8005710:	e007      	b.n	8005722 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005720:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6812      	ldr	r2, [r2, #0]
 800572c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005734:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005744:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69d9      	ldr	r1, [r3, #28]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1a      	ldr	r2, [r3, #32]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e021      	b.n	80057fc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2224      	movs	r2, #36	@ 0x24
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f821 	bl	8005818 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	4608      	mov	r0, r1
 8005836:	4611      	mov	r1, r2
 8005838:	461a      	mov	r2, r3
 800583a:	4603      	mov	r3, r0
 800583c:	817b      	strh	r3, [r7, #10]
 800583e:	460b      	mov	r3, r1
 8005840:	813b      	strh	r3, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b20      	cmp	r3, #32
 8005850:	f040 80f9 	bne.w	8005a46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_I2C_Mem_Write+0x34>
 800585a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005866:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0ed      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_I2C_Mem_Write+0x4e>
 8005876:	2302      	movs	r3, #2
 8005878:	e0e6      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005882:	f7ff faf3 	bl	8004e6c <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2319      	movs	r3, #25
 800588e:	2201      	movs	r2, #1
 8005890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fadd 	bl	8005e54 <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0d1      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2221      	movs	r2, #33	@ 0x21
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2240      	movs	r2, #64	@ 0x40
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80058c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058cc:	88f8      	ldrh	r0, [r7, #6]
 80058ce:	893a      	ldrh	r2, [r7, #8]
 80058d0:	8979      	ldrh	r1, [r7, #10]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4603      	mov	r3, r0
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f9ed 	bl	8005cbc <I2C_RequestMemoryWrite>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0a9      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2bff      	cmp	r3, #255	@ 0xff
 80058fc:	d90e      	bls.n	800591c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	22ff      	movs	r2, #255	@ 0xff
 8005902:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005908:	b2da      	uxtb	r2, r3
 800590a:	8979      	ldrh	r1, [r7, #10]
 800590c:	2300      	movs	r3, #0
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fc61 	bl	80061dc <I2C_TransferConfig>
 800591a:	e00f      	b.n	800593c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592a:	b2da      	uxtb	r2, r3
 800592c:	8979      	ldrh	r1, [r7, #10]
 800592e:	2300      	movs	r3, #0
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 fc50 	bl	80061dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fae0 	bl	8005f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e07b      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d034      	beq.n	80059f4 <HAL_I2C_Mem_Write+0x1c8>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d130      	bne.n	80059f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	2200      	movs	r2, #0
 800599a:	2180      	movs	r1, #128	@ 0x80
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fa59 	bl	8005e54 <I2C_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e04d      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2bff      	cmp	r3, #255	@ 0xff
 80059b4:	d90e      	bls.n	80059d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	22ff      	movs	r2, #255	@ 0xff
 80059ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	8979      	ldrh	r1, [r7, #10]
 80059c4:	2300      	movs	r3, #0
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fc05 	bl	80061dc <I2C_TransferConfig>
 80059d2:	e00f      	b.n	80059f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	8979      	ldrh	r1, [r7, #10]
 80059e6:	2300      	movs	r3, #0
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fbf4 	bl	80061dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d19e      	bne.n	800593c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fac6 	bl	8005f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e01a      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2220      	movs	r2, #32
 8005a18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b0a      	ldr	r3, [pc, #40]	@ (8005a50 <HAL_I2C_Mem_Write+0x224>)
 8005a26:	400b      	ands	r3, r1
 8005a28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	fe00e800 	.word	0xfe00e800

08005a54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	817b      	strh	r3, [r7, #10]
 8005a66:	460b      	mov	r3, r1
 8005a68:	813b      	strh	r3, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	f040 80fd 	bne.w	8005c76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_I2C_Mem_Read+0x34>
 8005a82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0f1      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2C_Mem_Read+0x4e>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e0ea      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aaa:	f7ff f9df 	bl	8004e6c <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2319      	movs	r3, #25
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f9c9 	bl	8005e54 <I2C_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0d5      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2222      	movs	r2, #34	@ 0x22
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2240      	movs	r2, #64	@ 0x40
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005af4:	88f8      	ldrh	r0, [r7, #6]
 8005af6:	893a      	ldrh	r2, [r7, #8]
 8005af8:	8979      	ldrh	r1, [r7, #10]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	4603      	mov	r3, r0
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f92d 	bl	8005d64 <I2C_RequestMemoryRead>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0ad      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2bff      	cmp	r3, #255	@ 0xff
 8005b24:	d90e      	bls.n	8005b44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	22ff      	movs	r2, #255	@ 0xff
 8005b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	8979      	ldrh	r1, [r7, #10]
 8005b34:	4b52      	ldr	r3, [pc, #328]	@ (8005c80 <HAL_I2C_Mem_Read+0x22c>)
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fb4d 	bl	80061dc <I2C_TransferConfig>
 8005b42:	e00f      	b.n	8005b64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	8979      	ldrh	r1, [r7, #10]
 8005b56:	4b4a      	ldr	r3, [pc, #296]	@ (8005c80 <HAL_I2C_Mem_Read+0x22c>)
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 fb3c 	bl	80061dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2104      	movs	r1, #4
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f970 	bl	8005e54 <I2C_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e07c      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d034      	beq.n	8005c24 <HAL_I2C_Mem_Read+0x1d0>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d130      	bne.n	8005c24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2180      	movs	r1, #128	@ 0x80
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f941 	bl	8005e54 <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e04d      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2bff      	cmp	r3, #255	@ 0xff
 8005be4:	d90e      	bls.n	8005c04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	22ff      	movs	r2, #255	@ 0xff
 8005bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	8979      	ldrh	r1, [r7, #10]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 faed 	bl	80061dc <I2C_TransferConfig>
 8005c02:	e00f      	b.n	8005c24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	8979      	ldrh	r1, [r7, #10]
 8005c16:	2300      	movs	r3, #0
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fadc 	bl	80061dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d19a      	bne.n	8005b64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f9ae 	bl	8005f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e01a      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2220      	movs	r2, #32
 8005c48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b0b      	ldr	r3, [pc, #44]	@ (8005c84 <HAL_I2C_Mem_Read+0x230>)
 8005c56:	400b      	ands	r3, r1
 8005c58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	80002400 	.word	0x80002400
 8005c84:	fe00e800 	.word	0xfe00e800

08005c88 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c96:	b2db      	uxtb	r3, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	817b      	strh	r3, [r7, #10]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	813b      	strh	r3, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	8979      	ldrh	r1, [r7, #10]
 8005cdc:	4b20      	ldr	r3, [pc, #128]	@ (8005d60 <I2C_RequestMemoryWrite+0xa4>)
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fa79 	bl	80061dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	69b9      	ldr	r1, [r7, #24]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f909 	bl	8005f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e02c      	b.n	8005d58 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d105      	bne.n	8005d10 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d04:	893b      	ldrh	r3, [r7, #8]
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d0e:	e015      	b.n	8005d3c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d10:	893b      	ldrh	r3, [r7, #8]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	69b9      	ldr	r1, [r7, #24]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f8ef 	bl	8005f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e012      	b.n	8005d58 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d32:	893b      	ldrh	r3, [r7, #8]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2200      	movs	r2, #0
 8005d44:	2180      	movs	r1, #128	@ 0x80
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f884 	bl	8005e54 <I2C_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	80002000 	.word	0x80002000

08005d64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	817b      	strh	r3, [r7, #10]
 8005d76:	460b      	mov	r3, r1
 8005d78:	813b      	strh	r3, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	8979      	ldrh	r1, [r7, #10]
 8005d84:	4b20      	ldr	r3, [pc, #128]	@ (8005e08 <I2C_RequestMemoryRead+0xa4>)
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fa26 	bl	80061dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	69b9      	ldr	r1, [r7, #24]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f8b6 	bl	8005f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e02c      	b.n	8005dfe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005da4:	88fb      	ldrh	r3, [r7, #6]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d105      	bne.n	8005db6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005daa:	893b      	ldrh	r3, [r7, #8]
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005db4:	e015      	b.n	8005de2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005db6:	893b      	ldrh	r3, [r7, #8]
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	69b9      	ldr	r1, [r7, #24]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f89c 	bl	8005f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e012      	b.n	8005dfe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd8:	893b      	ldrh	r3, [r7, #8]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2200      	movs	r2, #0
 8005dea:	2140      	movs	r1, #64	@ 0x40
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f831 	bl	8005e54 <I2C_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	80002000 	.word	0x80002000

08005e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d103      	bne.n	8005e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d007      	beq.n	8005e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	619a      	str	r2, [r3, #24]
  }
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e64:	e03b      	b.n	8005ede <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f8d6 	bl	800601c <I2C_IsErrorOccurred>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e041      	b.n	8005efe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d02d      	beq.n	8005ede <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fe fff3 	bl	8004e6c <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d122      	bne.n	8005ede <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d113      	bne.n	8005ede <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eba:	f043 0220 	orr.w	r2, r3, #32
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e00f      	b.n	8005efe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699a      	ldr	r2, [r3, #24]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d0b4      	beq.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f12:	e033      	b.n	8005f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f87f 	bl	800601c <I2C_IsErrorOccurred>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e031      	b.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d025      	beq.n	8005f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f30:	f7fe ff9c 	bl	8004e6c <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d302      	bcc.n	8005f46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11a      	bne.n	8005f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d013      	beq.n	8005f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e007      	b.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d1c4      	bne.n	8005f14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fa0:	e02f      	b.n	8006002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f838 	bl	800601c <I2C_IsErrorOccurred>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e02d      	b.n	8006012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb6:	f7fe ff59 	bl	8004e6c <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d302      	bcc.n	8005fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d11a      	bne.n	8006002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d013      	beq.n	8006002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e007      	b.n	8006012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d1c8      	bne.n	8005fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08a      	sub	sp, #40	@ 0x28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	d068      	beq.n	800611a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2210      	movs	r2, #16
 800604e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006050:	e049      	b.n	80060e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d045      	beq.n	80060e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7fe ff07 	bl	8004e6c <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	d302      	bcc.n	8006070 <I2C_IsErrorOccurred+0x54>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d13a      	bne.n	80060e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800607a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006082:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800608e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006092:	d121      	bne.n	80060d8 <I2C_IsErrorOccurred+0xbc>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800609a:	d01d      	beq.n	80060d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d01a      	beq.n	80060d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80060b2:	f7fe fedb 	bl	8004e6c <HAL_GetTick>
 80060b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b8:	e00e      	b.n	80060d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060ba:	f7fe fed7 	bl	8004e6c <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b19      	cmp	r3, #25
 80060c6:	d907      	bls.n	80060d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	f043 0320 	orr.w	r3, r3, #32
 80060ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80060d6:	e006      	b.n	80060e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d1e9      	bne.n	80060ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d003      	beq.n	80060fc <I2C_IsErrorOccurred+0xe0>
 80060f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0aa      	beq.n	8006052 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2220      	movs	r2, #32
 800610a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	f043 0304 	orr.w	r3, r3, #4
 8006112:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00b      	beq.n	8006144 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800613c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	f043 0308 	orr.w	r3, r3, #8
 8006154:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800615e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	f043 0302 	orr.w	r3, r3, #2
 8006176:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006180:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01c      	beq.n	80061ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff fe3b 	bl	8005e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6859      	ldr	r1, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <I2C_IsErrorOccurred+0x1bc>)
 80061a2:	400b      	ands	r3, r1
 80061a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80061ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3728      	adds	r7, #40	@ 0x28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	fe00e800 	.word	0xfe00e800

080061dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	607b      	str	r3, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	4613      	mov	r3, r2
 80061ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061ee:	897b      	ldrh	r3, [r7, #10]
 80061f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061f4:	7a7b      	ldrb	r3, [r7, #9]
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	4313      	orrs	r3, r2
 8006206:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800620a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	0d5b      	lsrs	r3, r3, #21
 8006216:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800621a:	4b08      	ldr	r3, [pc, #32]	@ (800623c <I2C_TransferConfig+0x60>)
 800621c:	430b      	orrs	r3, r1
 800621e:	43db      	mvns	r3, r3
 8006220:	ea02 0103 	and.w	r1, r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	03ff63ff 	.word	0x03ff63ff

08006240 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b20      	cmp	r3, #32
 8006254:	d138      	bne.n	80062c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006260:	2302      	movs	r3, #2
 8006262:	e032      	b.n	80062ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	@ 0x24
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0201 	bic.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006292:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6819      	ldr	r1, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e000      	b.n	80062ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d139      	bne.n	8006360 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e033      	b.n	8006362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2224      	movs	r2, #36	@ 0x24
 8006306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006328:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	e000      	b.n	8006362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006360:	2302      	movs	r3, #2
  }
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
	...

08006370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d141      	bne.n	8006402 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800637e:	4b4b      	ldr	r3, [pc, #300]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800638a:	d131      	bne.n	80063f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800638c:	4b47      	ldr	r3, [pc, #284]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006392:	4a46      	ldr	r2, [pc, #280]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800639c:	4b43      	ldr	r3, [pc, #268]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063a4:	4a41      	ldr	r2, [pc, #260]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063ac:	4b40      	ldr	r3, [pc, #256]	@ (80064b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2232      	movs	r2, #50	@ 0x32
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	4a3f      	ldr	r2, [pc, #252]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	0c9b      	lsrs	r3, r3, #18
 80063be:	3301      	adds	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063c2:	e002      	b.n	80063ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ca:	4b38      	ldr	r3, [pc, #224]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d102      	bne.n	80063de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f2      	bne.n	80063c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063de:	4b33      	ldr	r3, [pc, #204]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ea:	d158      	bne.n	800649e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e057      	b.n	80064a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063f0:	4b2e      	ldr	r3, [pc, #184]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063f6:	4a2d      	ldr	r2, [pc, #180]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006400:	e04d      	b.n	800649e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006408:	d141      	bne.n	800648e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800640a:	4b28      	ldr	r3, [pc, #160]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006416:	d131      	bne.n	800647c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006418:	4b24      	ldr	r3, [pc, #144]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800641a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800641e:	4a23      	ldr	r2, [pc, #140]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006424:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006428:	4b20      	ldr	r3, [pc, #128]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006430:	4a1e      	ldr	r2, [pc, #120]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006438:	4b1d      	ldr	r3, [pc, #116]	@ (80064b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2232      	movs	r2, #50	@ 0x32
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	4a1c      	ldr	r2, [pc, #112]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	0c9b      	lsrs	r3, r3, #18
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800644e:	e002      	b.n	8006456 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3b01      	subs	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006456:	4b15      	ldr	r3, [pc, #84]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006462:	d102      	bne.n	800646a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f2      	bne.n	8006450 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800646a:	4b10      	ldr	r3, [pc, #64]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006476:	d112      	bne.n	800649e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e011      	b.n	80064a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800647c:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006482:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800648c:	e007      	b.n	800649e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800648e:	4b07      	ldr	r3, [pc, #28]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006496:	4a05      	ldr	r2, [pc, #20]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006498:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800649c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40007000 	.word	0x40007000
 80064b0:	20000000 	.word	0x20000000
 80064b4:	431bde83 	.word	0x431bde83

080064b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064bc:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a04      	ldr	r2, [pc, #16]	@ (80064d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064c6:	6093      	str	r3, [r2, #8]
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40007000 	.word	0x40007000

080064d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e2fe      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d075      	beq.n	80065e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064f6:	4b97      	ldr	r3, [pc, #604]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 030c 	and.w	r3, r3, #12
 80064fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006500:	4b94      	ldr	r3, [pc, #592]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b0c      	cmp	r3, #12
 800650e:	d102      	bne.n	8006516 <HAL_RCC_OscConfig+0x3e>
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2b03      	cmp	r3, #3
 8006514:	d002      	beq.n	800651c <HAL_RCC_OscConfig+0x44>
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d10b      	bne.n	8006534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651c:	4b8d      	ldr	r3, [pc, #564]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d05b      	beq.n	80065e0 <HAL_RCC_OscConfig+0x108>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d157      	bne.n	80065e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e2d9      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653c:	d106      	bne.n	800654c <HAL_RCC_OscConfig+0x74>
 800653e:	4b85      	ldr	r3, [pc, #532]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a84      	ldr	r2, [pc, #528]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e01d      	b.n	8006588 <HAL_RCC_OscConfig+0xb0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006554:	d10c      	bne.n	8006570 <HAL_RCC_OscConfig+0x98>
 8006556:	4b7f      	ldr	r3, [pc, #508]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7e      	ldr	r2, [pc, #504]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800655c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	4b7c      	ldr	r3, [pc, #496]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a7b      	ldr	r2, [pc, #492]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	e00b      	b.n	8006588 <HAL_RCC_OscConfig+0xb0>
 8006570:	4b78      	ldr	r3, [pc, #480]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a77      	ldr	r2, [pc, #476]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	4b75      	ldr	r3, [pc, #468]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a74      	ldr	r2, [pc, #464]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fe fc6c 	bl	8004e6c <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7fe fc68 	bl	8004e6c <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	@ 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e29e      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCC_OscConfig+0xc0>
 80065b6:	e014      	b.n	80065e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fe fc58 	bl	8004e6c <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c0:	f7fe fc54 	bl	8004e6c <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b64      	cmp	r3, #100	@ 0x64
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e28a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065d2:	4b60      	ldr	r3, [pc, #384]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0xe8>
 80065de:	e000      	b.n	80065e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d075      	beq.n	80066da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ee:	4b59      	ldr	r3, [pc, #356]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 030c 	and.w	r3, r3, #12
 80065f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065f8:	4b56      	ldr	r3, [pc, #344]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b0c      	cmp	r3, #12
 8006606:	d102      	bne.n	800660e <HAL_RCC_OscConfig+0x136>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b02      	cmp	r3, #2
 800660c:	d002      	beq.n	8006614 <HAL_RCC_OscConfig+0x13c>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b04      	cmp	r3, #4
 8006612:	d11f      	bne.n	8006654 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006614:	4b4f      	ldr	r3, [pc, #316]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_RCC_OscConfig+0x154>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e25d      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800662c:	4b49      	ldr	r3, [pc, #292]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	061b      	lsls	r3, r3, #24
 800663a:	4946      	ldr	r1, [pc, #280]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800663c:	4313      	orrs	r3, r2
 800663e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006640:	4b45      	ldr	r3, [pc, #276]	@ (8006758 <HAL_RCC_OscConfig+0x280>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fbc5 	bl	8004dd4 <HAL_InitTick>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d043      	beq.n	80066d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e249      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d023      	beq.n	80066a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800665c:	4b3d      	ldr	r3, [pc, #244]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a3c      	ldr	r2, [pc, #240]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006668:	f7fe fc00 	bl	8004e6c <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006670:	f7fe fbfc 	bl	8004e6c <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e232      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006682:	4b34      	ldr	r3, [pc, #208]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668e:	4b31      	ldr	r3, [pc, #196]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	492d      	ldr	r1, [pc, #180]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	604b      	str	r3, [r1, #4]
 80066a2:	e01a      	b.n	80066da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80066aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b0:	f7fe fbdc 	bl	8004e6c <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b8:	f7fe fbd8 	bl	8004e6c <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e20e      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066ca:	4b22      	ldr	r3, [pc, #136]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f0      	bne.n	80066b8 <HAL_RCC_OscConfig+0x1e0>
 80066d6:	e000      	b.n	80066da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d041      	beq.n	800676a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01c      	beq.n	8006728 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ee:	4b19      	ldr	r3, [pc, #100]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80066f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f4:	4a17      	ldr	r2, [pc, #92]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fe:	f7fe fbb5 	bl	8004e6c <HAL_GetTick>
 8006702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006704:	e008      	b.n	8006718 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006706:	f7fe fbb1 	bl	8004e6c <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d901      	bls.n	8006718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e1e7      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006718:	4b0e      	ldr	r3, [pc, #56]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800671a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0ef      	beq.n	8006706 <HAL_RCC_OscConfig+0x22e>
 8006726:	e020      	b.n	800676a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006728:	4b0a      	ldr	r3, [pc, #40]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 800672a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800672e:	4a09      	ldr	r2, [pc, #36]	@ (8006754 <HAL_RCC_OscConfig+0x27c>)
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fe fb98 	bl	8004e6c <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800673e:	e00d      	b.n	800675c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006740:	f7fe fb94 	bl	8004e6c <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d906      	bls.n	800675c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e1ca      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000
 8006758:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800675c:	4b8c      	ldr	r3, [pc, #560]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 800675e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1ea      	bne.n	8006740 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80a6 	beq.w	80068c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006778:	2300      	movs	r3, #0
 800677a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800677c:	4b84      	ldr	r3, [pc, #528]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 800677e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_RCC_OscConfig+0x2b4>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <HAL_RCC_OscConfig+0x2b6>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00d      	beq.n	80067ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006792:	4b7f      	ldr	r3, [pc, #508]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006796:	4a7e      	ldr	r2, [pc, #504]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800679c:	6593      	str	r3, [r2, #88]	@ 0x58
 800679e:	4b7c      	ldr	r3, [pc, #496]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80067aa:	2301      	movs	r3, #1
 80067ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ae:	4b79      	ldr	r3, [pc, #484]	@ (8006994 <HAL_RCC_OscConfig+0x4bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d118      	bne.n	80067ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ba:	4b76      	ldr	r3, [pc, #472]	@ (8006994 <HAL_RCC_OscConfig+0x4bc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a75      	ldr	r2, [pc, #468]	@ (8006994 <HAL_RCC_OscConfig+0x4bc>)
 80067c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067c6:	f7fe fb51 	bl	8004e6c <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ce:	f7fe fb4d 	bl	8004e6c <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e183      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006994 <HAL_RCC_OscConfig+0x4bc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d108      	bne.n	8006806 <HAL_RCC_OscConfig+0x32e>
 80067f4:	4b66      	ldr	r3, [pc, #408]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fa:	4a65      	ldr	r2, [pc, #404]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 80067fc:	f043 0301 	orr.w	r3, r3, #1
 8006800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006804:	e024      	b.n	8006850 <HAL_RCC_OscConfig+0x378>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b05      	cmp	r3, #5
 800680c:	d110      	bne.n	8006830 <HAL_RCC_OscConfig+0x358>
 800680e:	4b60      	ldr	r3, [pc, #384]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006814:	4a5e      	ldr	r2, [pc, #376]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006816:	f043 0304 	orr.w	r3, r3, #4
 800681a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800681e:	4b5c      	ldr	r3, [pc, #368]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006824:	4a5a      	ldr	r2, [pc, #360]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800682e:	e00f      	b.n	8006850 <HAL_RCC_OscConfig+0x378>
 8006830:	4b57      	ldr	r3, [pc, #348]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006836:	4a56      	ldr	r2, [pc, #344]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006838:	f023 0301 	bic.w	r3, r3, #1
 800683c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006840:	4b53      	ldr	r3, [pc, #332]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006846:	4a52      	ldr	r2, [pc, #328]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006848:	f023 0304 	bic.w	r3, r3, #4
 800684c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d016      	beq.n	8006886 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006858:	f7fe fb08 	bl	8004e6c <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800685e:	e00a      	b.n	8006876 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006860:	f7fe fb04 	bl	8004e6c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686e:	4293      	cmp	r3, r2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e138      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006876:	4b46      	ldr	r3, [pc, #280]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ed      	beq.n	8006860 <HAL_RCC_OscConfig+0x388>
 8006884:	e015      	b.n	80068b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006886:	f7fe faf1 	bl	8004e6c <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800688c:	e00a      	b.n	80068a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800688e:	f7fe faed 	bl	8004e6c <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800689c:	4293      	cmp	r3, r2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e121      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1ed      	bne.n	800688e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068b2:	7ffb      	ldrb	r3, [r7, #31]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d105      	bne.n	80068c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b8:	4b35      	ldr	r3, [pc, #212]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 80068ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068bc:	4a34      	ldr	r2, [pc, #208]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 80068be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03c      	beq.n	800694a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01c      	beq.n	8006912 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 80068da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068de:	4a2c      	ldr	r2, [pc, #176]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 80068e0:	f043 0301 	orr.w	r3, r3, #1
 80068e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e8:	f7fe fac0 	bl	8004e6c <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068f0:	f7fe fabc 	bl	8004e6c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e0f2      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006902:	4b23      	ldr	r3, [pc, #140]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006904:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0ef      	beq.n	80068f0 <HAL_RCC_OscConfig+0x418>
 8006910:	e01b      	b.n	800694a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006912:	4b1f      	ldr	r3, [pc, #124]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006914:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006918:	4a1d      	ldr	r2, [pc, #116]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 800691a:	f023 0301 	bic.w	r3, r3, #1
 800691e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006922:	f7fe faa3 	bl	8004e6c <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800692a:	f7fe fa9f 	bl	8004e6c <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e0d5      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800693c:	4b14      	ldr	r3, [pc, #80]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 800693e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1ef      	bne.n	800692a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 80c9 	beq.w	8006ae6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006954:	4b0e      	ldr	r3, [pc, #56]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 030c 	and.w	r3, r3, #12
 800695c:	2b0c      	cmp	r3, #12
 800695e:	f000 8083 	beq.w	8006a68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d15e      	bne.n	8006a28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800696a:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a08      	ldr	r2, [pc, #32]	@ (8006990 <HAL_RCC_OscConfig+0x4b8>)
 8006970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006976:	f7fe fa79 	bl	8004e6c <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800697c:	e00c      	b.n	8006998 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800697e:	f7fe fa75 	bl	8004e6c <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d905      	bls.n	8006998 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e0ab      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
 8006990:	40021000 	.word	0x40021000
 8006994:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006998:	4b55      	ldr	r3, [pc, #340]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1ec      	bne.n	800697e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a4:	4b52      	ldr	r3, [pc, #328]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	4b52      	ldr	r3, [pc, #328]	@ (8006af4 <HAL_RCC_OscConfig+0x61c>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6a11      	ldr	r1, [r2, #32]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069b4:	3a01      	subs	r2, #1
 80069b6:	0112      	lsls	r2, r2, #4
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80069be:	0212      	lsls	r2, r2, #8
 80069c0:	4311      	orrs	r1, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069c6:	0852      	lsrs	r2, r2, #1
 80069c8:	3a01      	subs	r2, #1
 80069ca:	0552      	lsls	r2, r2, #21
 80069cc:	4311      	orrs	r1, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069d2:	0852      	lsrs	r2, r2, #1
 80069d4:	3a01      	subs	r2, #1
 80069d6:	0652      	lsls	r2, r2, #25
 80069d8:	4311      	orrs	r1, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069de:	06d2      	lsls	r2, r2, #27
 80069e0:	430a      	orrs	r2, r1
 80069e2:	4943      	ldr	r1, [pc, #268]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e8:	4b41      	ldr	r3, [pc, #260]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a40      	ldr	r2, [pc, #256]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 80069ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069f4:	4b3e      	ldr	r3, [pc, #248]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	4a3d      	ldr	r2, [pc, #244]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 80069fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a00:	f7fe fa34 	bl	8004e6c <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a08:	f7fe fa30 	bl	8004e6c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e066      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a1a:	4b35      	ldr	r3, [pc, #212]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x530>
 8006a26:	e05e      	b.n	8006ae6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a28:	4b31      	ldr	r3, [pc, #196]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a30      	ldr	r2, [pc, #192]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 8006a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a34:	f7fe fa1a 	bl	8004e6c <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a3c:	f7fe fa16 	bl	8004e6c <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e04c      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a4e:	4b28      	ldr	r3, [pc, #160]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f0      	bne.n	8006a3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a5a:	4b25      	ldr	r3, [pc, #148]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	4924      	ldr	r1, [pc, #144]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 8006a60:	4b25      	ldr	r3, [pc, #148]	@ (8006af8 <HAL_RCC_OscConfig+0x620>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	60cb      	str	r3, [r1, #12]
 8006a66:	e03e      	b.n	8006ae6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e039      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a74:	4b1e      	ldr	r3, [pc, #120]	@ (8006af0 <HAL_RCC_OscConfig+0x618>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f003 0203 	and.w	r2, r3, #3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d12c      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	3b01      	subs	r3, #1
 8006a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d123      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d11b      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d113      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac4:	085b      	lsrs	r3, r3, #1
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d109      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	3b01      	subs	r3, #1
 8006adc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d001      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3720      	adds	r7, #32
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40021000 	.word	0x40021000
 8006af4:	019f800c 	.word	0x019f800c
 8006af8:	feeefffc 	.word	0xfeeefffc

08006afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e11e      	b.n	8006d52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b14:	4b91      	ldr	r3, [pc, #580]	@ (8006d5c <HAL_RCC_ClockConfig+0x260>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d910      	bls.n	8006b44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b22:	4b8e      	ldr	r3, [pc, #568]	@ (8006d5c <HAL_RCC_ClockConfig+0x260>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f023 020f 	bic.w	r2, r3, #15
 8006b2a:	498c      	ldr	r1, [pc, #560]	@ (8006d5c <HAL_RCC_ClockConfig+0x260>)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b32:	4b8a      	ldr	r3, [pc, #552]	@ (8006d5c <HAL_RCC_ClockConfig+0x260>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d001      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e106      	b.n	8006d52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d073      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d129      	bne.n	8006bac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b58:	4b81      	ldr	r3, [pc, #516]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e0f4      	b.n	8006d52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b68:	f000 f99e 	bl	8006ea8 <RCC_GetSysClockFreqFromPLLSource>
 8006b6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4a7c      	ldr	r2, [pc, #496]	@ (8006d64 <HAL_RCC_ClockConfig+0x268>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d93f      	bls.n	8006bf6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b76:	4b7a      	ldr	r3, [pc, #488]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d033      	beq.n	8006bf6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d12f      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b96:	4b72      	ldr	r3, [pc, #456]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b9e:	4a70      	ldr	r2, [pc, #448]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ba6:	2380      	movs	r3, #128	@ 0x80
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	e024      	b.n	8006bf6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0c6      	b.n	8006d52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bc4:	4b66      	ldr	r3, [pc, #408]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e0be      	b.n	8006d52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bd4:	f000 f8ce 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8006bd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	4a61      	ldr	r2, [pc, #388]	@ (8006d64 <HAL_RCC_ClockConfig+0x268>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d909      	bls.n	8006bf6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006be2:	4b5f      	ldr	r3, [pc, #380]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bea:	4a5d      	ldr	r2, [pc, #372]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bf2:	2380      	movs	r3, #128	@ 0x80
 8006bf4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f023 0203 	bic.w	r2, r3, #3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4957      	ldr	r1, [pc, #348]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c08:	f7fe f930 	bl	8004e6c <HAL_GetTick>
 8006c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0e:	e00a      	b.n	8006c26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c10:	f7fe f92c 	bl	8004e6c <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e095      	b.n	8006d52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c26:	4b4e      	ldr	r3, [pc, #312]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 020c 	and.w	r2, r3, #12
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d1eb      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d023      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c50:	4b43      	ldr	r3, [pc, #268]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a42      	ldr	r2, [pc, #264]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c68:	4b3d      	ldr	r3, [pc, #244]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c70:	4a3b      	ldr	r2, [pc, #236]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c78:	4b39      	ldr	r3, [pc, #228]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	4936      	ldr	r1, [pc, #216]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	608b      	str	r3, [r1, #8]
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2b80      	cmp	r3, #128	@ 0x80
 8006c90:	d105      	bne.n	8006c9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c92:	4b33      	ldr	r3, [pc, #204]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	4a32      	ldr	r2, [pc, #200]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006c98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d5c <HAL_RCC_ClockConfig+0x260>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d21d      	bcs.n	8006ce8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cac:	4b2b      	ldr	r3, [pc, #172]	@ (8006d5c <HAL_RCC_ClockConfig+0x260>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f023 020f 	bic.w	r2, r3, #15
 8006cb4:	4929      	ldr	r1, [pc, #164]	@ (8006d5c <HAL_RCC_ClockConfig+0x260>)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006cbc:	f7fe f8d6 	bl	8004e6c <HAL_GetTick>
 8006cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc2:	e00a      	b.n	8006cda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc4:	f7fe f8d2 	bl	8004e6c <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e03b      	b.n	8006d52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cda:	4b20      	ldr	r3, [pc, #128]	@ (8006d5c <HAL_RCC_ClockConfig+0x260>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d1ed      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4917      	ldr	r1, [pc, #92]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d12:	4b13      	ldr	r3, [pc, #76]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	490f      	ldr	r1, [pc, #60]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d26:	f000 f825 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <HAL_RCC_ClockConfig+0x264>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	091b      	lsrs	r3, r3, #4
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	490c      	ldr	r1, [pc, #48]	@ (8006d68 <HAL_RCC_ClockConfig+0x26c>)
 8006d38:	5ccb      	ldrb	r3, [r1, r3]
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	4a0a      	ldr	r2, [pc, #40]	@ (8006d6c <HAL_RCC_ClockConfig+0x270>)
 8006d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d46:	4b0a      	ldr	r3, [pc, #40]	@ (8006d70 <HAL_RCC_ClockConfig+0x274>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe f842 	bl	8004dd4 <HAL_InitTick>
 8006d50:	4603      	mov	r3, r0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40022000 	.word	0x40022000
 8006d60:	40021000 	.word	0x40021000
 8006d64:	04c4b400 	.word	0x04c4b400
 8006d68:	0800afe0 	.word	0x0800afe0
 8006d6c:	20000000 	.word	0x20000000
 8006d70:	20000050 	.word	0x20000050

08006d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 030c 	and.w	r3, r3, #12
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d102      	bne.n	8006d8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d86:	4b2a      	ldr	r3, [pc, #168]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	e047      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d8c:	4b27      	ldr	r3, [pc, #156]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 030c 	and.w	r3, r3, #12
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d102      	bne.n	8006d9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d98:	4b26      	ldr	r3, [pc, #152]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	e03e      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d9e:	4b23      	ldr	r3, [pc, #140]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 030c 	and.w	r3, r3, #12
 8006da6:	2b0c      	cmp	r3, #12
 8006da8:	d136      	bne.n	8006e18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006daa:	4b20      	ldr	r3, [pc, #128]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006db4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	091b      	lsrs	r3, r3, #4
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d10c      	bne.n	8006de2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd0:	4a16      	ldr	r2, [pc, #88]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dd2:	68d2      	ldr	r2, [r2, #12]
 8006dd4:	0a12      	lsrs	r2, r2, #8
 8006dd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	617b      	str	r3, [r7, #20]
      break;
 8006de0:	e00c      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006de2:	4a13      	ldr	r2, [pc, #76]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	4a10      	ldr	r2, [pc, #64]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dec:	68d2      	ldr	r2, [r2, #12]
 8006dee:	0a12      	lsrs	r2, r2, #8
 8006df0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006df4:	fb02 f303 	mul.w	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]
      break;
 8006dfa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	0e5b      	lsrs	r3, r3, #25
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	3301      	adds	r3, #1
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	e001      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e1c:	693b      	ldr	r3, [r7, #16]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	00f42400 	.word	0x00f42400
 8006e34:	016e3600 	.word	0x016e3600

08006e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e3c:	4b03      	ldr	r3, [pc, #12]	@ (8006e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000000 	.word	0x20000000

08006e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e54:	f7ff fff0 	bl	8006e38 <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b06      	ldr	r3, [pc, #24]	@ (8006e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4904      	ldr	r1, [pc, #16]	@ (8006e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40021000 	.word	0x40021000
 8006e78:	0800aff0 	.word	0x0800aff0

08006e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e80:	f7ff ffda 	bl	8006e38 <HAL_RCC_GetHCLKFreq>
 8006e84:	4602      	mov	r2, r0
 8006e86:	4b06      	ldr	r3, [pc, #24]	@ (8006ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	0adb      	lsrs	r3, r3, #11
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	4904      	ldr	r1, [pc, #16]	@ (8006ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e92:	5ccb      	ldrb	r3, [r1, r3]
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	0800aff0 	.word	0x0800aff0

08006ea8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006eae:	4b1e      	ldr	r3, [pc, #120]	@ (8006f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	091b      	lsrs	r3, r3, #4
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d10c      	bne.n	8006ee6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ecc:	4a17      	ldr	r2, [pc, #92]	@ (8006f2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed4:	4a14      	ldr	r2, [pc, #80]	@ (8006f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ed6:	68d2      	ldr	r2, [r2, #12]
 8006ed8:	0a12      	lsrs	r2, r2, #8
 8006eda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	617b      	str	r3, [r7, #20]
    break;
 8006ee4:	e00c      	b.n	8006f00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ee6:	4a12      	ldr	r2, [pc, #72]	@ (8006f30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eee:	4a0e      	ldr	r2, [pc, #56]	@ (8006f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ef0:	68d2      	ldr	r2, [r2, #12]
 8006ef2:	0a12      	lsrs	r2, r2, #8
 8006ef4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	617b      	str	r3, [r7, #20]
    break;
 8006efe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f00:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	0e5b      	lsrs	r3, r3, #25
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f1a:	687b      	ldr	r3, [r7, #4]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	016e3600 	.word	0x016e3600
 8006f30:	00f42400 	.word	0x00f42400

08006f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f40:	2300      	movs	r3, #0
 8006f42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8098 	beq.w	8007082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f52:	2300      	movs	r3, #0
 8006f54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f56:	4b43      	ldr	r3, [pc, #268]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f62:	4b40      	ldr	r3, [pc, #256]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f66:	4a3f      	ldr	r2, [pc, #252]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f76:	60bb      	str	r3, [r7, #8]
 8006f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a39      	ldr	r2, [pc, #228]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f8a:	f7fd ff6f 	bl	8004e6c <HAL_GetTick>
 8006f8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f90:	e009      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f92:	f7fd ff6b 	bl	8004e6c <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d902      	bls.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	74fb      	strb	r3, [r7, #19]
        break;
 8006fa4:	e005      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fa6:	4b30      	ldr	r3, [pc, #192]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0ef      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006fb2:	7cfb      	ldrb	r3, [r7, #19]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d159      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d01e      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d019      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fd4:	4b23      	ldr	r3, [pc, #140]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fe0:	4b20      	ldr	r3, [pc, #128]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007000:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d016      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007012:	f7fd ff2b 	bl	8004e6c <HAL_GetTick>
 8007016:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007018:	e00b      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800701a:	f7fd ff27 	bl	8004e6c <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007028:	4293      	cmp	r3, r2
 800702a:	d902      	bls.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	74fb      	strb	r3, [r7, #19]
            break;
 8007030:	e006      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007032:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0ec      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007040:	7cfb      	ldrb	r3, [r7, #19]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10b      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007046:	4b07      	ldr	r3, [pc, #28]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007054:	4903      	ldr	r1, [pc, #12]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800705c:	e008      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800705e:	7cfb      	ldrb	r3, [r7, #19]
 8007060:	74bb      	strb	r3, [r7, #18]
 8007062:	e005      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007064:	40021000 	.word	0x40021000
 8007068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706c:	7cfb      	ldrb	r3, [r7, #19]
 800706e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007070:	7c7b      	ldrb	r3, [r7, #17]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d105      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007076:	4ba7      	ldr	r3, [pc, #668]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707a:	4aa6      	ldr	r2, [pc, #664]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007080:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800708e:	4ba1      	ldr	r3, [pc, #644]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007094:	f023 0203 	bic.w	r2, r3, #3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	499d      	ldr	r1, [pc, #628]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070b0:	4b98      	ldr	r3, [pc, #608]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b6:	f023 020c 	bic.w	r2, r3, #12
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	4995      	ldr	r1, [pc, #596]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070d2:	4b90      	ldr	r3, [pc, #576]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	498c      	ldr	r1, [pc, #560]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070f4:	4b87      	ldr	r3, [pc, #540]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	4984      	ldr	r1, [pc, #528]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007104:	4313      	orrs	r3, r2
 8007106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007116:	4b7f      	ldr	r3, [pc, #508]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	497b      	ldr	r1, [pc, #492]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007138:	4b76      	ldr	r3, [pc, #472]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	4973      	ldr	r1, [pc, #460]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800715a:	4b6e      	ldr	r3, [pc, #440]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800715c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007160:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	496a      	ldr	r1, [pc, #424]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800717c:	4b65      	ldr	r3, [pc, #404]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007182:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	4962      	ldr	r1, [pc, #392]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800718c:	4313      	orrs	r3, r2
 800718e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800719e:	4b5d      	ldr	r3, [pc, #372]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ac:	4959      	ldr	r1, [pc, #356]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071c0:	4b54      	ldr	r3, [pc, #336]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ce:	4951      	ldr	r1, [pc, #324]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d015      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071e2:	4b4c      	ldr	r3, [pc, #304]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	4948      	ldr	r1, [pc, #288]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007200:	d105      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007202:	4b44      	ldr	r3, [pc, #272]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	4a43      	ldr	r2, [pc, #268]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007208:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800720c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007216:	2b00      	cmp	r3, #0
 8007218:	d015      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800721a:	4b3e      	ldr	r3, [pc, #248]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007220:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007228:	493a      	ldr	r1, [pc, #232]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007238:	d105      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800723a:	4b36      	ldr	r3, [pc, #216]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	4a35      	ldr	r2, [pc, #212]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007244:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d015      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007252:	4b30      	ldr	r3, [pc, #192]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007258:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007260:	492c      	ldr	r1, [pc, #176]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007270:	d105      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007272:	4b28      	ldr	r3, [pc, #160]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	4a27      	ldr	r2, [pc, #156]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800727c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d015      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800728a:	4b22      	ldr	r3, [pc, #136]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007290:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	491e      	ldr	r1, [pc, #120]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a8:	d105      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	4a19      	ldr	r2, [pc, #100]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072b4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d015      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072c2:	4b14      	ldr	r3, [pc, #80]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d0:	4910      	ldr	r1, [pc, #64]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e0:	d105      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	4a0b      	ldr	r2, [pc, #44]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d018      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80072fa:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007300:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007308:	4902      	ldr	r1, [pc, #8]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	e001      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007314:	40021000 	.word	0x40021000
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800731e:	d105      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007320:	4b21      	ldr	r3, [pc, #132]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	4a20      	ldr	r2, [pc, #128]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800732a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d015      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007338:	4b1b      	ldr	r3, [pc, #108]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800733a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007346:	4918      	ldr	r1, [pc, #96]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007356:	d105      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007358:	4b13      	ldr	r3, [pc, #76]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4a12      	ldr	r2, [pc, #72]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800735e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007362:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d015      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007370:	4b0d      	ldr	r3, [pc, #52]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007376:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800737e:	490a      	ldr	r1, [pc, #40]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800738a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800738e:	d105      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007390:	4b05      	ldr	r3, [pc, #20]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	4a04      	ldr	r2, [pc, #16]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800739a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800739c:	7cbb      	ldrb	r3, [r7, #18]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40021000 	.word	0x40021000

080073ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e042      	b.n	8007444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f83b 	bl	800744c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2224      	movs	r2, #36	@ 0x24
 80073da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0201 	bic.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fbbc 	bl	8007b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f8bd 	bl	800757c <UART_SetConfig>
 8007402:	4603      	mov	r3, r0
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e01b      	b.n	8007444 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800741a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800742a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0201 	orr.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fc3b 	bl	8007cb8 <UART_CheckIdleState>
 8007442:	4603      	mov	r3, r0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	@ 0x28
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	4613      	mov	r3, r2
 800746e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007476:	2b20      	cmp	r3, #32
 8007478:	d17b      	bne.n	8007572 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <HAL_UART_Transmit+0x26>
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e074      	b.n	8007574 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2221      	movs	r2, #33	@ 0x21
 8007496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800749a:	f7fd fce7 	bl	8004e6c <HAL_GetTick>
 800749e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	88fa      	ldrh	r2, [r7, #6]
 80074ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b8:	d108      	bne.n	80074cc <HAL_UART_Transmit+0x6c>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e003      	b.n	80074d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074d4:	e030      	b.n	8007538 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2200      	movs	r2, #0
 80074de:	2180      	movs	r1, #128	@ 0x80
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fc93 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e03d      	b.n	8007574 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800750c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	3302      	adds	r3, #2
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	e007      	b.n	8007526 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	3301      	adds	r3, #1
 8007524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800753e:	b29b      	uxth	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1c8      	bne.n	80074d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2200      	movs	r2, #0
 800754c:	2140      	movs	r1, #64	@ 0x40
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 fc5c 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e006      	b.n	8007574 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	e000      	b.n	8007574 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
  }
}
 8007574:	4618      	mov	r0, r3
 8007576:	3720      	adds	r7, #32
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800757c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007580:	b08c      	sub	sp, #48	@ 0x30
 8007582:	af00      	add	r7, sp, #0
 8007584:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	431a      	orrs	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	431a      	orrs	r2, r3
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4baa      	ldr	r3, [pc, #680]	@ (8007854 <UART_SetConfig+0x2d8>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075b4:	430b      	orrs	r3, r1
 80075b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a9f      	ldr	r2, [pc, #636]	@ (8007858 <UART_SetConfig+0x2dc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d004      	beq.n	80075e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075e4:	4313      	orrs	r3, r2
 80075e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80075f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	f023 010f 	bic.w	r1, r3, #15
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a90      	ldr	r2, [pc, #576]	@ (800785c <UART_SetConfig+0x2e0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d125      	bne.n	800766c <UART_SetConfig+0xf0>
 8007620:	4b8f      	ldr	r3, [pc, #572]	@ (8007860 <UART_SetConfig+0x2e4>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	2b03      	cmp	r3, #3
 800762c:	d81a      	bhi.n	8007664 <UART_SetConfig+0xe8>
 800762e:	a201      	add	r2, pc, #4	@ (adr r2, 8007634 <UART_SetConfig+0xb8>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007645 	.word	0x08007645
 8007638:	08007655 	.word	0x08007655
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765d 	.word	0x0800765d
 8007644:	2301      	movs	r3, #1
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764a:	e116      	b.n	800787a <UART_SetConfig+0x2fe>
 800764c:	2302      	movs	r3, #2
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007652:	e112      	b.n	800787a <UART_SetConfig+0x2fe>
 8007654:	2304      	movs	r3, #4
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765a:	e10e      	b.n	800787a <UART_SetConfig+0x2fe>
 800765c:	2308      	movs	r3, #8
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007662:	e10a      	b.n	800787a <UART_SetConfig+0x2fe>
 8007664:	2310      	movs	r3, #16
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766a:	e106      	b.n	800787a <UART_SetConfig+0x2fe>
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a7c      	ldr	r2, [pc, #496]	@ (8007864 <UART_SetConfig+0x2e8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d138      	bne.n	80076e8 <UART_SetConfig+0x16c>
 8007676:	4b7a      	ldr	r3, [pc, #488]	@ (8007860 <UART_SetConfig+0x2e4>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767c:	f003 030c 	and.w	r3, r3, #12
 8007680:	2b0c      	cmp	r3, #12
 8007682:	d82d      	bhi.n	80076e0 <UART_SetConfig+0x164>
 8007684:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <UART_SetConfig+0x110>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	080076c1 	.word	0x080076c1
 8007690:	080076e1 	.word	0x080076e1
 8007694:	080076e1 	.word	0x080076e1
 8007698:	080076e1 	.word	0x080076e1
 800769c:	080076d1 	.word	0x080076d1
 80076a0:	080076e1 	.word	0x080076e1
 80076a4:	080076e1 	.word	0x080076e1
 80076a8:	080076e1 	.word	0x080076e1
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076d9 	.word	0x080076d9
 80076c0:	2300      	movs	r3, #0
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c6:	e0d8      	b.n	800787a <UART_SetConfig+0x2fe>
 80076c8:	2302      	movs	r3, #2
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ce:	e0d4      	b.n	800787a <UART_SetConfig+0x2fe>
 80076d0:	2304      	movs	r3, #4
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d6:	e0d0      	b.n	800787a <UART_SetConfig+0x2fe>
 80076d8:	2308      	movs	r3, #8
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076de:	e0cc      	b.n	800787a <UART_SetConfig+0x2fe>
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e6:	e0c8      	b.n	800787a <UART_SetConfig+0x2fe>
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a5e      	ldr	r2, [pc, #376]	@ (8007868 <UART_SetConfig+0x2ec>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d125      	bne.n	800773e <UART_SetConfig+0x1c2>
 80076f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007860 <UART_SetConfig+0x2e4>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076fc:	2b30      	cmp	r3, #48	@ 0x30
 80076fe:	d016      	beq.n	800772e <UART_SetConfig+0x1b2>
 8007700:	2b30      	cmp	r3, #48	@ 0x30
 8007702:	d818      	bhi.n	8007736 <UART_SetConfig+0x1ba>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d00a      	beq.n	800771e <UART_SetConfig+0x1a2>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d814      	bhi.n	8007736 <UART_SetConfig+0x1ba>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <UART_SetConfig+0x19a>
 8007710:	2b10      	cmp	r3, #16
 8007712:	d008      	beq.n	8007726 <UART_SetConfig+0x1aa>
 8007714:	e00f      	b.n	8007736 <UART_SetConfig+0x1ba>
 8007716:	2300      	movs	r3, #0
 8007718:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771c:	e0ad      	b.n	800787a <UART_SetConfig+0x2fe>
 800771e:	2302      	movs	r3, #2
 8007720:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007724:	e0a9      	b.n	800787a <UART_SetConfig+0x2fe>
 8007726:	2304      	movs	r3, #4
 8007728:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772c:	e0a5      	b.n	800787a <UART_SetConfig+0x2fe>
 800772e:	2308      	movs	r3, #8
 8007730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007734:	e0a1      	b.n	800787a <UART_SetConfig+0x2fe>
 8007736:	2310      	movs	r3, #16
 8007738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773c:	e09d      	b.n	800787a <UART_SetConfig+0x2fe>
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a4a      	ldr	r2, [pc, #296]	@ (800786c <UART_SetConfig+0x2f0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d125      	bne.n	8007794 <UART_SetConfig+0x218>
 8007748:	4b45      	ldr	r3, [pc, #276]	@ (8007860 <UART_SetConfig+0x2e4>)
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007752:	2bc0      	cmp	r3, #192	@ 0xc0
 8007754:	d016      	beq.n	8007784 <UART_SetConfig+0x208>
 8007756:	2bc0      	cmp	r3, #192	@ 0xc0
 8007758:	d818      	bhi.n	800778c <UART_SetConfig+0x210>
 800775a:	2b80      	cmp	r3, #128	@ 0x80
 800775c:	d00a      	beq.n	8007774 <UART_SetConfig+0x1f8>
 800775e:	2b80      	cmp	r3, #128	@ 0x80
 8007760:	d814      	bhi.n	800778c <UART_SetConfig+0x210>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <UART_SetConfig+0x1f0>
 8007766:	2b40      	cmp	r3, #64	@ 0x40
 8007768:	d008      	beq.n	800777c <UART_SetConfig+0x200>
 800776a:	e00f      	b.n	800778c <UART_SetConfig+0x210>
 800776c:	2300      	movs	r3, #0
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007772:	e082      	b.n	800787a <UART_SetConfig+0x2fe>
 8007774:	2302      	movs	r3, #2
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777a:	e07e      	b.n	800787a <UART_SetConfig+0x2fe>
 800777c:	2304      	movs	r3, #4
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007782:	e07a      	b.n	800787a <UART_SetConfig+0x2fe>
 8007784:	2308      	movs	r3, #8
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778a:	e076      	b.n	800787a <UART_SetConfig+0x2fe>
 800778c:	2310      	movs	r3, #16
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007792:	e072      	b.n	800787a <UART_SetConfig+0x2fe>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a35      	ldr	r2, [pc, #212]	@ (8007870 <UART_SetConfig+0x2f4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d12a      	bne.n	80077f4 <UART_SetConfig+0x278>
 800779e:	4b30      	ldr	r3, [pc, #192]	@ (8007860 <UART_SetConfig+0x2e4>)
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077ac:	d01a      	beq.n	80077e4 <UART_SetConfig+0x268>
 80077ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b2:	d81b      	bhi.n	80077ec <UART_SetConfig+0x270>
 80077b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b8:	d00c      	beq.n	80077d4 <UART_SetConfig+0x258>
 80077ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077be:	d815      	bhi.n	80077ec <UART_SetConfig+0x270>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <UART_SetConfig+0x250>
 80077c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077c8:	d008      	beq.n	80077dc <UART_SetConfig+0x260>
 80077ca:	e00f      	b.n	80077ec <UART_SetConfig+0x270>
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	e052      	b.n	800787a <UART_SetConfig+0x2fe>
 80077d4:	2302      	movs	r3, #2
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077da:	e04e      	b.n	800787a <UART_SetConfig+0x2fe>
 80077dc:	2304      	movs	r3, #4
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e2:	e04a      	b.n	800787a <UART_SetConfig+0x2fe>
 80077e4:	2308      	movs	r3, #8
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ea:	e046      	b.n	800787a <UART_SetConfig+0x2fe>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f2:	e042      	b.n	800787a <UART_SetConfig+0x2fe>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a17      	ldr	r2, [pc, #92]	@ (8007858 <UART_SetConfig+0x2dc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d13a      	bne.n	8007874 <UART_SetConfig+0x2f8>
 80077fe:	4b18      	ldr	r3, [pc, #96]	@ (8007860 <UART_SetConfig+0x2e4>)
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007804:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007808:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800780c:	d01a      	beq.n	8007844 <UART_SetConfig+0x2c8>
 800780e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007812:	d81b      	bhi.n	800784c <UART_SetConfig+0x2d0>
 8007814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007818:	d00c      	beq.n	8007834 <UART_SetConfig+0x2b8>
 800781a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800781e:	d815      	bhi.n	800784c <UART_SetConfig+0x2d0>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <UART_SetConfig+0x2b0>
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007828:	d008      	beq.n	800783c <UART_SetConfig+0x2c0>
 800782a:	e00f      	b.n	800784c <UART_SetConfig+0x2d0>
 800782c:	2300      	movs	r3, #0
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007832:	e022      	b.n	800787a <UART_SetConfig+0x2fe>
 8007834:	2302      	movs	r3, #2
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800783a:	e01e      	b.n	800787a <UART_SetConfig+0x2fe>
 800783c:	2304      	movs	r3, #4
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007842:	e01a      	b.n	800787a <UART_SetConfig+0x2fe>
 8007844:	2308      	movs	r3, #8
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800784a:	e016      	b.n	800787a <UART_SetConfig+0x2fe>
 800784c:	2310      	movs	r3, #16
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007852:	e012      	b.n	800787a <UART_SetConfig+0x2fe>
 8007854:	cfff69f3 	.word	0xcfff69f3
 8007858:	40008000 	.word	0x40008000
 800785c:	40013800 	.word	0x40013800
 8007860:	40021000 	.word	0x40021000
 8007864:	40004400 	.word	0x40004400
 8007868:	40004800 	.word	0x40004800
 800786c:	40004c00 	.word	0x40004c00
 8007870:	40005000 	.word	0x40005000
 8007874:	2310      	movs	r3, #16
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4aae      	ldr	r2, [pc, #696]	@ (8007b38 <UART_SetConfig+0x5bc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	f040 8097 	bne.w	80079b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007886:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800788a:	2b08      	cmp	r3, #8
 800788c:	d823      	bhi.n	80078d6 <UART_SetConfig+0x35a>
 800788e:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <UART_SetConfig+0x318>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078b9 	.word	0x080078b9
 8007898:	080078d7 	.word	0x080078d7
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	080078d7 	.word	0x080078d7
 80078a4:	080078c7 	.word	0x080078c7
 80078a8:	080078d7 	.word	0x080078d7
 80078ac:	080078d7 	.word	0x080078d7
 80078b0:	080078d7 	.word	0x080078d7
 80078b4:	080078cf 	.word	0x080078cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b8:	f7ff faca 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 80078bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078be:	e010      	b.n	80078e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c0:	4b9e      	ldr	r3, [pc, #632]	@ (8007b3c <UART_SetConfig+0x5c0>)
 80078c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078c4:	e00d      	b.n	80078e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078c6:	f7ff fa55 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 80078ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078cc:	e009      	b.n	80078e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078d4:	e005      	b.n	80078e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8130 	beq.w	8007b4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ee:	4a94      	ldr	r2, [pc, #592]	@ (8007b40 <UART_SetConfig+0x5c4>)
 80078f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	4413      	add	r3, r2
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	429a      	cmp	r2, r3
 800790c:	d305      	bcc.n	800791a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	429a      	cmp	r2, r3
 8007918:	d903      	bls.n	8007922 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007920:	e113      	b.n	8007b4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	2200      	movs	r2, #0
 8007926:	60bb      	str	r3, [r7, #8]
 8007928:	60fa      	str	r2, [r7, #12]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	4a84      	ldr	r2, [pc, #528]	@ (8007b40 <UART_SetConfig+0x5c4>)
 8007930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007934:	b29b      	uxth	r3, r3
 8007936:	2200      	movs	r2, #0
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007940:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007944:	f7f9 f958 	bl	8000bf8 <__aeabi_uldivmod>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4610      	mov	r0, r2
 800794e:	4619      	mov	r1, r3
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	020b      	lsls	r3, r1, #8
 800795a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800795e:	0202      	lsls	r2, r0, #8
 8007960:	6979      	ldr	r1, [r7, #20]
 8007962:	6849      	ldr	r1, [r1, #4]
 8007964:	0849      	lsrs	r1, r1, #1
 8007966:	2000      	movs	r0, #0
 8007968:	460c      	mov	r4, r1
 800796a:	4605      	mov	r5, r0
 800796c:	eb12 0804 	adds.w	r8, r2, r4
 8007970:	eb43 0905 	adc.w	r9, r3, r5
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	469a      	mov	sl, r3
 800797c:	4693      	mov	fp, r2
 800797e:	4652      	mov	r2, sl
 8007980:	465b      	mov	r3, fp
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f9 f937 	bl	8000bf8 <__aeabi_uldivmod>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4613      	mov	r3, r2
 8007990:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007998:	d308      	bcc.n	80079ac <UART_SetConfig+0x430>
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079a0:	d204      	bcs.n	80079ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6a3a      	ldr	r2, [r7, #32]
 80079a8:	60da      	str	r2, [r3, #12]
 80079aa:	e0ce      	b.n	8007b4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079b2:	e0ca      	b.n	8007b4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079bc:	d166      	bne.n	8007a8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80079be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d827      	bhi.n	8007a16 <UART_SetConfig+0x49a>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0x450>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	080079f9 	.word	0x080079f9
 80079d4:	08007a01 	.word	0x08007a01
 80079d8:	08007a17 	.word	0x08007a17
 80079dc:	08007a07 	.word	0x08007a07
 80079e0:	08007a17 	.word	0x08007a17
 80079e4:	08007a17 	.word	0x08007a17
 80079e8:	08007a17 	.word	0x08007a17
 80079ec:	08007a0f 	.word	0x08007a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f0:	f7ff fa2e 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 80079f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079f6:	e014      	b.n	8007a22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f8:	f7ff fa40 	bl	8006e7c <HAL_RCC_GetPCLK2Freq>
 80079fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079fe:	e010      	b.n	8007a22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a00:	4b4e      	ldr	r3, [pc, #312]	@ (8007b3c <UART_SetConfig+0x5c0>)
 8007a02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a04:	e00d      	b.n	8007a22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a06:	f7ff f9b5 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8007a0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a0c:	e009      	b.n	8007a22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a14:	e005      	b.n	8007a22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8090 	beq.w	8007b4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	4a44      	ldr	r2, [pc, #272]	@ (8007b40 <UART_SetConfig+0x5c4>)
 8007a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a34:	461a      	mov	r2, r3
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a3c:	005a      	lsls	r2, r3, #1
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	441a      	add	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	2b0f      	cmp	r3, #15
 8007a54:	d916      	bls.n	8007a84 <UART_SetConfig+0x508>
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5c:	d212      	bcs.n	8007a84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f023 030f 	bic.w	r3, r3, #15
 8007a66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	8bfb      	ldrh	r3, [r7, #30]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	8bfa      	ldrh	r2, [r7, #30]
 8007a80:	60da      	str	r2, [r3, #12]
 8007a82:	e062      	b.n	8007b4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a8a:	e05e      	b.n	8007b4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d828      	bhi.n	8007ae6 <UART_SetConfig+0x56a>
 8007a94:	a201      	add	r2, pc, #4	@ (adr r2, 8007a9c <UART_SetConfig+0x520>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007ae7 	.word	0x08007ae7
 8007aac:	08007ad7 	.word	0x08007ad7
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	08007ae7 	.word	0x08007ae7
 8007ab8:	08007ae7 	.word	0x08007ae7
 8007abc:	08007adf 	.word	0x08007adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac0:	f7ff f9c6 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 8007ac4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ac6:	e014      	b.n	8007af2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac8:	f7ff f9d8 	bl	8006e7c <HAL_RCC_GetPCLK2Freq>
 8007acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ace:	e010      	b.n	8007af2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b3c <UART_SetConfig+0x5c0>)
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ad4:	e00d      	b.n	8007af2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad6:	f7ff f94d 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8007ada:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007adc:	e009      	b.n	8007af2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ae4:	e005      	b.n	8007af2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007af0:	bf00      	nop
    }

    if (pclk != 0U)
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d028      	beq.n	8007b4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afc:	4a10      	ldr	r2, [pc, #64]	@ (8007b40 <UART_SetConfig+0x5c4>)
 8007afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b02:	461a      	mov	r2, r3
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	441a      	add	r2, r3
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	2b0f      	cmp	r3, #15
 8007b20:	d910      	bls.n	8007b44 <UART_SetConfig+0x5c8>
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b28:	d20c      	bcs.n	8007b44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60da      	str	r2, [r3, #12]
 8007b34:	e009      	b.n	8007b4a <UART_SetConfig+0x5ce>
 8007b36:	bf00      	nop
 8007b38:	40008000 	.word	0x40008000
 8007b3c:	00f42400 	.word	0x00f42400
 8007b40:	080206f8 	.word	0x080206f8
      }
      else
      {
        ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2200      	movs	r2, #0
 8007b64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3730      	adds	r7, #48	@ 0x30
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01a      	beq.n	8007c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c72:	d10a      	bne.n	8007c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b098      	sub	sp, #96	@ 0x60
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cc8:	f7fd f8d0 	bl	8004e6c <HAL_GetTick>
 8007ccc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d12f      	bne.n	8007d3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f88e 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d022      	beq.n	8007d3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e063      	b.n	8007e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d149      	bne.n	8007dde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d52:	2200      	movs	r2, #0
 8007d54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f857 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d03c      	beq.n	8007dde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	623b      	str	r3, [r7, #32]
   return(result);
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007db6:	61fa      	str	r2, [r7, #28]
 8007db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	69b9      	ldr	r1, [r7, #24]
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e012      	b.n	8007e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3758      	adds	r7, #88	@ 0x58
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e1c:	e04f      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e24:	d04b      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e26:	f7fd f821 	bl	8004e6c <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e04e      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d037      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b80      	cmp	r3, #128	@ 0x80
 8007e52:	d034      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b40      	cmp	r3, #64	@ 0x40
 8007e58:	d031      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d110      	bne.n	8007e8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f838 	bl	8007ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e029      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e98:	d111      	bne.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f81e 	bl	8007ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e00f      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	bf0c      	ite	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d0a0      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b095      	sub	sp, #84	@ 0x54
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e6      	bne.n	8007eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f36:	f023 0301 	bic.w	r3, r3, #1
 8007f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3308      	adds	r3, #8
 8007f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e3      	bne.n	8007f20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d118      	bne.n	8007f92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f023 0310 	bic.w	r3, r3, #16
 8007f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6979      	ldr	r1, [r7, #20]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e6      	bne.n	8007f60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fa6:	bf00      	nop
 8007fa8:	3754      	adds	r7, #84	@ 0x54
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <MX_TOF_Init>:
uint32_t current_time = 0;  // Stores current time
uint32_t frame_time = 0;  // Stores time taken for one frame
float measured_fps = 0;   // Measured frame rate (Hz)

void MX_TOF_Init(void)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L8A1_SimpleRanging_Init();
 8007fb6:	f000 f809 	bl	8007fcc <MX_53L8A1_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8007fba:	bf00      	nop
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */
	  //current_time = HAL_GetTick();

	      /* polling mode */

	  MX_53L8A1_SimpleRanging_Process();
 8007fc2:	f000 f863 	bl	800808c <MX_53L8A1_SimpleRanging_Process>


  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8007fc6:	bf00      	nop
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <MX_53L8A1_SimpleRanging_Init>:

static void MX_53L8A1_SimpleRanging_Init(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
	COM_InitTypeDef COM_Init;
	COM_Init.BaudRate = 115200;    // Example baud rate
 8007fd2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8007fd6:	603b      	str	r3, [r7, #0]
	COM_Init.WordLength = UART_WORDLENGTH_8B;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	607b      	str	r3, [r7, #4]
	COM_Init.StopBits = UART_STOPBITS_1;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	813b      	strh	r3, [r7, #8]
	COM_Init.Parity = UART_PARITY_NONE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	817b      	strh	r3, [r7, #10]
	//COM_Init.Mode = UART_MODE_TX_RX;
	COM_Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	81bb      	strh	r3, [r7, #12]

	BSP_COM_Init(COM1, &COM_Init);
 8007fe8:	463b      	mov	r3, r7
 8007fea:	4619      	mov	r1, r3
 8007fec:	2000      	movs	r0, #0
 8007fee:	f7fc fe07 	bl	8004c00 <BSP_COM_Init>


  /* Initialize button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	f7fc fd95 	bl	8004b24 <BSP_PB_Init>

  /* Sensor reset */
  HAL_GPIO_WritePin(VL53L8A1_PWR_EN_C_PORT, VL53L8A1_PWR_EN_C_PIN, GPIO_PIN_RESET);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	481d      	ldr	r0, [pc, #116]	@ (8008074 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8008000:	f7fd fb06 	bl	8005610 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8008004:	2002      	movs	r0, #2
 8008006:	f7fc ff3d 	bl	8004e84 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_PWR_EN_C_PORT, VL53L8A1_PWR_EN_C_PIN, GPIO_PIN_SET);
 800800a:	2201      	movs	r2, #1
 800800c:	2101      	movs	r1, #1
 800800e:	4819      	ldr	r0, [pc, #100]	@ (8008074 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8008010:	f7fd fafe 	bl	8005610 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8008014:	2002      	movs	r0, #2
 8008016:	f7fc ff35 	bl	8004e84 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_LPn_C_PORT, VL53L8A1_LPn_C_PIN, GPIO_PIN_RESET);
 800801a:	2200      	movs	r2, #0
 800801c:	2110      	movs	r1, #16
 800801e:	4815      	ldr	r0, [pc, #84]	@ (8008074 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8008020:	f7fd faf6 	bl	8005610 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8008024:	2002      	movs	r0, #2
 8008026:	f7fc ff2d 	bl	8004e84 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_LPn_C_PORT, VL53L8A1_LPn_C_PIN, GPIO_PIN_SET);
 800802a:	2201      	movs	r2, #1
 800802c:	2110      	movs	r1, #16
 800802e:	4811      	ldr	r0, [pc, #68]	@ (8008074 <MX_53L8A1_SimpleRanging_Init+0xa8>)
 8008030:	f7fd faee 	bl	8005610 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8008034:	2002      	movs	r0, #2
 8008036:	f7fc ff25 	bl	8004e84 <HAL_Delay>

  printf("\033[2H\033[2J");
 800803a:	480f      	ldr	r0, [pc, #60]	@ (8008078 <MX_53L8A1_SimpleRanging_Init+0xac>)
 800803c:	f000 fdf4 	bl	8008c28 <iprintf>
  printf("53L8A1 Simple Ranging demo application\n");
 8008040:	480e      	ldr	r0, [pc, #56]	@ (800807c <MX_53L8A1_SimpleRanging_Init+0xb0>)
 8008042:	f000 fe59 	bl	8008cf8 <puts>
  printf("Sensor initialization...\n");
 8008046:	480e      	ldr	r0, [pc, #56]	@ (8008080 <MX_53L8A1_SimpleRanging_Init+0xb4>)
 8008048:	f000 fe56 	bl	8008cf8 <puts>

  status = VL53L8A1_RANGING_SENSOR_Init(VL53L8A1_DEV_CENTER);
 800804c:	2001      	movs	r0, #1
 800804e:	f7f9 fb6a 	bl	8001726 <VL53L8A1_RANGING_SENSOR_Init>
 8008052:	4603      	mov	r3, r0
 8008054:	4a0b      	ldr	r2, [pc, #44]	@ (8008084 <MX_53L8A1_SimpleRanging_Init+0xb8>)
 8008056:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8008058:	4b0a      	ldr	r3, [pc, #40]	@ (8008084 <MX_53L8A1_SimpleRanging_Init+0xb8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <MX_53L8A1_SimpleRanging_Init+0x9e>
  {
    printf("VL53L8A1_RANGING_SENSOR_Init failed\n");
 8008060:	4809      	ldr	r0, [pc, #36]	@ (8008088 <MX_53L8A1_SimpleRanging_Init+0xbc>)
 8008062:	f000 fe49 	bl	8008cf8 <puts>
    while (1);
 8008066:	bf00      	nop
 8008068:	e7fd      	b.n	8008066 <MX_53L8A1_SimpleRanging_Init+0x9a>
  }
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	48000400 	.word	0x48000400
 8008078:	0800acb8 	.word	0x0800acb8
 800807c:	0800acc4 	.word	0x0800acc4
 8008080:	0800acec 	.word	0x0800acec
 8008084:	20002c80 	.word	0x20002c80
 8008088:	0800ad08 	.word	0x0800ad08

0800808c <MX_53L8A1_SimpleRanging_Process>:

static void MX_53L8A1_SimpleRanging_Process(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
  uint32_t Id;
  uint32_t measurement_index = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	607b      	str	r3, [r7, #4]
  VL53L8A1_RANGING_SENSOR_ReadID(VL53L8A1_DEV_CENTER, &Id);
 8008096:	463b      	mov	r3, r7
 8008098:	4619      	mov	r1, r3
 800809a:	2001      	movs	r0, #1
 800809c:	f7f9 fb58 	bl	8001750 <VL53L8A1_RANGING_SENSOR_ReadID>
  printf("Sensor ID: 0x%X\n", Id);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	4619      	mov	r1, r3
 80080a4:	4836      	ldr	r0, [pc, #216]	@ (8008180 <MX_53L8A1_SimpleRanging_Process+0xf4>)
 80080a6:	f000 fdbf 	bl	8008c28 <iprintf>

  VL53L8A1_RANGING_SENSOR_GetCapabilities(VL53L8A1_DEV_CENTER, &Cap);
 80080aa:	4936      	ldr	r1, [pc, #216]	@ (8008184 <MX_53L8A1_SimpleRanging_Process+0xf8>)
 80080ac:	2001      	movs	r0, #1
 80080ae:	f7f9 fb77 	bl	80017a0 <VL53L8A1_RANGING_SENSOR_GetCapabilities>
  printf("Capabilities:\n");
 80080b2:	4835      	ldr	r0, [pc, #212]	@ (8008188 <MX_53L8A1_SimpleRanging_Process+0xfc>)
 80080b4:	f000 fe20 	bl	8008cf8 <puts>
  printf("  Number of Zones: %u\n", Cap.NumberOfZones);
 80080b8:	4b32      	ldr	r3, [pc, #200]	@ (8008184 <MX_53L8A1_SimpleRanging_Process+0xf8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4619      	mov	r1, r3
 80080be:	4833      	ldr	r0, [pc, #204]	@ (800818c <MX_53L8A1_SimpleRanging_Process+0x100>)
 80080c0:	f000 fdb2 	bl	8008c28 <iprintf>
  printf("  Max Targets per Zone: %u\n", Cap.MaxNumberOfTargetsPerZone);
 80080c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008184 <MX_53L8A1_SimpleRanging_Process+0xf8>)
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	4619      	mov	r1, r3
 80080ca:	4831      	ldr	r0, [pc, #196]	@ (8008190 <MX_53L8A1_SimpleRanging_Process+0x104>)
 80080cc:	f000 fdac 	bl	8008c28 <iprintf>
  printf("  Custom ROI: %u\n", Cap.CustomROI);
 80080d0:	4b2c      	ldr	r3, [pc, #176]	@ (8008184 <MX_53L8A1_SimpleRanging_Process+0xf8>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	4619      	mov	r1, r3
 80080d6:	482f      	ldr	r0, [pc, #188]	@ (8008194 <MX_53L8A1_SimpleRanging_Process+0x108>)
 80080d8:	f000 fda6 	bl	8008c28 <iprintf>
  printf("  Threshold Detection: %u\n", Cap.ThresholdDetection);
 80080dc:	4b29      	ldr	r3, [pc, #164]	@ (8008184 <MX_53L8A1_SimpleRanging_Process+0xf8>)
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4619      	mov	r1, r3
 80080e2:	482d      	ldr	r0, [pc, #180]	@ (8008198 <MX_53L8A1_SimpleRanging_Process+0x10c>)
 80080e4:	f000 fda0 	bl	8008c28 <iprintf>


  printf("Sensor ID: 0x%X\n", Id);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	4824      	ldr	r0, [pc, #144]	@ (8008180 <MX_53L8A1_SimpleRanging_Process+0xf4>)
 80080ee:	f000 fd9b 	bl	8008c28 <iprintf>
  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80080f2:	4b2a      	ldr	r3, [pc, #168]	@ (800819c <MX_53L8A1_SimpleRanging_Process+0x110>)
 80080f4:	2203      	movs	r2, #3
 80080f6:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 80080f8:	4b28      	ldr	r3, [pc, #160]	@ (800819c <MX_53L8A1_SimpleRanging_Process+0x110>)
 80080fa:	2214      	movs	r2, #20
 80080fc:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 80080fe:	4b27      	ldr	r3, [pc, #156]	@ (800819c <MX_53L8A1_SimpleRanging_Process+0x110>)
 8008100:	2232      	movs	r2, #50	@ 0x32
 8008102:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8008104:	4b25      	ldr	r3, [pc, #148]	@ (800819c <MX_53L8A1_SimpleRanging_Process+0x110>)
 8008106:	2200      	movs	r2, #0
 8008108:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 800810a:	4b24      	ldr	r3, [pc, #144]	@ (800819c <MX_53L8A1_SimpleRanging_Process+0x110>)
 800810c:	2200      	movs	r2, #0
 800810e:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L8A1_RANGING_SENSOR_ConfigProfile(VL53L8A1_DEV_CENTER, &Profile);
 8008110:	4922      	ldr	r1, [pc, #136]	@ (800819c <MX_53L8A1_SimpleRanging_Process+0x110>)
 8008112:	2001      	movs	r0, #1
 8008114:	f7f9 fb6c 	bl	80017f0 <VL53L8A1_RANGING_SENSOR_ConfigProfile>

  status = VL53L8A1_RANGING_SENSOR_Start(VL53L8A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8008118:	2101      	movs	r1, #1
 800811a:	2001      	movs	r0, #1
 800811c:	f7f9 fb90 	bl	8001840 <VL53L8A1_RANGING_SENSOR_Start>
 8008120:	4603      	mov	r3, r0
 8008122:	4a1f      	ldr	r2, [pc, #124]	@ (80081a0 <MX_53L8A1_SimpleRanging_Process+0x114>)
 8008124:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8008126:	4b1e      	ldr	r3, [pc, #120]	@ (80081a0 <MX_53L8A1_SimpleRanging_Process+0x114>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d004      	beq.n	8008138 <MX_53L8A1_SimpleRanging_Process+0xac>
  {
    printf("VL53L8A1_RANGING_SENSOR_Start failed\n");
 800812e:	481d      	ldr	r0, [pc, #116]	@ (80081a4 <MX_53L8A1_SimpleRanging_Process+0x118>)
 8008130:	f000 fde2 	bl	8008cf8 <puts>
    while (1);
 8008134:	bf00      	nop
 8008136:	e7fd      	b.n	8008134 <MX_53L8A1_SimpleRanging_Process+0xa8>
  }
  printf("It work\n");
 8008138:	481b      	ldr	r0, [pc, #108]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 800813a:	f000 fddd 	bl	8008cf8 <puts>
  printf("It work\n");
 800813e:	481a      	ldr	r0, [pc, #104]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 8008140:	f000 fdda 	bl	8008cf8 <puts>
  printf("It work\n");
 8008144:	4818      	ldr	r0, [pc, #96]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 8008146:	f000 fdd7 	bl	8008cf8 <puts>
  printf("It work\n");
 800814a:	4817      	ldr	r0, [pc, #92]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 800814c:	f000 fdd4 	bl	8008cf8 <puts>
  printf("It work\n");
 8008150:	4815      	ldr	r0, [pc, #84]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 8008152:	f000 fdd1 	bl	8008cf8 <puts>
  printf("It work\n");
 8008156:	4814      	ldr	r0, [pc, #80]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 8008158:	f000 fdce 	bl	8008cf8 <puts>
  printf("It work\n");
 800815c:	4812      	ldr	r0, [pc, #72]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 800815e:	f000 fdcb 	bl	8008cf8 <puts>
  printf("It work\n");
 8008162:	4811      	ldr	r0, [pc, #68]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 8008164:	f000 fdc8 	bl	8008cf8 <puts>
  printf("It work\n");
 8008168:	480f      	ldr	r0, [pc, #60]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 800816a:	f000 fdc5 	bl	8008cf8 <puts>
  printf("It work\n");
 800816e:	480e      	ldr	r0, [pc, #56]	@ (80081a8 <MX_53L8A1_SimpleRanging_Process+0x11c>)
 8008170:	f000 fdc2 	bl	8008cf8 <puts>

  while (0)
 8008174:	bf00      	nop
    //   printf("end time1: %d\n", end_time1);
    //   printf("frame rate: %.2f\n", measured_fps);
      HAL_Delay(POLLING_PERIOD);
  }

}
 8008176:	bf00      	nop
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	0800ad2c 	.word	0x0800ad2c
 8008184:	20002c5c 	.word	0x20002c5c
 8008188:	0800ad40 	.word	0x0800ad40
 800818c:	0800ad50 	.word	0x0800ad50
 8008190:	0800ad68 	.word	0x0800ad68
 8008194:	0800ad84 	.word	0x0800ad84
 8008198:	0800ad98 	.word	0x0800ad98
 800819c:	20002c6c 	.word	0x20002c6c
 80081a0:	20002c80 	.word	0x20002c80
 80081a4:	0800adb4 	.word	0x0800adb4
 80081a8:	0800addc 	.word	0x0800addc

080081ac <BSP_PB_Callback>:
{
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
}

void BSP_PB_Callback(Button_TypeDef Button)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 80081b6:	4b04      	ldr	r3, [pc, #16]	@ (80081c8 <BSP_PB_Callback+0x1c>)
 80081b8:	2201      	movs	r2, #1
 80081ba:	701a      	strb	r2, [r3, #0]
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	20002c84 	.word	0x20002c84

080081cc <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	2b10      	cmp	r3, #16
 80081da:	d102      	bne.n	80081e2 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 80081dc:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <HAL_GPIO_EXTI_Callback+0x24>)
 80081de:	2201      	movs	r2, #1
 80081e0:	701a      	strb	r2, [r3, #0]
  }
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20002c85 	.word	0x20002c85

080081f4 <__cvt>:
 80081f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081f8:	ec57 6b10 	vmov	r6, r7, d0
 80081fc:	2f00      	cmp	r7, #0
 80081fe:	460c      	mov	r4, r1
 8008200:	4619      	mov	r1, r3
 8008202:	463b      	mov	r3, r7
 8008204:	bfbb      	ittet	lt
 8008206:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800820a:	461f      	movlt	r7, r3
 800820c:	2300      	movge	r3, #0
 800820e:	232d      	movlt	r3, #45	@ 0x2d
 8008210:	700b      	strb	r3, [r1, #0]
 8008212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008214:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008218:	4691      	mov	r9, r2
 800821a:	f023 0820 	bic.w	r8, r3, #32
 800821e:	bfbc      	itt	lt
 8008220:	4632      	movlt	r2, r6
 8008222:	4616      	movlt	r6, r2
 8008224:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008228:	d005      	beq.n	8008236 <__cvt+0x42>
 800822a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800822e:	d100      	bne.n	8008232 <__cvt+0x3e>
 8008230:	3401      	adds	r4, #1
 8008232:	2102      	movs	r1, #2
 8008234:	e000      	b.n	8008238 <__cvt+0x44>
 8008236:	2103      	movs	r1, #3
 8008238:	ab03      	add	r3, sp, #12
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	ab02      	add	r3, sp, #8
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	ec47 6b10 	vmov	d0, r6, r7
 8008244:	4653      	mov	r3, sl
 8008246:	4622      	mov	r2, r4
 8008248:	f000 ff4e 	bl	80090e8 <_dtoa_r>
 800824c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008250:	4605      	mov	r5, r0
 8008252:	d119      	bne.n	8008288 <__cvt+0x94>
 8008254:	f019 0f01 	tst.w	r9, #1
 8008258:	d00e      	beq.n	8008278 <__cvt+0x84>
 800825a:	eb00 0904 	add.w	r9, r0, r4
 800825e:	2200      	movs	r2, #0
 8008260:	2300      	movs	r3, #0
 8008262:	4630      	mov	r0, r6
 8008264:	4639      	mov	r1, r7
 8008266:	f7f8 fc57 	bl	8000b18 <__aeabi_dcmpeq>
 800826a:	b108      	cbz	r0, 8008270 <__cvt+0x7c>
 800826c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008270:	2230      	movs	r2, #48	@ 0x30
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	454b      	cmp	r3, r9
 8008276:	d31e      	bcc.n	80082b6 <__cvt+0xc2>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800827c:	1b5b      	subs	r3, r3, r5
 800827e:	4628      	mov	r0, r5
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	b004      	add	sp, #16
 8008284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008288:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800828c:	eb00 0904 	add.w	r9, r0, r4
 8008290:	d1e5      	bne.n	800825e <__cvt+0x6a>
 8008292:	7803      	ldrb	r3, [r0, #0]
 8008294:	2b30      	cmp	r3, #48	@ 0x30
 8008296:	d10a      	bne.n	80082ae <__cvt+0xba>
 8008298:	2200      	movs	r2, #0
 800829a:	2300      	movs	r3, #0
 800829c:	4630      	mov	r0, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	f7f8 fc3a 	bl	8000b18 <__aeabi_dcmpeq>
 80082a4:	b918      	cbnz	r0, 80082ae <__cvt+0xba>
 80082a6:	f1c4 0401 	rsb	r4, r4, #1
 80082aa:	f8ca 4000 	str.w	r4, [sl]
 80082ae:	f8da 3000 	ldr.w	r3, [sl]
 80082b2:	4499      	add	r9, r3
 80082b4:	e7d3      	b.n	800825e <__cvt+0x6a>
 80082b6:	1c59      	adds	r1, r3, #1
 80082b8:	9103      	str	r1, [sp, #12]
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e7d9      	b.n	8008272 <__cvt+0x7e>

080082be <__exponent>:
 80082be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c0:	2900      	cmp	r1, #0
 80082c2:	bfba      	itte	lt
 80082c4:	4249      	neglt	r1, r1
 80082c6:	232d      	movlt	r3, #45	@ 0x2d
 80082c8:	232b      	movge	r3, #43	@ 0x2b
 80082ca:	2909      	cmp	r1, #9
 80082cc:	7002      	strb	r2, [r0, #0]
 80082ce:	7043      	strb	r3, [r0, #1]
 80082d0:	dd29      	ble.n	8008326 <__exponent+0x68>
 80082d2:	f10d 0307 	add.w	r3, sp, #7
 80082d6:	461d      	mov	r5, r3
 80082d8:	270a      	movs	r7, #10
 80082da:	461a      	mov	r2, r3
 80082dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80082e0:	fb07 1416 	mls	r4, r7, r6, r1
 80082e4:	3430      	adds	r4, #48	@ 0x30
 80082e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082ea:	460c      	mov	r4, r1
 80082ec:	2c63      	cmp	r4, #99	@ 0x63
 80082ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80082f2:	4631      	mov	r1, r6
 80082f4:	dcf1      	bgt.n	80082da <__exponent+0x1c>
 80082f6:	3130      	adds	r1, #48	@ 0x30
 80082f8:	1e94      	subs	r4, r2, #2
 80082fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082fe:	1c41      	adds	r1, r0, #1
 8008300:	4623      	mov	r3, r4
 8008302:	42ab      	cmp	r3, r5
 8008304:	d30a      	bcc.n	800831c <__exponent+0x5e>
 8008306:	f10d 0309 	add.w	r3, sp, #9
 800830a:	1a9b      	subs	r3, r3, r2
 800830c:	42ac      	cmp	r4, r5
 800830e:	bf88      	it	hi
 8008310:	2300      	movhi	r3, #0
 8008312:	3302      	adds	r3, #2
 8008314:	4403      	add	r3, r0
 8008316:	1a18      	subs	r0, r3, r0
 8008318:	b003      	add	sp, #12
 800831a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008320:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008324:	e7ed      	b.n	8008302 <__exponent+0x44>
 8008326:	2330      	movs	r3, #48	@ 0x30
 8008328:	3130      	adds	r1, #48	@ 0x30
 800832a:	7083      	strb	r3, [r0, #2]
 800832c:	70c1      	strb	r1, [r0, #3]
 800832e:	1d03      	adds	r3, r0, #4
 8008330:	e7f1      	b.n	8008316 <__exponent+0x58>
	...

08008334 <_printf_float>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	b08d      	sub	sp, #52	@ 0x34
 800833a:	460c      	mov	r4, r1
 800833c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008340:	4616      	mov	r6, r2
 8008342:	461f      	mov	r7, r3
 8008344:	4605      	mov	r5, r0
 8008346:	f000 fdbf 	bl	8008ec8 <_localeconv_r>
 800834a:	6803      	ldr	r3, [r0, #0]
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	4618      	mov	r0, r3
 8008350:	f7f7 ffb6 	bl	80002c0 <strlen>
 8008354:	2300      	movs	r3, #0
 8008356:	930a      	str	r3, [sp, #40]	@ 0x28
 8008358:	f8d8 3000 	ldr.w	r3, [r8]
 800835c:	9005      	str	r0, [sp, #20]
 800835e:	3307      	adds	r3, #7
 8008360:	f023 0307 	bic.w	r3, r3, #7
 8008364:	f103 0208 	add.w	r2, r3, #8
 8008368:	f894 a018 	ldrb.w	sl, [r4, #24]
 800836c:	f8d4 b000 	ldr.w	fp, [r4]
 8008370:	f8c8 2000 	str.w	r2, [r8]
 8008374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008378:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800837c:	9307      	str	r3, [sp, #28]
 800837e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008382:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800838a:	4b9c      	ldr	r3, [pc, #624]	@ (80085fc <_printf_float+0x2c8>)
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	f7f8 fbf4 	bl	8000b7c <__aeabi_dcmpun>
 8008394:	bb70      	cbnz	r0, 80083f4 <_printf_float+0xc0>
 8008396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800839a:	4b98      	ldr	r3, [pc, #608]	@ (80085fc <_printf_float+0x2c8>)
 800839c:	f04f 32ff 	mov.w	r2, #4294967295
 80083a0:	f7f8 fbce 	bl	8000b40 <__aeabi_dcmple>
 80083a4:	bb30      	cbnz	r0, 80083f4 <_printf_float+0xc0>
 80083a6:	2200      	movs	r2, #0
 80083a8:	2300      	movs	r3, #0
 80083aa:	4640      	mov	r0, r8
 80083ac:	4649      	mov	r1, r9
 80083ae:	f7f8 fbbd 	bl	8000b2c <__aeabi_dcmplt>
 80083b2:	b110      	cbz	r0, 80083ba <_printf_float+0x86>
 80083b4:	232d      	movs	r3, #45	@ 0x2d
 80083b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083ba:	4a91      	ldr	r2, [pc, #580]	@ (8008600 <_printf_float+0x2cc>)
 80083bc:	4b91      	ldr	r3, [pc, #580]	@ (8008604 <_printf_float+0x2d0>)
 80083be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083c2:	bf94      	ite	ls
 80083c4:	4690      	movls	r8, r2
 80083c6:	4698      	movhi	r8, r3
 80083c8:	2303      	movs	r3, #3
 80083ca:	6123      	str	r3, [r4, #16]
 80083cc:	f02b 0304 	bic.w	r3, fp, #4
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	f04f 0900 	mov.w	r9, #0
 80083d6:	9700      	str	r7, [sp, #0]
 80083d8:	4633      	mov	r3, r6
 80083da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083dc:	4621      	mov	r1, r4
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 f9d2 	bl	8008788 <_printf_common>
 80083e4:	3001      	adds	r0, #1
 80083e6:	f040 808d 	bne.w	8008504 <_printf_float+0x1d0>
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	b00d      	add	sp, #52	@ 0x34
 80083f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f4:	4642      	mov	r2, r8
 80083f6:	464b      	mov	r3, r9
 80083f8:	4640      	mov	r0, r8
 80083fa:	4649      	mov	r1, r9
 80083fc:	f7f8 fbbe 	bl	8000b7c <__aeabi_dcmpun>
 8008400:	b140      	cbz	r0, 8008414 <_printf_float+0xe0>
 8008402:	464b      	mov	r3, r9
 8008404:	2b00      	cmp	r3, #0
 8008406:	bfbc      	itt	lt
 8008408:	232d      	movlt	r3, #45	@ 0x2d
 800840a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800840e:	4a7e      	ldr	r2, [pc, #504]	@ (8008608 <_printf_float+0x2d4>)
 8008410:	4b7e      	ldr	r3, [pc, #504]	@ (800860c <_printf_float+0x2d8>)
 8008412:	e7d4      	b.n	80083be <_printf_float+0x8a>
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800841a:	9206      	str	r2, [sp, #24]
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	d13b      	bne.n	8008498 <_printf_float+0x164>
 8008420:	2306      	movs	r3, #6
 8008422:	6063      	str	r3, [r4, #4]
 8008424:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008428:	2300      	movs	r3, #0
 800842a:	6022      	str	r2, [r4, #0]
 800842c:	9303      	str	r3, [sp, #12]
 800842e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008430:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008434:	ab09      	add	r3, sp, #36	@ 0x24
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	6861      	ldr	r1, [r4, #4]
 800843a:	ec49 8b10 	vmov	d0, r8, r9
 800843e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008442:	4628      	mov	r0, r5
 8008444:	f7ff fed6 	bl	80081f4 <__cvt>
 8008448:	9b06      	ldr	r3, [sp, #24]
 800844a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800844c:	2b47      	cmp	r3, #71	@ 0x47
 800844e:	4680      	mov	r8, r0
 8008450:	d129      	bne.n	80084a6 <_printf_float+0x172>
 8008452:	1cc8      	adds	r0, r1, #3
 8008454:	db02      	blt.n	800845c <_printf_float+0x128>
 8008456:	6863      	ldr	r3, [r4, #4]
 8008458:	4299      	cmp	r1, r3
 800845a:	dd41      	ble.n	80084e0 <_printf_float+0x1ac>
 800845c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008460:	fa5f fa8a 	uxtb.w	sl, sl
 8008464:	3901      	subs	r1, #1
 8008466:	4652      	mov	r2, sl
 8008468:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800846c:	9109      	str	r1, [sp, #36]	@ 0x24
 800846e:	f7ff ff26 	bl	80082be <__exponent>
 8008472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008474:	1813      	adds	r3, r2, r0
 8008476:	2a01      	cmp	r2, #1
 8008478:	4681      	mov	r9, r0
 800847a:	6123      	str	r3, [r4, #16]
 800847c:	dc02      	bgt.n	8008484 <_printf_float+0x150>
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	07d2      	lsls	r2, r2, #31
 8008482:	d501      	bpl.n	8008488 <_printf_float+0x154>
 8008484:	3301      	adds	r3, #1
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0a2      	beq.n	80083d6 <_printf_float+0xa2>
 8008490:	232d      	movs	r3, #45	@ 0x2d
 8008492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008496:	e79e      	b.n	80083d6 <_printf_float+0xa2>
 8008498:	9a06      	ldr	r2, [sp, #24]
 800849a:	2a47      	cmp	r2, #71	@ 0x47
 800849c:	d1c2      	bne.n	8008424 <_printf_float+0xf0>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1c0      	bne.n	8008424 <_printf_float+0xf0>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e7bd      	b.n	8008422 <_printf_float+0xee>
 80084a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084aa:	d9db      	bls.n	8008464 <_printf_float+0x130>
 80084ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084b0:	d118      	bne.n	80084e4 <_printf_float+0x1b0>
 80084b2:	2900      	cmp	r1, #0
 80084b4:	6863      	ldr	r3, [r4, #4]
 80084b6:	dd0b      	ble.n	80084d0 <_printf_float+0x19c>
 80084b8:	6121      	str	r1, [r4, #16]
 80084ba:	b913      	cbnz	r3, 80084c2 <_printf_float+0x18e>
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	07d0      	lsls	r0, r2, #31
 80084c0:	d502      	bpl.n	80084c8 <_printf_float+0x194>
 80084c2:	3301      	adds	r3, #1
 80084c4:	440b      	add	r3, r1
 80084c6:	6123      	str	r3, [r4, #16]
 80084c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084ca:	f04f 0900 	mov.w	r9, #0
 80084ce:	e7db      	b.n	8008488 <_printf_float+0x154>
 80084d0:	b913      	cbnz	r3, 80084d8 <_printf_float+0x1a4>
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	07d2      	lsls	r2, r2, #31
 80084d6:	d501      	bpl.n	80084dc <_printf_float+0x1a8>
 80084d8:	3302      	adds	r3, #2
 80084da:	e7f4      	b.n	80084c6 <_printf_float+0x192>
 80084dc:	2301      	movs	r3, #1
 80084de:	e7f2      	b.n	80084c6 <_printf_float+0x192>
 80084e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e6:	4299      	cmp	r1, r3
 80084e8:	db05      	blt.n	80084f6 <_printf_float+0x1c2>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	6121      	str	r1, [r4, #16]
 80084ee:	07d8      	lsls	r0, r3, #31
 80084f0:	d5ea      	bpl.n	80084c8 <_printf_float+0x194>
 80084f2:	1c4b      	adds	r3, r1, #1
 80084f4:	e7e7      	b.n	80084c6 <_printf_float+0x192>
 80084f6:	2900      	cmp	r1, #0
 80084f8:	bfd4      	ite	le
 80084fa:	f1c1 0202 	rsble	r2, r1, #2
 80084fe:	2201      	movgt	r2, #1
 8008500:	4413      	add	r3, r2
 8008502:	e7e0      	b.n	80084c6 <_printf_float+0x192>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	055a      	lsls	r2, r3, #21
 8008508:	d407      	bmi.n	800851a <_printf_float+0x1e6>
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	4642      	mov	r2, r8
 800850e:	4631      	mov	r1, r6
 8008510:	4628      	mov	r0, r5
 8008512:	47b8      	blx	r7
 8008514:	3001      	adds	r0, #1
 8008516:	d12b      	bne.n	8008570 <_printf_float+0x23c>
 8008518:	e767      	b.n	80083ea <_printf_float+0xb6>
 800851a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800851e:	f240 80dd 	bls.w	80086dc <_printf_float+0x3a8>
 8008522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008526:	2200      	movs	r2, #0
 8008528:	2300      	movs	r3, #0
 800852a:	f7f8 faf5 	bl	8000b18 <__aeabi_dcmpeq>
 800852e:	2800      	cmp	r0, #0
 8008530:	d033      	beq.n	800859a <_printf_float+0x266>
 8008532:	4a37      	ldr	r2, [pc, #220]	@ (8008610 <_printf_float+0x2dc>)
 8008534:	2301      	movs	r3, #1
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	47b8      	blx	r7
 800853c:	3001      	adds	r0, #1
 800853e:	f43f af54 	beq.w	80083ea <_printf_float+0xb6>
 8008542:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008546:	4543      	cmp	r3, r8
 8008548:	db02      	blt.n	8008550 <_printf_float+0x21c>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	07d8      	lsls	r0, r3, #31
 800854e:	d50f      	bpl.n	8008570 <_printf_float+0x23c>
 8008550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008554:	4631      	mov	r1, r6
 8008556:	4628      	mov	r0, r5
 8008558:	47b8      	blx	r7
 800855a:	3001      	adds	r0, #1
 800855c:	f43f af45 	beq.w	80083ea <_printf_float+0xb6>
 8008560:	f04f 0900 	mov.w	r9, #0
 8008564:	f108 38ff 	add.w	r8, r8, #4294967295
 8008568:	f104 0a1a 	add.w	sl, r4, #26
 800856c:	45c8      	cmp	r8, r9
 800856e:	dc09      	bgt.n	8008584 <_printf_float+0x250>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	079b      	lsls	r3, r3, #30
 8008574:	f100 8103 	bmi.w	800877e <_printf_float+0x44a>
 8008578:	68e0      	ldr	r0, [r4, #12]
 800857a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800857c:	4298      	cmp	r0, r3
 800857e:	bfb8      	it	lt
 8008580:	4618      	movlt	r0, r3
 8008582:	e734      	b.n	80083ee <_printf_float+0xba>
 8008584:	2301      	movs	r3, #1
 8008586:	4652      	mov	r2, sl
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	f43f af2b 	beq.w	80083ea <_printf_float+0xb6>
 8008594:	f109 0901 	add.w	r9, r9, #1
 8008598:	e7e8      	b.n	800856c <_printf_float+0x238>
 800859a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	dc39      	bgt.n	8008614 <_printf_float+0x2e0>
 80085a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008610 <_printf_float+0x2dc>)
 80085a2:	2301      	movs	r3, #1
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f af1d 	beq.w	80083ea <_printf_float+0xb6>
 80085b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80085b4:	ea59 0303 	orrs.w	r3, r9, r3
 80085b8:	d102      	bne.n	80085c0 <_printf_float+0x28c>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	07d9      	lsls	r1, r3, #31
 80085be:	d5d7      	bpl.n	8008570 <_printf_float+0x23c>
 80085c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f af0d 	beq.w	80083ea <_printf_float+0xb6>
 80085d0:	f04f 0a00 	mov.w	sl, #0
 80085d4:	f104 0b1a 	add.w	fp, r4, #26
 80085d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085da:	425b      	negs	r3, r3
 80085dc:	4553      	cmp	r3, sl
 80085de:	dc01      	bgt.n	80085e4 <_printf_float+0x2b0>
 80085e0:	464b      	mov	r3, r9
 80085e2:	e793      	b.n	800850c <_printf_float+0x1d8>
 80085e4:	2301      	movs	r3, #1
 80085e6:	465a      	mov	r2, fp
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b8      	blx	r7
 80085ee:	3001      	adds	r0, #1
 80085f0:	f43f aefb 	beq.w	80083ea <_printf_float+0xb6>
 80085f4:	f10a 0a01 	add.w	sl, sl, #1
 80085f8:	e7ee      	b.n	80085d8 <_printf_float+0x2a4>
 80085fa:	bf00      	nop
 80085fc:	7fefffff 	.word	0x7fefffff
 8008600:	08020710 	.word	0x08020710
 8008604:	08020714 	.word	0x08020714
 8008608:	08020718 	.word	0x08020718
 800860c:	0802071c 	.word	0x0802071c
 8008610:	08020720 	.word	0x08020720
 8008614:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008616:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800861a:	4553      	cmp	r3, sl
 800861c:	bfa8      	it	ge
 800861e:	4653      	movge	r3, sl
 8008620:	2b00      	cmp	r3, #0
 8008622:	4699      	mov	r9, r3
 8008624:	dc36      	bgt.n	8008694 <_printf_float+0x360>
 8008626:	f04f 0b00 	mov.w	fp, #0
 800862a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800862e:	f104 021a 	add.w	r2, r4, #26
 8008632:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008634:	9306      	str	r3, [sp, #24]
 8008636:	eba3 0309 	sub.w	r3, r3, r9
 800863a:	455b      	cmp	r3, fp
 800863c:	dc31      	bgt.n	80086a2 <_printf_float+0x36e>
 800863e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008640:	459a      	cmp	sl, r3
 8008642:	dc3a      	bgt.n	80086ba <_printf_float+0x386>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	07da      	lsls	r2, r3, #31
 8008648:	d437      	bmi.n	80086ba <_printf_float+0x386>
 800864a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864c:	ebaa 0903 	sub.w	r9, sl, r3
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	ebaa 0303 	sub.w	r3, sl, r3
 8008656:	4599      	cmp	r9, r3
 8008658:	bfa8      	it	ge
 800865a:	4699      	movge	r9, r3
 800865c:	f1b9 0f00 	cmp.w	r9, #0
 8008660:	dc33      	bgt.n	80086ca <_printf_float+0x396>
 8008662:	f04f 0800 	mov.w	r8, #0
 8008666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800866a:	f104 0b1a 	add.w	fp, r4, #26
 800866e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008670:	ebaa 0303 	sub.w	r3, sl, r3
 8008674:	eba3 0309 	sub.w	r3, r3, r9
 8008678:	4543      	cmp	r3, r8
 800867a:	f77f af79 	ble.w	8008570 <_printf_float+0x23c>
 800867e:	2301      	movs	r3, #1
 8008680:	465a      	mov	r2, fp
 8008682:	4631      	mov	r1, r6
 8008684:	4628      	mov	r0, r5
 8008686:	47b8      	blx	r7
 8008688:	3001      	adds	r0, #1
 800868a:	f43f aeae 	beq.w	80083ea <_printf_float+0xb6>
 800868e:	f108 0801 	add.w	r8, r8, #1
 8008692:	e7ec      	b.n	800866e <_printf_float+0x33a>
 8008694:	4642      	mov	r2, r8
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	d1c2      	bne.n	8008626 <_printf_float+0x2f2>
 80086a0:	e6a3      	b.n	80083ea <_printf_float+0xb6>
 80086a2:	2301      	movs	r3, #1
 80086a4:	4631      	mov	r1, r6
 80086a6:	4628      	mov	r0, r5
 80086a8:	9206      	str	r2, [sp, #24]
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f ae9c 	beq.w	80083ea <_printf_float+0xb6>
 80086b2:	9a06      	ldr	r2, [sp, #24]
 80086b4:	f10b 0b01 	add.w	fp, fp, #1
 80086b8:	e7bb      	b.n	8008632 <_printf_float+0x2fe>
 80086ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b8      	blx	r7
 80086c4:	3001      	adds	r0, #1
 80086c6:	d1c0      	bne.n	800864a <_printf_float+0x316>
 80086c8:	e68f      	b.n	80083ea <_printf_float+0xb6>
 80086ca:	9a06      	ldr	r2, [sp, #24]
 80086cc:	464b      	mov	r3, r9
 80086ce:	4442      	add	r2, r8
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	d1c3      	bne.n	8008662 <_printf_float+0x32e>
 80086da:	e686      	b.n	80083ea <_printf_float+0xb6>
 80086dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086e0:	f1ba 0f01 	cmp.w	sl, #1
 80086e4:	dc01      	bgt.n	80086ea <_printf_float+0x3b6>
 80086e6:	07db      	lsls	r3, r3, #31
 80086e8:	d536      	bpl.n	8008758 <_printf_float+0x424>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4642      	mov	r2, r8
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f ae78 	beq.w	80083ea <_printf_float+0xb6>
 80086fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	f43f ae70 	beq.w	80083ea <_printf_float+0xb6>
 800870a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800870e:	2200      	movs	r2, #0
 8008710:	2300      	movs	r3, #0
 8008712:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008716:	f7f8 f9ff 	bl	8000b18 <__aeabi_dcmpeq>
 800871a:	b9c0      	cbnz	r0, 800874e <_printf_float+0x41a>
 800871c:	4653      	mov	r3, sl
 800871e:	f108 0201 	add.w	r2, r8, #1
 8008722:	4631      	mov	r1, r6
 8008724:	4628      	mov	r0, r5
 8008726:	47b8      	blx	r7
 8008728:	3001      	adds	r0, #1
 800872a:	d10c      	bne.n	8008746 <_printf_float+0x412>
 800872c:	e65d      	b.n	80083ea <_printf_float+0xb6>
 800872e:	2301      	movs	r3, #1
 8008730:	465a      	mov	r2, fp
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	47b8      	blx	r7
 8008738:	3001      	adds	r0, #1
 800873a:	f43f ae56 	beq.w	80083ea <_printf_float+0xb6>
 800873e:	f108 0801 	add.w	r8, r8, #1
 8008742:	45d0      	cmp	r8, sl
 8008744:	dbf3      	blt.n	800872e <_printf_float+0x3fa>
 8008746:	464b      	mov	r3, r9
 8008748:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800874c:	e6df      	b.n	800850e <_printf_float+0x1da>
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	f104 0b1a 	add.w	fp, r4, #26
 8008756:	e7f4      	b.n	8008742 <_printf_float+0x40e>
 8008758:	2301      	movs	r3, #1
 800875a:	4642      	mov	r2, r8
 800875c:	e7e1      	b.n	8008722 <_printf_float+0x3ee>
 800875e:	2301      	movs	r3, #1
 8008760:	464a      	mov	r2, r9
 8008762:	4631      	mov	r1, r6
 8008764:	4628      	mov	r0, r5
 8008766:	47b8      	blx	r7
 8008768:	3001      	adds	r0, #1
 800876a:	f43f ae3e 	beq.w	80083ea <_printf_float+0xb6>
 800876e:	f108 0801 	add.w	r8, r8, #1
 8008772:	68e3      	ldr	r3, [r4, #12]
 8008774:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008776:	1a5b      	subs	r3, r3, r1
 8008778:	4543      	cmp	r3, r8
 800877a:	dcf0      	bgt.n	800875e <_printf_float+0x42a>
 800877c:	e6fc      	b.n	8008578 <_printf_float+0x244>
 800877e:	f04f 0800 	mov.w	r8, #0
 8008782:	f104 0919 	add.w	r9, r4, #25
 8008786:	e7f4      	b.n	8008772 <_printf_float+0x43e>

08008788 <_printf_common>:
 8008788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800878c:	4616      	mov	r6, r2
 800878e:	4698      	mov	r8, r3
 8008790:	688a      	ldr	r2, [r1, #8]
 8008792:	690b      	ldr	r3, [r1, #16]
 8008794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008798:	4293      	cmp	r3, r2
 800879a:	bfb8      	it	lt
 800879c:	4613      	movlt	r3, r2
 800879e:	6033      	str	r3, [r6, #0]
 80087a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087a4:	4607      	mov	r7, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	b10a      	cbz	r2, 80087ae <_printf_common+0x26>
 80087aa:	3301      	adds	r3, #1
 80087ac:	6033      	str	r3, [r6, #0]
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	0699      	lsls	r1, r3, #26
 80087b2:	bf42      	ittt	mi
 80087b4:	6833      	ldrmi	r3, [r6, #0]
 80087b6:	3302      	addmi	r3, #2
 80087b8:	6033      	strmi	r3, [r6, #0]
 80087ba:	6825      	ldr	r5, [r4, #0]
 80087bc:	f015 0506 	ands.w	r5, r5, #6
 80087c0:	d106      	bne.n	80087d0 <_printf_common+0x48>
 80087c2:	f104 0a19 	add.w	sl, r4, #25
 80087c6:	68e3      	ldr	r3, [r4, #12]
 80087c8:	6832      	ldr	r2, [r6, #0]
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	42ab      	cmp	r3, r5
 80087ce:	dc26      	bgt.n	800881e <_printf_common+0x96>
 80087d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087d4:	6822      	ldr	r2, [r4, #0]
 80087d6:	3b00      	subs	r3, #0
 80087d8:	bf18      	it	ne
 80087da:	2301      	movne	r3, #1
 80087dc:	0692      	lsls	r2, r2, #26
 80087de:	d42b      	bmi.n	8008838 <_printf_common+0xb0>
 80087e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087e4:	4641      	mov	r1, r8
 80087e6:	4638      	mov	r0, r7
 80087e8:	47c8      	blx	r9
 80087ea:	3001      	adds	r0, #1
 80087ec:	d01e      	beq.n	800882c <_printf_common+0xa4>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	6922      	ldr	r2, [r4, #16]
 80087f2:	f003 0306 	and.w	r3, r3, #6
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	bf02      	ittt	eq
 80087fa:	68e5      	ldreq	r5, [r4, #12]
 80087fc:	6833      	ldreq	r3, [r6, #0]
 80087fe:	1aed      	subeq	r5, r5, r3
 8008800:	68a3      	ldr	r3, [r4, #8]
 8008802:	bf0c      	ite	eq
 8008804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008808:	2500      	movne	r5, #0
 800880a:	4293      	cmp	r3, r2
 800880c:	bfc4      	itt	gt
 800880e:	1a9b      	subgt	r3, r3, r2
 8008810:	18ed      	addgt	r5, r5, r3
 8008812:	2600      	movs	r6, #0
 8008814:	341a      	adds	r4, #26
 8008816:	42b5      	cmp	r5, r6
 8008818:	d11a      	bne.n	8008850 <_printf_common+0xc8>
 800881a:	2000      	movs	r0, #0
 800881c:	e008      	b.n	8008830 <_printf_common+0xa8>
 800881e:	2301      	movs	r3, #1
 8008820:	4652      	mov	r2, sl
 8008822:	4641      	mov	r1, r8
 8008824:	4638      	mov	r0, r7
 8008826:	47c8      	blx	r9
 8008828:	3001      	adds	r0, #1
 800882a:	d103      	bne.n	8008834 <_printf_common+0xac>
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008834:	3501      	adds	r5, #1
 8008836:	e7c6      	b.n	80087c6 <_printf_common+0x3e>
 8008838:	18e1      	adds	r1, r4, r3
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	2030      	movs	r0, #48	@ 0x30
 800883e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008842:	4422      	add	r2, r4
 8008844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800884c:	3302      	adds	r3, #2
 800884e:	e7c7      	b.n	80087e0 <_printf_common+0x58>
 8008850:	2301      	movs	r3, #1
 8008852:	4622      	mov	r2, r4
 8008854:	4641      	mov	r1, r8
 8008856:	4638      	mov	r0, r7
 8008858:	47c8      	blx	r9
 800885a:	3001      	adds	r0, #1
 800885c:	d0e6      	beq.n	800882c <_printf_common+0xa4>
 800885e:	3601      	adds	r6, #1
 8008860:	e7d9      	b.n	8008816 <_printf_common+0x8e>
	...

08008864 <_printf_i>:
 8008864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	7e0f      	ldrb	r7, [r1, #24]
 800886a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800886c:	2f78      	cmp	r7, #120	@ 0x78
 800886e:	4691      	mov	r9, r2
 8008870:	4680      	mov	r8, r0
 8008872:	460c      	mov	r4, r1
 8008874:	469a      	mov	sl, r3
 8008876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800887a:	d807      	bhi.n	800888c <_printf_i+0x28>
 800887c:	2f62      	cmp	r7, #98	@ 0x62
 800887e:	d80a      	bhi.n	8008896 <_printf_i+0x32>
 8008880:	2f00      	cmp	r7, #0
 8008882:	f000 80d2 	beq.w	8008a2a <_printf_i+0x1c6>
 8008886:	2f58      	cmp	r7, #88	@ 0x58
 8008888:	f000 80b9 	beq.w	80089fe <_printf_i+0x19a>
 800888c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008894:	e03a      	b.n	800890c <_printf_i+0xa8>
 8008896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800889a:	2b15      	cmp	r3, #21
 800889c:	d8f6      	bhi.n	800888c <_printf_i+0x28>
 800889e:	a101      	add	r1, pc, #4	@ (adr r1, 80088a4 <_printf_i+0x40>)
 80088a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a4:	080088fd 	.word	0x080088fd
 80088a8:	08008911 	.word	0x08008911
 80088ac:	0800888d 	.word	0x0800888d
 80088b0:	0800888d 	.word	0x0800888d
 80088b4:	0800888d 	.word	0x0800888d
 80088b8:	0800888d 	.word	0x0800888d
 80088bc:	08008911 	.word	0x08008911
 80088c0:	0800888d 	.word	0x0800888d
 80088c4:	0800888d 	.word	0x0800888d
 80088c8:	0800888d 	.word	0x0800888d
 80088cc:	0800888d 	.word	0x0800888d
 80088d0:	08008a11 	.word	0x08008a11
 80088d4:	0800893b 	.word	0x0800893b
 80088d8:	080089cb 	.word	0x080089cb
 80088dc:	0800888d 	.word	0x0800888d
 80088e0:	0800888d 	.word	0x0800888d
 80088e4:	08008a33 	.word	0x08008a33
 80088e8:	0800888d 	.word	0x0800888d
 80088ec:	0800893b 	.word	0x0800893b
 80088f0:	0800888d 	.word	0x0800888d
 80088f4:	0800888d 	.word	0x0800888d
 80088f8:	080089d3 	.word	0x080089d3
 80088fc:	6833      	ldr	r3, [r6, #0]
 80088fe:	1d1a      	adds	r2, r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6032      	str	r2, [r6, #0]
 8008904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800890c:	2301      	movs	r3, #1
 800890e:	e09d      	b.n	8008a4c <_printf_i+0x1e8>
 8008910:	6833      	ldr	r3, [r6, #0]
 8008912:	6820      	ldr	r0, [r4, #0]
 8008914:	1d19      	adds	r1, r3, #4
 8008916:	6031      	str	r1, [r6, #0]
 8008918:	0606      	lsls	r6, r0, #24
 800891a:	d501      	bpl.n	8008920 <_printf_i+0xbc>
 800891c:	681d      	ldr	r5, [r3, #0]
 800891e:	e003      	b.n	8008928 <_printf_i+0xc4>
 8008920:	0645      	lsls	r5, r0, #25
 8008922:	d5fb      	bpl.n	800891c <_printf_i+0xb8>
 8008924:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008928:	2d00      	cmp	r5, #0
 800892a:	da03      	bge.n	8008934 <_printf_i+0xd0>
 800892c:	232d      	movs	r3, #45	@ 0x2d
 800892e:	426d      	negs	r5, r5
 8008930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008934:	4859      	ldr	r0, [pc, #356]	@ (8008a9c <_printf_i+0x238>)
 8008936:	230a      	movs	r3, #10
 8008938:	e011      	b.n	800895e <_printf_i+0xfa>
 800893a:	6821      	ldr	r1, [r4, #0]
 800893c:	6833      	ldr	r3, [r6, #0]
 800893e:	0608      	lsls	r0, r1, #24
 8008940:	f853 5b04 	ldr.w	r5, [r3], #4
 8008944:	d402      	bmi.n	800894c <_printf_i+0xe8>
 8008946:	0649      	lsls	r1, r1, #25
 8008948:	bf48      	it	mi
 800894a:	b2ad      	uxthmi	r5, r5
 800894c:	2f6f      	cmp	r7, #111	@ 0x6f
 800894e:	4853      	ldr	r0, [pc, #332]	@ (8008a9c <_printf_i+0x238>)
 8008950:	6033      	str	r3, [r6, #0]
 8008952:	bf14      	ite	ne
 8008954:	230a      	movne	r3, #10
 8008956:	2308      	moveq	r3, #8
 8008958:	2100      	movs	r1, #0
 800895a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800895e:	6866      	ldr	r6, [r4, #4]
 8008960:	60a6      	str	r6, [r4, #8]
 8008962:	2e00      	cmp	r6, #0
 8008964:	bfa2      	ittt	ge
 8008966:	6821      	ldrge	r1, [r4, #0]
 8008968:	f021 0104 	bicge.w	r1, r1, #4
 800896c:	6021      	strge	r1, [r4, #0]
 800896e:	b90d      	cbnz	r5, 8008974 <_printf_i+0x110>
 8008970:	2e00      	cmp	r6, #0
 8008972:	d04b      	beq.n	8008a0c <_printf_i+0x1a8>
 8008974:	4616      	mov	r6, r2
 8008976:	fbb5 f1f3 	udiv	r1, r5, r3
 800897a:	fb03 5711 	mls	r7, r3, r1, r5
 800897e:	5dc7      	ldrb	r7, [r0, r7]
 8008980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008984:	462f      	mov	r7, r5
 8008986:	42bb      	cmp	r3, r7
 8008988:	460d      	mov	r5, r1
 800898a:	d9f4      	bls.n	8008976 <_printf_i+0x112>
 800898c:	2b08      	cmp	r3, #8
 800898e:	d10b      	bne.n	80089a8 <_printf_i+0x144>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	07df      	lsls	r7, r3, #31
 8008994:	d508      	bpl.n	80089a8 <_printf_i+0x144>
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	6861      	ldr	r1, [r4, #4]
 800899a:	4299      	cmp	r1, r3
 800899c:	bfde      	ittt	le
 800899e:	2330      	movle	r3, #48	@ 0x30
 80089a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089a8:	1b92      	subs	r2, r2, r6
 80089aa:	6122      	str	r2, [r4, #16]
 80089ac:	f8cd a000 	str.w	sl, [sp]
 80089b0:	464b      	mov	r3, r9
 80089b2:	aa03      	add	r2, sp, #12
 80089b4:	4621      	mov	r1, r4
 80089b6:	4640      	mov	r0, r8
 80089b8:	f7ff fee6 	bl	8008788 <_printf_common>
 80089bc:	3001      	adds	r0, #1
 80089be:	d14a      	bne.n	8008a56 <_printf_i+0x1f2>
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295
 80089c4:	b004      	add	sp, #16
 80089c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f043 0320 	orr.w	r3, r3, #32
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	4833      	ldr	r0, [pc, #204]	@ (8008aa0 <_printf_i+0x23c>)
 80089d4:	2778      	movs	r7, #120	@ 0x78
 80089d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	6831      	ldr	r1, [r6, #0]
 80089de:	061f      	lsls	r7, r3, #24
 80089e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80089e4:	d402      	bmi.n	80089ec <_printf_i+0x188>
 80089e6:	065f      	lsls	r7, r3, #25
 80089e8:	bf48      	it	mi
 80089ea:	b2ad      	uxthmi	r5, r5
 80089ec:	6031      	str	r1, [r6, #0]
 80089ee:	07d9      	lsls	r1, r3, #31
 80089f0:	bf44      	itt	mi
 80089f2:	f043 0320 	orrmi.w	r3, r3, #32
 80089f6:	6023      	strmi	r3, [r4, #0]
 80089f8:	b11d      	cbz	r5, 8008a02 <_printf_i+0x19e>
 80089fa:	2310      	movs	r3, #16
 80089fc:	e7ac      	b.n	8008958 <_printf_i+0xf4>
 80089fe:	4827      	ldr	r0, [pc, #156]	@ (8008a9c <_printf_i+0x238>)
 8008a00:	e7e9      	b.n	80089d6 <_printf_i+0x172>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	f023 0320 	bic.w	r3, r3, #32
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	e7f6      	b.n	80089fa <_printf_i+0x196>
 8008a0c:	4616      	mov	r6, r2
 8008a0e:	e7bd      	b.n	800898c <_printf_i+0x128>
 8008a10:	6833      	ldr	r3, [r6, #0]
 8008a12:	6825      	ldr	r5, [r4, #0]
 8008a14:	6961      	ldr	r1, [r4, #20]
 8008a16:	1d18      	adds	r0, r3, #4
 8008a18:	6030      	str	r0, [r6, #0]
 8008a1a:	062e      	lsls	r6, r5, #24
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	d501      	bpl.n	8008a24 <_printf_i+0x1c0>
 8008a20:	6019      	str	r1, [r3, #0]
 8008a22:	e002      	b.n	8008a2a <_printf_i+0x1c6>
 8008a24:	0668      	lsls	r0, r5, #25
 8008a26:	d5fb      	bpl.n	8008a20 <_printf_i+0x1bc>
 8008a28:	8019      	strh	r1, [r3, #0]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	4616      	mov	r6, r2
 8008a30:	e7bc      	b.n	80089ac <_printf_i+0x148>
 8008a32:	6833      	ldr	r3, [r6, #0]
 8008a34:	1d1a      	adds	r2, r3, #4
 8008a36:	6032      	str	r2, [r6, #0]
 8008a38:	681e      	ldr	r6, [r3, #0]
 8008a3a:	6862      	ldr	r2, [r4, #4]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7f7 fbee 	bl	8000220 <memchr>
 8008a44:	b108      	cbz	r0, 8008a4a <_printf_i+0x1e6>
 8008a46:	1b80      	subs	r0, r0, r6
 8008a48:	6060      	str	r0, [r4, #4]
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a54:	e7aa      	b.n	80089ac <_printf_i+0x148>
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	4632      	mov	r2, r6
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	47d0      	blx	sl
 8008a60:	3001      	adds	r0, #1
 8008a62:	d0ad      	beq.n	80089c0 <_printf_i+0x15c>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	079b      	lsls	r3, r3, #30
 8008a68:	d413      	bmi.n	8008a92 <_printf_i+0x22e>
 8008a6a:	68e0      	ldr	r0, [r4, #12]
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	4298      	cmp	r0, r3
 8008a70:	bfb8      	it	lt
 8008a72:	4618      	movlt	r0, r3
 8008a74:	e7a6      	b.n	80089c4 <_printf_i+0x160>
 8008a76:	2301      	movs	r3, #1
 8008a78:	4632      	mov	r2, r6
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	47d0      	blx	sl
 8008a80:	3001      	adds	r0, #1
 8008a82:	d09d      	beq.n	80089c0 <_printf_i+0x15c>
 8008a84:	3501      	adds	r5, #1
 8008a86:	68e3      	ldr	r3, [r4, #12]
 8008a88:	9903      	ldr	r1, [sp, #12]
 8008a8a:	1a5b      	subs	r3, r3, r1
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	dcf2      	bgt.n	8008a76 <_printf_i+0x212>
 8008a90:	e7eb      	b.n	8008a6a <_printf_i+0x206>
 8008a92:	2500      	movs	r5, #0
 8008a94:	f104 0619 	add.w	r6, r4, #25
 8008a98:	e7f5      	b.n	8008a86 <_printf_i+0x222>
 8008a9a:	bf00      	nop
 8008a9c:	08020722 	.word	0x08020722
 8008aa0:	08020733 	.word	0x08020733

08008aa4 <std>:
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8008aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ab2:	6083      	str	r3, [r0, #8]
 8008ab4:	8181      	strh	r1, [r0, #12]
 8008ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ab8:	81c2      	strh	r2, [r0, #14]
 8008aba:	6183      	str	r3, [r0, #24]
 8008abc:	4619      	mov	r1, r3
 8008abe:	2208      	movs	r2, #8
 8008ac0:	305c      	adds	r0, #92	@ 0x5c
 8008ac2:	f000 f9f9 	bl	8008eb8 <memset>
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8008afc <std+0x58>)
 8008ac8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008aca:	4b0d      	ldr	r3, [pc, #52]	@ (8008b00 <std+0x5c>)
 8008acc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <std+0x60>)
 8008ad0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <std+0x64>)
 8008ad4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <std+0x68>)
 8008ad8:	6224      	str	r4, [r4, #32]
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d006      	beq.n	8008aec <std+0x48>
 8008ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ae2:	4294      	cmp	r4, r2
 8008ae4:	d002      	beq.n	8008aec <std+0x48>
 8008ae6:	33d0      	adds	r3, #208	@ 0xd0
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	d105      	bne.n	8008af8 <std+0x54>
 8008aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af4:	f000 ba5c 	b.w	8008fb0 <__retarget_lock_init_recursive>
 8008af8:	bd10      	pop	{r4, pc}
 8008afa:	bf00      	nop
 8008afc:	08008d09 	.word	0x08008d09
 8008b00:	08008d2b 	.word	0x08008d2b
 8008b04:	08008d63 	.word	0x08008d63
 8008b08:	08008d87 	.word	0x08008d87
 8008b0c:	20002c88 	.word	0x20002c88

08008b10 <stdio_exit_handler>:
 8008b10:	4a02      	ldr	r2, [pc, #8]	@ (8008b1c <stdio_exit_handler+0xc>)
 8008b12:	4903      	ldr	r1, [pc, #12]	@ (8008b20 <stdio_exit_handler+0x10>)
 8008b14:	4803      	ldr	r0, [pc, #12]	@ (8008b24 <stdio_exit_handler+0x14>)
 8008b16:	f000 b869 	b.w	8008bec <_fwalk_sglue>
 8008b1a:	bf00      	nop
 8008b1c:	20000058 	.word	0x20000058
 8008b20:	0800a901 	.word	0x0800a901
 8008b24:	20000068 	.word	0x20000068

08008b28 <cleanup_stdio>:
 8008b28:	6841      	ldr	r1, [r0, #4]
 8008b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b5c <cleanup_stdio+0x34>)
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	b510      	push	{r4, lr}
 8008b30:	4604      	mov	r4, r0
 8008b32:	d001      	beq.n	8008b38 <cleanup_stdio+0x10>
 8008b34:	f001 fee4 	bl	800a900 <_fflush_r>
 8008b38:	68a1      	ldr	r1, [r4, #8]
 8008b3a:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <cleanup_stdio+0x38>)
 8008b3c:	4299      	cmp	r1, r3
 8008b3e:	d002      	beq.n	8008b46 <cleanup_stdio+0x1e>
 8008b40:	4620      	mov	r0, r4
 8008b42:	f001 fedd 	bl	800a900 <_fflush_r>
 8008b46:	68e1      	ldr	r1, [r4, #12]
 8008b48:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <cleanup_stdio+0x3c>)
 8008b4a:	4299      	cmp	r1, r3
 8008b4c:	d004      	beq.n	8008b58 <cleanup_stdio+0x30>
 8008b4e:	4620      	mov	r0, r4
 8008b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b54:	f001 bed4 	b.w	800a900 <_fflush_r>
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20002c88 	.word	0x20002c88
 8008b60:	20002cf0 	.word	0x20002cf0
 8008b64:	20002d58 	.word	0x20002d58

08008b68 <global_stdio_init.part.0>:
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b98 <global_stdio_init.part.0+0x30>)
 8008b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8008b9c <global_stdio_init.part.0+0x34>)
 8008b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba0 <global_stdio_init.part.0+0x38>)
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	4620      	mov	r0, r4
 8008b74:	2200      	movs	r2, #0
 8008b76:	2104      	movs	r1, #4
 8008b78:	f7ff ff94 	bl	8008aa4 <std>
 8008b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b80:	2201      	movs	r2, #1
 8008b82:	2109      	movs	r1, #9
 8008b84:	f7ff ff8e 	bl	8008aa4 <std>
 8008b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b92:	2112      	movs	r1, #18
 8008b94:	f7ff bf86 	b.w	8008aa4 <std>
 8008b98:	20002dc0 	.word	0x20002dc0
 8008b9c:	20002c88 	.word	0x20002c88
 8008ba0:	08008b11 	.word	0x08008b11

08008ba4 <__sfp_lock_acquire>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	@ (8008bac <__sfp_lock_acquire+0x8>)
 8008ba6:	f000 ba04 	b.w	8008fb2 <__retarget_lock_acquire_recursive>
 8008baa:	bf00      	nop
 8008bac:	20002dc9 	.word	0x20002dc9

08008bb0 <__sfp_lock_release>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	@ (8008bb8 <__sfp_lock_release+0x8>)
 8008bb2:	f000 b9ff 	b.w	8008fb4 <__retarget_lock_release_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	20002dc9 	.word	0x20002dc9

08008bbc <__sinit>:
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	f7ff fff0 	bl	8008ba4 <__sfp_lock_acquire>
 8008bc4:	6a23      	ldr	r3, [r4, #32]
 8008bc6:	b11b      	cbz	r3, 8008bd0 <__sinit+0x14>
 8008bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bcc:	f7ff bff0 	b.w	8008bb0 <__sfp_lock_release>
 8008bd0:	4b04      	ldr	r3, [pc, #16]	@ (8008be4 <__sinit+0x28>)
 8008bd2:	6223      	str	r3, [r4, #32]
 8008bd4:	4b04      	ldr	r3, [pc, #16]	@ (8008be8 <__sinit+0x2c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1f5      	bne.n	8008bc8 <__sinit+0xc>
 8008bdc:	f7ff ffc4 	bl	8008b68 <global_stdio_init.part.0>
 8008be0:	e7f2      	b.n	8008bc8 <__sinit+0xc>
 8008be2:	bf00      	nop
 8008be4:	08008b29 	.word	0x08008b29
 8008be8:	20002dc0 	.word	0x20002dc0

08008bec <_fwalk_sglue>:
 8008bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	4688      	mov	r8, r1
 8008bf4:	4614      	mov	r4, r2
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8008c00:	d505      	bpl.n	8008c0e <_fwalk_sglue+0x22>
 8008c02:	6824      	ldr	r4, [r4, #0]
 8008c04:	2c00      	cmp	r4, #0
 8008c06:	d1f7      	bne.n	8008bf8 <_fwalk_sglue+0xc>
 8008c08:	4630      	mov	r0, r6
 8008c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c0e:	89ab      	ldrh	r3, [r5, #12]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d907      	bls.n	8008c24 <_fwalk_sglue+0x38>
 8008c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	d003      	beq.n	8008c24 <_fwalk_sglue+0x38>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4638      	mov	r0, r7
 8008c20:	47c0      	blx	r8
 8008c22:	4306      	orrs	r6, r0
 8008c24:	3568      	adds	r5, #104	@ 0x68
 8008c26:	e7e9      	b.n	8008bfc <_fwalk_sglue+0x10>

08008c28 <iprintf>:
 8008c28:	b40f      	push	{r0, r1, r2, r3}
 8008c2a:	b507      	push	{r0, r1, r2, lr}
 8008c2c:	4906      	ldr	r1, [pc, #24]	@ (8008c48 <iprintf+0x20>)
 8008c2e:	ab04      	add	r3, sp, #16
 8008c30:	6808      	ldr	r0, [r1, #0]
 8008c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c36:	6881      	ldr	r1, [r0, #8]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	f001 fcc5 	bl	800a5c8 <_vfiprintf_r>
 8008c3e:	b003      	add	sp, #12
 8008c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c44:	b004      	add	sp, #16
 8008c46:	4770      	bx	lr
 8008c48:	20000064 	.word	0x20000064

08008c4c <_puts_r>:
 8008c4c:	6a03      	ldr	r3, [r0, #32]
 8008c4e:	b570      	push	{r4, r5, r6, lr}
 8008c50:	6884      	ldr	r4, [r0, #8]
 8008c52:	4605      	mov	r5, r0
 8008c54:	460e      	mov	r6, r1
 8008c56:	b90b      	cbnz	r3, 8008c5c <_puts_r+0x10>
 8008c58:	f7ff ffb0 	bl	8008bbc <__sinit>
 8008c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c5e:	07db      	lsls	r3, r3, #31
 8008c60:	d405      	bmi.n	8008c6e <_puts_r+0x22>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	0598      	lsls	r0, r3, #22
 8008c66:	d402      	bmi.n	8008c6e <_puts_r+0x22>
 8008c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c6a:	f000 f9a2 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	0719      	lsls	r1, r3, #28
 8008c72:	d502      	bpl.n	8008c7a <_puts_r+0x2e>
 8008c74:	6923      	ldr	r3, [r4, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d135      	bne.n	8008ce6 <_puts_r+0x9a>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f000 f8c5 	bl	8008e0c <__swsetup_r>
 8008c82:	b380      	cbz	r0, 8008ce6 <_puts_r+0x9a>
 8008c84:	f04f 35ff 	mov.w	r5, #4294967295
 8008c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c8a:	07da      	lsls	r2, r3, #31
 8008c8c:	d405      	bmi.n	8008c9a <_puts_r+0x4e>
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	059b      	lsls	r3, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_puts_r+0x4e>
 8008c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c96:	f000 f98d 	bl	8008fb4 <__retarget_lock_release_recursive>
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	da04      	bge.n	8008cac <_puts_r+0x60>
 8008ca2:	69a2      	ldr	r2, [r4, #24]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	dc17      	bgt.n	8008cd8 <_puts_r+0x8c>
 8008ca8:	290a      	cmp	r1, #10
 8008caa:	d015      	beq.n	8008cd8 <_puts_r+0x8c>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	7019      	strb	r1, [r3, #0]
 8008cb4:	68a3      	ldr	r3, [r4, #8]
 8008cb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	60a3      	str	r3, [r4, #8]
 8008cbe:	2900      	cmp	r1, #0
 8008cc0:	d1ed      	bne.n	8008c9e <_puts_r+0x52>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	da11      	bge.n	8008cea <_puts_r+0x9e>
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	210a      	movs	r1, #10
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 f85f 	bl	8008d8e <__swbuf_r>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d0d7      	beq.n	8008c84 <_puts_r+0x38>
 8008cd4:	250a      	movs	r5, #10
 8008cd6:	e7d7      	b.n	8008c88 <_puts_r+0x3c>
 8008cd8:	4622      	mov	r2, r4
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f000 f857 	bl	8008d8e <__swbuf_r>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d1e7      	bne.n	8008cb4 <_puts_r+0x68>
 8008ce4:	e7ce      	b.n	8008c84 <_puts_r+0x38>
 8008ce6:	3e01      	subs	r6, #1
 8008ce8:	e7e4      	b.n	8008cb4 <_puts_r+0x68>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	220a      	movs	r2, #10
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	e7ee      	b.n	8008cd4 <_puts_r+0x88>
	...

08008cf8 <puts>:
 8008cf8:	4b02      	ldr	r3, [pc, #8]	@ (8008d04 <puts+0xc>)
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	f7ff bfa5 	b.w	8008c4c <_puts_r>
 8008d02:	bf00      	nop
 8008d04:	20000064 	.word	0x20000064

08008d08 <__sread>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 f900 	bl	8008f14 <_read_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	bfab      	itete	ge
 8008d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d1c:	181b      	addge	r3, r3, r0
 8008d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d22:	bfac      	ite	ge
 8008d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d26:	81a3      	strhlt	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__swrite>:
 8008d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2e:	461f      	mov	r7, r3
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	05db      	lsls	r3, r3, #23
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4616      	mov	r6, r2
 8008d3a:	d505      	bpl.n	8008d48 <__swrite+0x1e>
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	2302      	movs	r3, #2
 8008d42:	2200      	movs	r2, #0
 8008d44:	f000 f8d4 	bl	8008ef0 <_lseek_r>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	f000 b8eb 	b.w	8008f38 <_write_r>

08008d62 <__sseek>:
 8008d62:	b510      	push	{r4, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 f8c1 	bl	8008ef0 <_lseek_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	bf15      	itete	ne
 8008d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d7e:	81a3      	strheq	r3, [r4, #12]
 8008d80:	bf18      	it	ne
 8008d82:	81a3      	strhne	r3, [r4, #12]
 8008d84:	bd10      	pop	{r4, pc}

08008d86 <__sclose>:
 8008d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8a:	f000 b8a1 	b.w	8008ed0 <_close_r>

08008d8e <__swbuf_r>:
 8008d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d90:	460e      	mov	r6, r1
 8008d92:	4614      	mov	r4, r2
 8008d94:	4605      	mov	r5, r0
 8008d96:	b118      	cbz	r0, 8008da0 <__swbuf_r+0x12>
 8008d98:	6a03      	ldr	r3, [r0, #32]
 8008d9a:	b90b      	cbnz	r3, 8008da0 <__swbuf_r+0x12>
 8008d9c:	f7ff ff0e 	bl	8008bbc <__sinit>
 8008da0:	69a3      	ldr	r3, [r4, #24]
 8008da2:	60a3      	str	r3, [r4, #8]
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	071a      	lsls	r2, r3, #28
 8008da8:	d501      	bpl.n	8008dae <__swbuf_r+0x20>
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	b943      	cbnz	r3, 8008dc0 <__swbuf_r+0x32>
 8008dae:	4621      	mov	r1, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 f82b 	bl	8008e0c <__swsetup_r>
 8008db6:	b118      	cbz	r0, 8008dc0 <__swbuf_r+0x32>
 8008db8:	f04f 37ff 	mov.w	r7, #4294967295
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	6922      	ldr	r2, [r4, #16]
 8008dc4:	1a98      	subs	r0, r3, r2
 8008dc6:	6963      	ldr	r3, [r4, #20]
 8008dc8:	b2f6      	uxtb	r6, r6
 8008dca:	4283      	cmp	r3, r0
 8008dcc:	4637      	mov	r7, r6
 8008dce:	dc05      	bgt.n	8008ddc <__swbuf_r+0x4e>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f001 fd94 	bl	800a900 <_fflush_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d1ed      	bne.n	8008db8 <__swbuf_r+0x2a>
 8008ddc:	68a3      	ldr	r3, [r4, #8]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	60a3      	str	r3, [r4, #8]
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	6022      	str	r2, [r4, #0]
 8008de8:	701e      	strb	r6, [r3, #0]
 8008dea:	6962      	ldr	r2, [r4, #20]
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d004      	beq.n	8008dfc <__swbuf_r+0x6e>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	07db      	lsls	r3, r3, #31
 8008df6:	d5e1      	bpl.n	8008dbc <__swbuf_r+0x2e>
 8008df8:	2e0a      	cmp	r6, #10
 8008dfa:	d1df      	bne.n	8008dbc <__swbuf_r+0x2e>
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f001 fd7e 	bl	800a900 <_fflush_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d0d9      	beq.n	8008dbc <__swbuf_r+0x2e>
 8008e08:	e7d6      	b.n	8008db8 <__swbuf_r+0x2a>
	...

08008e0c <__swsetup_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4b29      	ldr	r3, [pc, #164]	@ (8008eb4 <__swsetup_r+0xa8>)
 8008e10:	4605      	mov	r5, r0
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	460c      	mov	r4, r1
 8008e16:	b118      	cbz	r0, 8008e20 <__swsetup_r+0x14>
 8008e18:	6a03      	ldr	r3, [r0, #32]
 8008e1a:	b90b      	cbnz	r3, 8008e20 <__swsetup_r+0x14>
 8008e1c:	f7ff fece 	bl	8008bbc <__sinit>
 8008e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e24:	0719      	lsls	r1, r3, #28
 8008e26:	d422      	bmi.n	8008e6e <__swsetup_r+0x62>
 8008e28:	06da      	lsls	r2, r3, #27
 8008e2a:	d407      	bmi.n	8008e3c <__swsetup_r+0x30>
 8008e2c:	2209      	movs	r2, #9
 8008e2e:	602a      	str	r2, [r5, #0]
 8008e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3a:	e033      	b.n	8008ea4 <__swsetup_r+0x98>
 8008e3c:	0758      	lsls	r0, r3, #29
 8008e3e:	d512      	bpl.n	8008e66 <__swsetup_r+0x5a>
 8008e40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e42:	b141      	cbz	r1, 8008e56 <__swsetup_r+0x4a>
 8008e44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	d002      	beq.n	8008e52 <__swsetup_r+0x46>
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f000 ff0f 	bl	8009c70 <_free_r>
 8008e52:	2300      	movs	r3, #0
 8008e54:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6063      	str	r3, [r4, #4]
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f043 0308 	orr.w	r3, r3, #8
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	b94b      	cbnz	r3, 8008e86 <__swsetup_r+0x7a>
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e7c:	d003      	beq.n	8008e86 <__swsetup_r+0x7a>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f001 fd8b 	bl	800a99c <__smakebuf_r>
 8008e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8a:	f013 0201 	ands.w	r2, r3, #1
 8008e8e:	d00a      	beq.n	8008ea6 <__swsetup_r+0x9a>
 8008e90:	2200      	movs	r2, #0
 8008e92:	60a2      	str	r2, [r4, #8]
 8008e94:	6962      	ldr	r2, [r4, #20]
 8008e96:	4252      	negs	r2, r2
 8008e98:	61a2      	str	r2, [r4, #24]
 8008e9a:	6922      	ldr	r2, [r4, #16]
 8008e9c:	b942      	cbnz	r2, 8008eb0 <__swsetup_r+0xa4>
 8008e9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ea2:	d1c5      	bne.n	8008e30 <__swsetup_r+0x24>
 8008ea4:	bd38      	pop	{r3, r4, r5, pc}
 8008ea6:	0799      	lsls	r1, r3, #30
 8008ea8:	bf58      	it	pl
 8008eaa:	6962      	ldrpl	r2, [r4, #20]
 8008eac:	60a2      	str	r2, [r4, #8]
 8008eae:	e7f4      	b.n	8008e9a <__swsetup_r+0x8e>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e7f7      	b.n	8008ea4 <__swsetup_r+0x98>
 8008eb4:	20000064 	.word	0x20000064

08008eb8 <memset>:
 8008eb8:	4402      	add	r2, r0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d100      	bne.n	8008ec2 <memset+0xa>
 8008ec0:	4770      	bx	lr
 8008ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec6:	e7f9      	b.n	8008ebc <memset+0x4>

08008ec8 <_localeconv_r>:
 8008ec8:	4800      	ldr	r0, [pc, #0]	@ (8008ecc <_localeconv_r+0x4>)
 8008eca:	4770      	bx	lr
 8008ecc:	200001a4 	.word	0x200001a4

08008ed0 <_close_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d06      	ldr	r5, [pc, #24]	@ (8008eec <_close_r+0x1c>)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	602b      	str	r3, [r5, #0]
 8008edc:	f7f8 fb7e 	bl	80015dc <_close>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_close_r+0x1a>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_close_r+0x1a>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	20002dc4 	.word	0x20002dc4

08008ef0 <_lseek_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d07      	ldr	r5, [pc, #28]	@ (8008f10 <_lseek_r+0x20>)
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4611      	mov	r1, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f7f8 fb93 	bl	800162a <_lseek>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_lseek_r+0x1e>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_lseek_r+0x1e>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	20002dc4 	.word	0x20002dc4

08008f14 <_read_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d07      	ldr	r5, [pc, #28]	@ (8008f34 <_read_r+0x20>)
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	602a      	str	r2, [r5, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f7f8 fb21 	bl	800156a <_read>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_read_r+0x1e>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_read_r+0x1e>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20002dc4 	.word	0x20002dc4

08008f38 <_write_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d07      	ldr	r5, [pc, #28]	@ (8008f58 <_write_r+0x20>)
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	4608      	mov	r0, r1
 8008f40:	4611      	mov	r1, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	602a      	str	r2, [r5, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f7f8 fb2c 	bl	80015a4 <_write>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_write_r+0x1e>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_write_r+0x1e>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	20002dc4 	.word	0x20002dc4

08008f5c <__errno>:
 8008f5c:	4b01      	ldr	r3, [pc, #4]	@ (8008f64 <__errno+0x8>)
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20000064 	.word	0x20000064

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2600      	movs	r6, #0
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4d0b      	ldr	r5, [pc, #44]	@ (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8008fac <__libc_init_array+0x44>)
 8008f7c:	f001 fe2c 	bl	800abd8 <_init>
 8008f80:	1b64      	subs	r4, r4, r5
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2600      	movs	r6, #0
 8008f86:	42a6      	cmp	r6, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f90:	4798      	blx	r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9a:	4798      	blx	r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	08020a88 	.word	0x08020a88
 8008fa4:	08020a88 	.word	0x08020a88
 8008fa8:	08020a88 	.word	0x08020a88
 8008fac:	08020a8c 	.word	0x08020a8c

08008fb0 <__retarget_lock_init_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__retarget_lock_acquire_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <__retarget_lock_release_recursive>:
 8008fb4:	4770      	bx	lr

08008fb6 <memcpy>:
 8008fb6:	440a      	add	r2, r1
 8008fb8:	4291      	cmp	r1, r2
 8008fba:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fbe:	d100      	bne.n	8008fc2 <memcpy+0xc>
 8008fc0:	4770      	bx	lr
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fcc:	4291      	cmp	r1, r2
 8008fce:	d1f9      	bne.n	8008fc4 <memcpy+0xe>
 8008fd0:	bd10      	pop	{r4, pc}

08008fd2 <quorem>:
 8008fd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd6:	6903      	ldr	r3, [r0, #16]
 8008fd8:	690c      	ldr	r4, [r1, #16]
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	4607      	mov	r7, r0
 8008fde:	db7e      	blt.n	80090de <quorem+0x10c>
 8008fe0:	3c01      	subs	r4, #1
 8008fe2:	f101 0814 	add.w	r8, r1, #20
 8008fe6:	00a3      	lsls	r3, r4, #2
 8008fe8:	f100 0514 	add.w	r5, r0, #20
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ff8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	429a      	cmp	r2, r3
 8009000:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009004:	fbb2 f6f3 	udiv	r6, r2, r3
 8009008:	d32e      	bcc.n	8009068 <quorem+0x96>
 800900a:	f04f 0a00 	mov.w	sl, #0
 800900e:	46c4      	mov	ip, r8
 8009010:	46ae      	mov	lr, r5
 8009012:	46d3      	mov	fp, sl
 8009014:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009018:	b298      	uxth	r0, r3
 800901a:	fb06 a000 	mla	r0, r6, r0, sl
 800901e:	0c02      	lsrs	r2, r0, #16
 8009020:	0c1b      	lsrs	r3, r3, #16
 8009022:	fb06 2303 	mla	r3, r6, r3, r2
 8009026:	f8de 2000 	ldr.w	r2, [lr]
 800902a:	b280      	uxth	r0, r0
 800902c:	b292      	uxth	r2, r2
 800902e:	1a12      	subs	r2, r2, r0
 8009030:	445a      	add	r2, fp
 8009032:	f8de 0000 	ldr.w	r0, [lr]
 8009036:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800903a:	b29b      	uxth	r3, r3
 800903c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009040:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009044:	b292      	uxth	r2, r2
 8009046:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800904a:	45e1      	cmp	r9, ip
 800904c:	f84e 2b04 	str.w	r2, [lr], #4
 8009050:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009054:	d2de      	bcs.n	8009014 <quorem+0x42>
 8009056:	9b00      	ldr	r3, [sp, #0]
 8009058:	58eb      	ldr	r3, [r5, r3]
 800905a:	b92b      	cbnz	r3, 8009068 <quorem+0x96>
 800905c:	9b01      	ldr	r3, [sp, #4]
 800905e:	3b04      	subs	r3, #4
 8009060:	429d      	cmp	r5, r3
 8009062:	461a      	mov	r2, r3
 8009064:	d32f      	bcc.n	80090c6 <quorem+0xf4>
 8009066:	613c      	str	r4, [r7, #16]
 8009068:	4638      	mov	r0, r7
 800906a:	f001 f97b 	bl	800a364 <__mcmp>
 800906e:	2800      	cmp	r0, #0
 8009070:	db25      	blt.n	80090be <quorem+0xec>
 8009072:	4629      	mov	r1, r5
 8009074:	2000      	movs	r0, #0
 8009076:	f858 2b04 	ldr.w	r2, [r8], #4
 800907a:	f8d1 c000 	ldr.w	ip, [r1]
 800907e:	fa1f fe82 	uxth.w	lr, r2
 8009082:	fa1f f38c 	uxth.w	r3, ip
 8009086:	eba3 030e 	sub.w	r3, r3, lr
 800908a:	4403      	add	r3, r0
 800908c:	0c12      	lsrs	r2, r2, #16
 800908e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009092:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009096:	b29b      	uxth	r3, r3
 8009098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800909c:	45c1      	cmp	r9, r8
 800909e:	f841 3b04 	str.w	r3, [r1], #4
 80090a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80090a6:	d2e6      	bcs.n	8009076 <quorem+0xa4>
 80090a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090b0:	b922      	cbnz	r2, 80090bc <quorem+0xea>
 80090b2:	3b04      	subs	r3, #4
 80090b4:	429d      	cmp	r5, r3
 80090b6:	461a      	mov	r2, r3
 80090b8:	d30b      	bcc.n	80090d2 <quorem+0x100>
 80090ba:	613c      	str	r4, [r7, #16]
 80090bc:	3601      	adds	r6, #1
 80090be:	4630      	mov	r0, r6
 80090c0:	b003      	add	sp, #12
 80090c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c6:	6812      	ldr	r2, [r2, #0]
 80090c8:	3b04      	subs	r3, #4
 80090ca:	2a00      	cmp	r2, #0
 80090cc:	d1cb      	bne.n	8009066 <quorem+0x94>
 80090ce:	3c01      	subs	r4, #1
 80090d0:	e7c6      	b.n	8009060 <quorem+0x8e>
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	3b04      	subs	r3, #4
 80090d6:	2a00      	cmp	r2, #0
 80090d8:	d1ef      	bne.n	80090ba <quorem+0xe8>
 80090da:	3c01      	subs	r4, #1
 80090dc:	e7ea      	b.n	80090b4 <quorem+0xe2>
 80090de:	2000      	movs	r0, #0
 80090e0:	e7ee      	b.n	80090c0 <quorem+0xee>
 80090e2:	0000      	movs	r0, r0
 80090e4:	0000      	movs	r0, r0
	...

080090e8 <_dtoa_r>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	69c7      	ldr	r7, [r0, #28]
 80090ee:	b099      	sub	sp, #100	@ 0x64
 80090f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090f4:	ec55 4b10 	vmov	r4, r5, d0
 80090f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80090fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80090fc:	4683      	mov	fp, r0
 80090fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009100:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009102:	b97f      	cbnz	r7, 8009124 <_dtoa_r+0x3c>
 8009104:	2010      	movs	r0, #16
 8009106:	f000 fdfd 	bl	8009d04 <malloc>
 800910a:	4602      	mov	r2, r0
 800910c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009110:	b920      	cbnz	r0, 800911c <_dtoa_r+0x34>
 8009112:	4ba7      	ldr	r3, [pc, #668]	@ (80093b0 <_dtoa_r+0x2c8>)
 8009114:	21ef      	movs	r1, #239	@ 0xef
 8009116:	48a7      	ldr	r0, [pc, #668]	@ (80093b4 <_dtoa_r+0x2cc>)
 8009118:	f001 fcae 	bl	800aa78 <__assert_func>
 800911c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009120:	6007      	str	r7, [r0, #0]
 8009122:	60c7      	str	r7, [r0, #12]
 8009124:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009128:	6819      	ldr	r1, [r3, #0]
 800912a:	b159      	cbz	r1, 8009144 <_dtoa_r+0x5c>
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	604a      	str	r2, [r1, #4]
 8009130:	2301      	movs	r3, #1
 8009132:	4093      	lsls	r3, r2
 8009134:	608b      	str	r3, [r1, #8]
 8009136:	4658      	mov	r0, fp
 8009138:	f000 feda 	bl	8009ef0 <_Bfree>
 800913c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	1e2b      	subs	r3, r5, #0
 8009146:	bfb9      	ittee	lt
 8009148:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800914c:	9303      	strlt	r3, [sp, #12]
 800914e:	2300      	movge	r3, #0
 8009150:	6033      	strge	r3, [r6, #0]
 8009152:	9f03      	ldr	r7, [sp, #12]
 8009154:	4b98      	ldr	r3, [pc, #608]	@ (80093b8 <_dtoa_r+0x2d0>)
 8009156:	bfbc      	itt	lt
 8009158:	2201      	movlt	r2, #1
 800915a:	6032      	strlt	r2, [r6, #0]
 800915c:	43bb      	bics	r3, r7
 800915e:	d112      	bne.n	8009186 <_dtoa_r+0x9e>
 8009160:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009162:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800916c:	4323      	orrs	r3, r4
 800916e:	f000 854d 	beq.w	8009c0c <_dtoa_r+0xb24>
 8009172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009174:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80093cc <_dtoa_r+0x2e4>
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 854f 	beq.w	8009c1c <_dtoa_r+0xb34>
 800917e:	f10a 0303 	add.w	r3, sl, #3
 8009182:	f000 bd49 	b.w	8009c18 <_dtoa_r+0xb30>
 8009186:	ed9d 7b02 	vldr	d7, [sp, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	ec51 0b17 	vmov	r0, r1, d7
 8009190:	2300      	movs	r3, #0
 8009192:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009196:	f7f7 fcbf 	bl	8000b18 <__aeabi_dcmpeq>
 800919a:	4680      	mov	r8, r0
 800919c:	b158      	cbz	r0, 80091b6 <_dtoa_r+0xce>
 800919e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091a0:	2301      	movs	r3, #1
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091a6:	b113      	cbz	r3, 80091ae <_dtoa_r+0xc6>
 80091a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091aa:	4b84      	ldr	r3, [pc, #528]	@ (80093bc <_dtoa_r+0x2d4>)
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80093d0 <_dtoa_r+0x2e8>
 80091b2:	f000 bd33 	b.w	8009c1c <_dtoa_r+0xb34>
 80091b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80091ba:	aa16      	add	r2, sp, #88	@ 0x58
 80091bc:	a917      	add	r1, sp, #92	@ 0x5c
 80091be:	4658      	mov	r0, fp
 80091c0:	f001 f980 	bl	800a4c4 <__d2b>
 80091c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091c8:	4681      	mov	r9, r0
 80091ca:	2e00      	cmp	r6, #0
 80091cc:	d077      	beq.n	80092be <_dtoa_r+0x1d6>
 80091ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80091d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091e8:	4619      	mov	r1, r3
 80091ea:	2200      	movs	r2, #0
 80091ec:	4b74      	ldr	r3, [pc, #464]	@ (80093c0 <_dtoa_r+0x2d8>)
 80091ee:	f7f7 f873 	bl	80002d8 <__aeabi_dsub>
 80091f2:	a369      	add	r3, pc, #420	@ (adr r3, 8009398 <_dtoa_r+0x2b0>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 fa26 	bl	8000648 <__aeabi_dmul>
 80091fc:	a368      	add	r3, pc, #416	@ (adr r3, 80093a0 <_dtoa_r+0x2b8>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f7f7 f86b 	bl	80002dc <__adddf3>
 8009206:	4604      	mov	r4, r0
 8009208:	4630      	mov	r0, r6
 800920a:	460d      	mov	r5, r1
 800920c:	f7f7 f9b2 	bl	8000574 <__aeabi_i2d>
 8009210:	a365      	add	r3, pc, #404	@ (adr r3, 80093a8 <_dtoa_r+0x2c0>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f7 fa17 	bl	8000648 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	f7f7 f85b 	bl	80002dc <__adddf3>
 8009226:	4604      	mov	r4, r0
 8009228:	460d      	mov	r5, r1
 800922a:	f7f7 fcbd 	bl	8000ba8 <__aeabi_d2iz>
 800922e:	2200      	movs	r2, #0
 8009230:	4607      	mov	r7, r0
 8009232:	2300      	movs	r3, #0
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 fc78 	bl	8000b2c <__aeabi_dcmplt>
 800923c:	b140      	cbz	r0, 8009250 <_dtoa_r+0x168>
 800923e:	4638      	mov	r0, r7
 8009240:	f7f7 f998 	bl	8000574 <__aeabi_i2d>
 8009244:	4622      	mov	r2, r4
 8009246:	462b      	mov	r3, r5
 8009248:	f7f7 fc66 	bl	8000b18 <__aeabi_dcmpeq>
 800924c:	b900      	cbnz	r0, 8009250 <_dtoa_r+0x168>
 800924e:	3f01      	subs	r7, #1
 8009250:	2f16      	cmp	r7, #22
 8009252:	d851      	bhi.n	80092f8 <_dtoa_r+0x210>
 8009254:	4b5b      	ldr	r3, [pc, #364]	@ (80093c4 <_dtoa_r+0x2dc>)
 8009256:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009262:	f7f7 fc63 	bl	8000b2c <__aeabi_dcmplt>
 8009266:	2800      	cmp	r0, #0
 8009268:	d048      	beq.n	80092fc <_dtoa_r+0x214>
 800926a:	3f01      	subs	r7, #1
 800926c:	2300      	movs	r3, #0
 800926e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009270:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009272:	1b9b      	subs	r3, r3, r6
 8009274:	1e5a      	subs	r2, r3, #1
 8009276:	bf44      	itt	mi
 8009278:	f1c3 0801 	rsbmi	r8, r3, #1
 800927c:	2300      	movmi	r3, #0
 800927e:	9208      	str	r2, [sp, #32]
 8009280:	bf54      	ite	pl
 8009282:	f04f 0800 	movpl.w	r8, #0
 8009286:	9308      	strmi	r3, [sp, #32]
 8009288:	2f00      	cmp	r7, #0
 800928a:	db39      	blt.n	8009300 <_dtoa_r+0x218>
 800928c:	9b08      	ldr	r3, [sp, #32]
 800928e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009290:	443b      	add	r3, r7
 8009292:	9308      	str	r3, [sp, #32]
 8009294:	2300      	movs	r3, #0
 8009296:	930a      	str	r3, [sp, #40]	@ 0x28
 8009298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929a:	2b09      	cmp	r3, #9
 800929c:	d864      	bhi.n	8009368 <_dtoa_r+0x280>
 800929e:	2b05      	cmp	r3, #5
 80092a0:	bfc4      	itt	gt
 80092a2:	3b04      	subgt	r3, #4
 80092a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	f1a3 0302 	sub.w	r3, r3, #2
 80092ac:	bfcc      	ite	gt
 80092ae:	2400      	movgt	r4, #0
 80092b0:	2401      	movle	r4, #1
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d863      	bhi.n	800937e <_dtoa_r+0x296>
 80092b6:	e8df f003 	tbb	[pc, r3]
 80092ba:	372a      	.short	0x372a
 80092bc:	5535      	.short	0x5535
 80092be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80092c2:	441e      	add	r6, r3
 80092c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	bfc1      	itttt	gt
 80092cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092d0:	409f      	lslgt	r7, r3
 80092d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092da:	bfd6      	itet	le
 80092dc:	f1c3 0320 	rsble	r3, r3, #32
 80092e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80092e4:	fa04 f003 	lslle.w	r0, r4, r3
 80092e8:	f7f7 f934 	bl	8000554 <__aeabi_ui2d>
 80092ec:	2201      	movs	r2, #1
 80092ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092f2:	3e01      	subs	r6, #1
 80092f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80092f6:	e777      	b.n	80091e8 <_dtoa_r+0x100>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e7b8      	b.n	800926e <_dtoa_r+0x186>
 80092fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80092fe:	e7b7      	b.n	8009270 <_dtoa_r+0x188>
 8009300:	427b      	negs	r3, r7
 8009302:	930a      	str	r3, [sp, #40]	@ 0x28
 8009304:	2300      	movs	r3, #0
 8009306:	eba8 0807 	sub.w	r8, r8, r7
 800930a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800930c:	e7c4      	b.n	8009298 <_dtoa_r+0x1b0>
 800930e:	2300      	movs	r3, #0
 8009310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc35      	bgt.n	8009384 <_dtoa_r+0x29c>
 8009318:	2301      	movs	r3, #1
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	9307      	str	r3, [sp, #28]
 800931e:	461a      	mov	r2, r3
 8009320:	920e      	str	r2, [sp, #56]	@ 0x38
 8009322:	e00b      	b.n	800933c <_dtoa_r+0x254>
 8009324:	2301      	movs	r3, #1
 8009326:	e7f3      	b.n	8009310 <_dtoa_r+0x228>
 8009328:	2300      	movs	r3, #0
 800932a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800932c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	2b01      	cmp	r3, #1
 8009336:	9307      	str	r3, [sp, #28]
 8009338:	bfb8      	it	lt
 800933a:	2301      	movlt	r3, #1
 800933c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009340:	2100      	movs	r1, #0
 8009342:	2204      	movs	r2, #4
 8009344:	f102 0514 	add.w	r5, r2, #20
 8009348:	429d      	cmp	r5, r3
 800934a:	d91f      	bls.n	800938c <_dtoa_r+0x2a4>
 800934c:	6041      	str	r1, [r0, #4]
 800934e:	4658      	mov	r0, fp
 8009350:	f000 fd8e 	bl	8009e70 <_Balloc>
 8009354:	4682      	mov	sl, r0
 8009356:	2800      	cmp	r0, #0
 8009358:	d13c      	bne.n	80093d4 <_dtoa_r+0x2ec>
 800935a:	4b1b      	ldr	r3, [pc, #108]	@ (80093c8 <_dtoa_r+0x2e0>)
 800935c:	4602      	mov	r2, r0
 800935e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009362:	e6d8      	b.n	8009116 <_dtoa_r+0x2e>
 8009364:	2301      	movs	r3, #1
 8009366:	e7e0      	b.n	800932a <_dtoa_r+0x242>
 8009368:	2401      	movs	r4, #1
 800936a:	2300      	movs	r3, #0
 800936c:	9309      	str	r3, [sp, #36]	@ 0x24
 800936e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009370:	f04f 33ff 	mov.w	r3, #4294967295
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	2200      	movs	r2, #0
 800937a:	2312      	movs	r3, #18
 800937c:	e7d0      	b.n	8009320 <_dtoa_r+0x238>
 800937e:	2301      	movs	r3, #1
 8009380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009382:	e7f5      	b.n	8009370 <_dtoa_r+0x288>
 8009384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	9307      	str	r3, [sp, #28]
 800938a:	e7d7      	b.n	800933c <_dtoa_r+0x254>
 800938c:	3101      	adds	r1, #1
 800938e:	0052      	lsls	r2, r2, #1
 8009390:	e7d8      	b.n	8009344 <_dtoa_r+0x25c>
 8009392:	bf00      	nop
 8009394:	f3af 8000 	nop.w
 8009398:	636f4361 	.word	0x636f4361
 800939c:	3fd287a7 	.word	0x3fd287a7
 80093a0:	8b60c8b3 	.word	0x8b60c8b3
 80093a4:	3fc68a28 	.word	0x3fc68a28
 80093a8:	509f79fb 	.word	0x509f79fb
 80093ac:	3fd34413 	.word	0x3fd34413
 80093b0:	08020751 	.word	0x08020751
 80093b4:	08020768 	.word	0x08020768
 80093b8:	7ff00000 	.word	0x7ff00000
 80093bc:	08020721 	.word	0x08020721
 80093c0:	3ff80000 	.word	0x3ff80000
 80093c4:	08020860 	.word	0x08020860
 80093c8:	080207c0 	.word	0x080207c0
 80093cc:	0802074d 	.word	0x0802074d
 80093d0:	08020720 	.word	0x08020720
 80093d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093d8:	6018      	str	r0, [r3, #0]
 80093da:	9b07      	ldr	r3, [sp, #28]
 80093dc:	2b0e      	cmp	r3, #14
 80093de:	f200 80a4 	bhi.w	800952a <_dtoa_r+0x442>
 80093e2:	2c00      	cmp	r4, #0
 80093e4:	f000 80a1 	beq.w	800952a <_dtoa_r+0x442>
 80093e8:	2f00      	cmp	r7, #0
 80093ea:	dd33      	ble.n	8009454 <_dtoa_r+0x36c>
 80093ec:	4bad      	ldr	r3, [pc, #692]	@ (80096a4 <_dtoa_r+0x5bc>)
 80093ee:	f007 020f 	and.w	r2, r7, #15
 80093f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f6:	ed93 7b00 	vldr	d7, [r3]
 80093fa:	05f8      	lsls	r0, r7, #23
 80093fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009400:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009404:	d516      	bpl.n	8009434 <_dtoa_r+0x34c>
 8009406:	4ba8      	ldr	r3, [pc, #672]	@ (80096a8 <_dtoa_r+0x5c0>)
 8009408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800940c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009410:	f7f7 fa44 	bl	800089c <__aeabi_ddiv>
 8009414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009418:	f004 040f 	and.w	r4, r4, #15
 800941c:	2603      	movs	r6, #3
 800941e:	4da2      	ldr	r5, [pc, #648]	@ (80096a8 <_dtoa_r+0x5c0>)
 8009420:	b954      	cbnz	r4, 8009438 <_dtoa_r+0x350>
 8009422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800942a:	f7f7 fa37 	bl	800089c <__aeabi_ddiv>
 800942e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009432:	e028      	b.n	8009486 <_dtoa_r+0x39e>
 8009434:	2602      	movs	r6, #2
 8009436:	e7f2      	b.n	800941e <_dtoa_r+0x336>
 8009438:	07e1      	lsls	r1, r4, #31
 800943a:	d508      	bpl.n	800944e <_dtoa_r+0x366>
 800943c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009440:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009444:	f7f7 f900 	bl	8000648 <__aeabi_dmul>
 8009448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800944c:	3601      	adds	r6, #1
 800944e:	1064      	asrs	r4, r4, #1
 8009450:	3508      	adds	r5, #8
 8009452:	e7e5      	b.n	8009420 <_dtoa_r+0x338>
 8009454:	f000 80d2 	beq.w	80095fc <_dtoa_r+0x514>
 8009458:	427c      	negs	r4, r7
 800945a:	4b92      	ldr	r3, [pc, #584]	@ (80096a4 <_dtoa_r+0x5bc>)
 800945c:	4d92      	ldr	r5, [pc, #584]	@ (80096a8 <_dtoa_r+0x5c0>)
 800945e:	f004 020f 	and.w	r2, r4, #15
 8009462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800946e:	f7f7 f8eb 	bl	8000648 <__aeabi_dmul>
 8009472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009476:	1124      	asrs	r4, r4, #4
 8009478:	2300      	movs	r3, #0
 800947a:	2602      	movs	r6, #2
 800947c:	2c00      	cmp	r4, #0
 800947e:	f040 80b2 	bne.w	80095e6 <_dtoa_r+0x4fe>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1d3      	bne.n	800942e <_dtoa_r+0x346>
 8009486:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009488:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 80b7 	beq.w	8009600 <_dtoa_r+0x518>
 8009492:	4b86      	ldr	r3, [pc, #536]	@ (80096ac <_dtoa_r+0x5c4>)
 8009494:	2200      	movs	r2, #0
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f7f7 fb47 	bl	8000b2c <__aeabi_dcmplt>
 800949e:	2800      	cmp	r0, #0
 80094a0:	f000 80ae 	beq.w	8009600 <_dtoa_r+0x518>
 80094a4:	9b07      	ldr	r3, [sp, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80aa 	beq.w	8009600 <_dtoa_r+0x518>
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dd37      	ble.n	8009522 <_dtoa_r+0x43a>
 80094b2:	1e7b      	subs	r3, r7, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	4620      	mov	r0, r4
 80094b8:	4b7d      	ldr	r3, [pc, #500]	@ (80096b0 <_dtoa_r+0x5c8>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f7 f8c3 	bl	8000648 <__aeabi_dmul>
 80094c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094c6:	9c00      	ldr	r4, [sp, #0]
 80094c8:	3601      	adds	r6, #1
 80094ca:	4630      	mov	r0, r6
 80094cc:	f7f7 f852 	bl	8000574 <__aeabi_i2d>
 80094d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d4:	f7f7 f8b8 	bl	8000648 <__aeabi_dmul>
 80094d8:	4b76      	ldr	r3, [pc, #472]	@ (80096b4 <_dtoa_r+0x5cc>)
 80094da:	2200      	movs	r2, #0
 80094dc:	f7f6 fefe 	bl	80002dc <__adddf3>
 80094e0:	4605      	mov	r5, r0
 80094e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80094e6:	2c00      	cmp	r4, #0
 80094e8:	f040 808d 	bne.w	8009606 <_dtoa_r+0x51e>
 80094ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f0:	4b71      	ldr	r3, [pc, #452]	@ (80096b8 <_dtoa_r+0x5d0>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	f7f6 fef0 	bl	80002d8 <__aeabi_dsub>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009500:	462a      	mov	r2, r5
 8009502:	4633      	mov	r3, r6
 8009504:	f7f7 fb30 	bl	8000b68 <__aeabi_dcmpgt>
 8009508:	2800      	cmp	r0, #0
 800950a:	f040 828b 	bne.w	8009a24 <_dtoa_r+0x93c>
 800950e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009512:	462a      	mov	r2, r5
 8009514:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009518:	f7f7 fb08 	bl	8000b2c <__aeabi_dcmplt>
 800951c:	2800      	cmp	r0, #0
 800951e:	f040 8128 	bne.w	8009772 <_dtoa_r+0x68a>
 8009522:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009526:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800952a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800952c:	2b00      	cmp	r3, #0
 800952e:	f2c0 815a 	blt.w	80097e6 <_dtoa_r+0x6fe>
 8009532:	2f0e      	cmp	r7, #14
 8009534:	f300 8157 	bgt.w	80097e6 <_dtoa_r+0x6fe>
 8009538:	4b5a      	ldr	r3, [pc, #360]	@ (80096a4 <_dtoa_r+0x5bc>)
 800953a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800953e:	ed93 7b00 	vldr	d7, [r3]
 8009542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	ed8d 7b00 	vstr	d7, [sp]
 800954a:	da03      	bge.n	8009554 <_dtoa_r+0x46c>
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	2b00      	cmp	r3, #0
 8009550:	f340 8101 	ble.w	8009756 <_dtoa_r+0x66e>
 8009554:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009558:	4656      	mov	r6, sl
 800955a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800955e:	4620      	mov	r0, r4
 8009560:	4629      	mov	r1, r5
 8009562:	f7f7 f99b 	bl	800089c <__aeabi_ddiv>
 8009566:	f7f7 fb1f 	bl	8000ba8 <__aeabi_d2iz>
 800956a:	4680      	mov	r8, r0
 800956c:	f7f7 f802 	bl	8000574 <__aeabi_i2d>
 8009570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009574:	f7f7 f868 	bl	8000648 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4620      	mov	r0, r4
 800957e:	4629      	mov	r1, r5
 8009580:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009584:	f7f6 fea8 	bl	80002d8 <__aeabi_dsub>
 8009588:	f806 4b01 	strb.w	r4, [r6], #1
 800958c:	9d07      	ldr	r5, [sp, #28]
 800958e:	eba6 040a 	sub.w	r4, r6, sl
 8009592:	42a5      	cmp	r5, r4
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	f040 8117 	bne.w	80097ca <_dtoa_r+0x6e2>
 800959c:	f7f6 fe9e 	bl	80002dc <__adddf3>
 80095a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095a4:	4604      	mov	r4, r0
 80095a6:	460d      	mov	r5, r1
 80095a8:	f7f7 fade 	bl	8000b68 <__aeabi_dcmpgt>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f040 80f9 	bne.w	80097a4 <_dtoa_r+0x6bc>
 80095b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095b6:	4620      	mov	r0, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7f7 faad 	bl	8000b18 <__aeabi_dcmpeq>
 80095be:	b118      	cbz	r0, 80095c8 <_dtoa_r+0x4e0>
 80095c0:	f018 0f01 	tst.w	r8, #1
 80095c4:	f040 80ee 	bne.w	80097a4 <_dtoa_r+0x6bc>
 80095c8:	4649      	mov	r1, r9
 80095ca:	4658      	mov	r0, fp
 80095cc:	f000 fc90 	bl	8009ef0 <_Bfree>
 80095d0:	2300      	movs	r3, #0
 80095d2:	7033      	strb	r3, [r6, #0]
 80095d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095d6:	3701      	adds	r7, #1
 80095d8:	601f      	str	r7, [r3, #0]
 80095da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 831d 	beq.w	8009c1c <_dtoa_r+0xb34>
 80095e2:	601e      	str	r6, [r3, #0]
 80095e4:	e31a      	b.n	8009c1c <_dtoa_r+0xb34>
 80095e6:	07e2      	lsls	r2, r4, #31
 80095e8:	d505      	bpl.n	80095f6 <_dtoa_r+0x50e>
 80095ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ee:	f7f7 f82b 	bl	8000648 <__aeabi_dmul>
 80095f2:	3601      	adds	r6, #1
 80095f4:	2301      	movs	r3, #1
 80095f6:	1064      	asrs	r4, r4, #1
 80095f8:	3508      	adds	r5, #8
 80095fa:	e73f      	b.n	800947c <_dtoa_r+0x394>
 80095fc:	2602      	movs	r6, #2
 80095fe:	e742      	b.n	8009486 <_dtoa_r+0x39e>
 8009600:	9c07      	ldr	r4, [sp, #28]
 8009602:	9704      	str	r7, [sp, #16]
 8009604:	e761      	b.n	80094ca <_dtoa_r+0x3e2>
 8009606:	4b27      	ldr	r3, [pc, #156]	@ (80096a4 <_dtoa_r+0x5bc>)
 8009608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800960a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800960e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009612:	4454      	add	r4, sl
 8009614:	2900      	cmp	r1, #0
 8009616:	d053      	beq.n	80096c0 <_dtoa_r+0x5d8>
 8009618:	4928      	ldr	r1, [pc, #160]	@ (80096bc <_dtoa_r+0x5d4>)
 800961a:	2000      	movs	r0, #0
 800961c:	f7f7 f93e 	bl	800089c <__aeabi_ddiv>
 8009620:	4633      	mov	r3, r6
 8009622:	462a      	mov	r2, r5
 8009624:	f7f6 fe58 	bl	80002d8 <__aeabi_dsub>
 8009628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800962c:	4656      	mov	r6, sl
 800962e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009632:	f7f7 fab9 	bl	8000ba8 <__aeabi_d2iz>
 8009636:	4605      	mov	r5, r0
 8009638:	f7f6 ff9c 	bl	8000574 <__aeabi_i2d>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009644:	f7f6 fe48 	bl	80002d8 <__aeabi_dsub>
 8009648:	3530      	adds	r5, #48	@ 0x30
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009652:	f806 5b01 	strb.w	r5, [r6], #1
 8009656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800965a:	f7f7 fa67 	bl	8000b2c <__aeabi_dcmplt>
 800965e:	2800      	cmp	r0, #0
 8009660:	d171      	bne.n	8009746 <_dtoa_r+0x65e>
 8009662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009666:	4911      	ldr	r1, [pc, #68]	@ (80096ac <_dtoa_r+0x5c4>)
 8009668:	2000      	movs	r0, #0
 800966a:	f7f6 fe35 	bl	80002d8 <__aeabi_dsub>
 800966e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009672:	f7f7 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 8009676:	2800      	cmp	r0, #0
 8009678:	f040 8095 	bne.w	80097a6 <_dtoa_r+0x6be>
 800967c:	42a6      	cmp	r6, r4
 800967e:	f43f af50 	beq.w	8009522 <_dtoa_r+0x43a>
 8009682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009686:	4b0a      	ldr	r3, [pc, #40]	@ (80096b0 <_dtoa_r+0x5c8>)
 8009688:	2200      	movs	r2, #0
 800968a:	f7f6 ffdd 	bl	8000648 <__aeabi_dmul>
 800968e:	4b08      	ldr	r3, [pc, #32]	@ (80096b0 <_dtoa_r+0x5c8>)
 8009690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009694:	2200      	movs	r2, #0
 8009696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800969a:	f7f6 ffd5 	bl	8000648 <__aeabi_dmul>
 800969e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096a2:	e7c4      	b.n	800962e <_dtoa_r+0x546>
 80096a4:	08020860 	.word	0x08020860
 80096a8:	08020838 	.word	0x08020838
 80096ac:	3ff00000 	.word	0x3ff00000
 80096b0:	40240000 	.word	0x40240000
 80096b4:	401c0000 	.word	0x401c0000
 80096b8:	40140000 	.word	0x40140000
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	4631      	mov	r1, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	f7f6 ffc0 	bl	8000648 <__aeabi_dmul>
 80096c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80096ce:	4656      	mov	r6, sl
 80096d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096d4:	f7f7 fa68 	bl	8000ba8 <__aeabi_d2iz>
 80096d8:	4605      	mov	r5, r0
 80096da:	f7f6 ff4b 	bl	8000574 <__aeabi_i2d>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096e6:	f7f6 fdf7 	bl	80002d8 <__aeabi_dsub>
 80096ea:	3530      	adds	r5, #48	@ 0x30
 80096ec:	f806 5b01 	strb.w	r5, [r6], #1
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	42a6      	cmp	r6, r4
 80096f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	d124      	bne.n	800974a <_dtoa_r+0x662>
 8009700:	4bac      	ldr	r3, [pc, #688]	@ (80099b4 <_dtoa_r+0x8cc>)
 8009702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009706:	f7f6 fde9 	bl	80002dc <__adddf3>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009712:	f7f7 fa29 	bl	8000b68 <__aeabi_dcmpgt>
 8009716:	2800      	cmp	r0, #0
 8009718:	d145      	bne.n	80097a6 <_dtoa_r+0x6be>
 800971a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800971e:	49a5      	ldr	r1, [pc, #660]	@ (80099b4 <_dtoa_r+0x8cc>)
 8009720:	2000      	movs	r0, #0
 8009722:	f7f6 fdd9 	bl	80002d8 <__aeabi_dsub>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800972e:	f7f7 f9fd 	bl	8000b2c <__aeabi_dcmplt>
 8009732:	2800      	cmp	r0, #0
 8009734:	f43f aef5 	beq.w	8009522 <_dtoa_r+0x43a>
 8009738:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800973a:	1e73      	subs	r3, r6, #1
 800973c:	9315      	str	r3, [sp, #84]	@ 0x54
 800973e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009742:	2b30      	cmp	r3, #48	@ 0x30
 8009744:	d0f8      	beq.n	8009738 <_dtoa_r+0x650>
 8009746:	9f04      	ldr	r7, [sp, #16]
 8009748:	e73e      	b.n	80095c8 <_dtoa_r+0x4e0>
 800974a:	4b9b      	ldr	r3, [pc, #620]	@ (80099b8 <_dtoa_r+0x8d0>)
 800974c:	f7f6 ff7c 	bl	8000648 <__aeabi_dmul>
 8009750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009754:	e7bc      	b.n	80096d0 <_dtoa_r+0x5e8>
 8009756:	d10c      	bne.n	8009772 <_dtoa_r+0x68a>
 8009758:	4b98      	ldr	r3, [pc, #608]	@ (80099bc <_dtoa_r+0x8d4>)
 800975a:	2200      	movs	r2, #0
 800975c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009760:	f7f6 ff72 	bl	8000648 <__aeabi_dmul>
 8009764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009768:	f7f7 f9f4 	bl	8000b54 <__aeabi_dcmpge>
 800976c:	2800      	cmp	r0, #0
 800976e:	f000 8157 	beq.w	8009a20 <_dtoa_r+0x938>
 8009772:	2400      	movs	r4, #0
 8009774:	4625      	mov	r5, r4
 8009776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009778:	43db      	mvns	r3, r3
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	4656      	mov	r6, sl
 800977e:	2700      	movs	r7, #0
 8009780:	4621      	mov	r1, r4
 8009782:	4658      	mov	r0, fp
 8009784:	f000 fbb4 	bl	8009ef0 <_Bfree>
 8009788:	2d00      	cmp	r5, #0
 800978a:	d0dc      	beq.n	8009746 <_dtoa_r+0x65e>
 800978c:	b12f      	cbz	r7, 800979a <_dtoa_r+0x6b2>
 800978e:	42af      	cmp	r7, r5
 8009790:	d003      	beq.n	800979a <_dtoa_r+0x6b2>
 8009792:	4639      	mov	r1, r7
 8009794:	4658      	mov	r0, fp
 8009796:	f000 fbab 	bl	8009ef0 <_Bfree>
 800979a:	4629      	mov	r1, r5
 800979c:	4658      	mov	r0, fp
 800979e:	f000 fba7 	bl	8009ef0 <_Bfree>
 80097a2:	e7d0      	b.n	8009746 <_dtoa_r+0x65e>
 80097a4:	9704      	str	r7, [sp, #16]
 80097a6:	4633      	mov	r3, r6
 80097a8:	461e      	mov	r6, r3
 80097aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097ae:	2a39      	cmp	r2, #57	@ 0x39
 80097b0:	d107      	bne.n	80097c2 <_dtoa_r+0x6da>
 80097b2:	459a      	cmp	sl, r3
 80097b4:	d1f8      	bne.n	80097a8 <_dtoa_r+0x6c0>
 80097b6:	9a04      	ldr	r2, [sp, #16]
 80097b8:	3201      	adds	r2, #1
 80097ba:	9204      	str	r2, [sp, #16]
 80097bc:	2230      	movs	r2, #48	@ 0x30
 80097be:	f88a 2000 	strb.w	r2, [sl]
 80097c2:	781a      	ldrb	r2, [r3, #0]
 80097c4:	3201      	adds	r2, #1
 80097c6:	701a      	strb	r2, [r3, #0]
 80097c8:	e7bd      	b.n	8009746 <_dtoa_r+0x65e>
 80097ca:	4b7b      	ldr	r3, [pc, #492]	@ (80099b8 <_dtoa_r+0x8d0>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	f7f6 ff3b 	bl	8000648 <__aeabi_dmul>
 80097d2:	2200      	movs	r2, #0
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	f7f7 f99d 	bl	8000b18 <__aeabi_dcmpeq>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f43f aebb 	beq.w	800955a <_dtoa_r+0x472>
 80097e4:	e6f0      	b.n	80095c8 <_dtoa_r+0x4e0>
 80097e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	f000 80db 	beq.w	80099a4 <_dtoa_r+0x8bc>
 80097ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097f0:	2a01      	cmp	r2, #1
 80097f2:	f300 80bf 	bgt.w	8009974 <_dtoa_r+0x88c>
 80097f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	f000 80b7 	beq.w	800996c <_dtoa_r+0x884>
 80097fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009802:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009804:	4646      	mov	r6, r8
 8009806:	9a08      	ldr	r2, [sp, #32]
 8009808:	2101      	movs	r1, #1
 800980a:	441a      	add	r2, r3
 800980c:	4658      	mov	r0, fp
 800980e:	4498      	add	r8, r3
 8009810:	9208      	str	r2, [sp, #32]
 8009812:	f000 fc21 	bl	800a058 <__i2b>
 8009816:	4605      	mov	r5, r0
 8009818:	b15e      	cbz	r6, 8009832 <_dtoa_r+0x74a>
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd08      	ble.n	8009832 <_dtoa_r+0x74a>
 8009820:	42b3      	cmp	r3, r6
 8009822:	9a08      	ldr	r2, [sp, #32]
 8009824:	bfa8      	it	ge
 8009826:	4633      	movge	r3, r6
 8009828:	eba8 0803 	sub.w	r8, r8, r3
 800982c:	1af6      	subs	r6, r6, r3
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009834:	b1f3      	cbz	r3, 8009874 <_dtoa_r+0x78c>
 8009836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80b7 	beq.w	80099ac <_dtoa_r+0x8c4>
 800983e:	b18c      	cbz	r4, 8009864 <_dtoa_r+0x77c>
 8009840:	4629      	mov	r1, r5
 8009842:	4622      	mov	r2, r4
 8009844:	4658      	mov	r0, fp
 8009846:	f000 fcc7 	bl	800a1d8 <__pow5mult>
 800984a:	464a      	mov	r2, r9
 800984c:	4601      	mov	r1, r0
 800984e:	4605      	mov	r5, r0
 8009850:	4658      	mov	r0, fp
 8009852:	f000 fc17 	bl	800a084 <__multiply>
 8009856:	4649      	mov	r1, r9
 8009858:	9004      	str	r0, [sp, #16]
 800985a:	4658      	mov	r0, fp
 800985c:	f000 fb48 	bl	8009ef0 <_Bfree>
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	4699      	mov	r9, r3
 8009864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009866:	1b1a      	subs	r2, r3, r4
 8009868:	d004      	beq.n	8009874 <_dtoa_r+0x78c>
 800986a:	4649      	mov	r1, r9
 800986c:	4658      	mov	r0, fp
 800986e:	f000 fcb3 	bl	800a1d8 <__pow5mult>
 8009872:	4681      	mov	r9, r0
 8009874:	2101      	movs	r1, #1
 8009876:	4658      	mov	r0, fp
 8009878:	f000 fbee 	bl	800a058 <__i2b>
 800987c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800987e:	4604      	mov	r4, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 81cf 	beq.w	8009c24 <_dtoa_r+0xb3c>
 8009886:	461a      	mov	r2, r3
 8009888:	4601      	mov	r1, r0
 800988a:	4658      	mov	r0, fp
 800988c:	f000 fca4 	bl	800a1d8 <__pow5mult>
 8009890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009892:	2b01      	cmp	r3, #1
 8009894:	4604      	mov	r4, r0
 8009896:	f300 8095 	bgt.w	80099c4 <_dtoa_r+0x8dc>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 8087 	bne.w	80099b0 <_dtoa_r+0x8c8>
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f040 8089 	bne.w	80099c0 <_dtoa_r+0x8d8>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098b4:	0d1b      	lsrs	r3, r3, #20
 80098b6:	051b      	lsls	r3, r3, #20
 80098b8:	b12b      	cbz	r3, 80098c6 <_dtoa_r+0x7de>
 80098ba:	9b08      	ldr	r3, [sp, #32]
 80098bc:	3301      	adds	r3, #1
 80098be:	9308      	str	r3, [sp, #32]
 80098c0:	f108 0801 	add.w	r8, r8, #1
 80098c4:	2301      	movs	r3, #1
 80098c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 81b0 	beq.w	8009c30 <_dtoa_r+0xb48>
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098d6:	6918      	ldr	r0, [r3, #16]
 80098d8:	f000 fb72 	bl	8009fc0 <__hi0bits>
 80098dc:	f1c0 0020 	rsb	r0, r0, #32
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	4418      	add	r0, r3
 80098e4:	f010 001f 	ands.w	r0, r0, #31
 80098e8:	d077      	beq.n	80099da <_dtoa_r+0x8f2>
 80098ea:	f1c0 0320 	rsb	r3, r0, #32
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	dd6b      	ble.n	80099ca <_dtoa_r+0x8e2>
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	f1c0 001c 	rsb	r0, r0, #28
 80098f8:	4403      	add	r3, r0
 80098fa:	4480      	add	r8, r0
 80098fc:	4406      	add	r6, r0
 80098fe:	9308      	str	r3, [sp, #32]
 8009900:	f1b8 0f00 	cmp.w	r8, #0
 8009904:	dd05      	ble.n	8009912 <_dtoa_r+0x82a>
 8009906:	4649      	mov	r1, r9
 8009908:	4642      	mov	r2, r8
 800990a:	4658      	mov	r0, fp
 800990c:	f000 fcbe 	bl	800a28c <__lshift>
 8009910:	4681      	mov	r9, r0
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	2b00      	cmp	r3, #0
 8009916:	dd05      	ble.n	8009924 <_dtoa_r+0x83c>
 8009918:	4621      	mov	r1, r4
 800991a:	461a      	mov	r2, r3
 800991c:	4658      	mov	r0, fp
 800991e:	f000 fcb5 	bl	800a28c <__lshift>
 8009922:	4604      	mov	r4, r0
 8009924:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009926:	2b00      	cmp	r3, #0
 8009928:	d059      	beq.n	80099de <_dtoa_r+0x8f6>
 800992a:	4621      	mov	r1, r4
 800992c:	4648      	mov	r0, r9
 800992e:	f000 fd19 	bl	800a364 <__mcmp>
 8009932:	2800      	cmp	r0, #0
 8009934:	da53      	bge.n	80099de <_dtoa_r+0x8f6>
 8009936:	1e7b      	subs	r3, r7, #1
 8009938:	9304      	str	r3, [sp, #16]
 800993a:	4649      	mov	r1, r9
 800993c:	2300      	movs	r3, #0
 800993e:	220a      	movs	r2, #10
 8009940:	4658      	mov	r0, fp
 8009942:	f000 faf7 	bl	8009f34 <__multadd>
 8009946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009948:	4681      	mov	r9, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8172 	beq.w	8009c34 <_dtoa_r+0xb4c>
 8009950:	2300      	movs	r3, #0
 8009952:	4629      	mov	r1, r5
 8009954:	220a      	movs	r2, #10
 8009956:	4658      	mov	r0, fp
 8009958:	f000 faec 	bl	8009f34 <__multadd>
 800995c:	9b00      	ldr	r3, [sp, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	4605      	mov	r5, r0
 8009962:	dc67      	bgt.n	8009a34 <_dtoa_r+0x94c>
 8009964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009966:	2b02      	cmp	r3, #2
 8009968:	dc41      	bgt.n	80099ee <_dtoa_r+0x906>
 800996a:	e063      	b.n	8009a34 <_dtoa_r+0x94c>
 800996c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800996e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009972:	e746      	b.n	8009802 <_dtoa_r+0x71a>
 8009974:	9b07      	ldr	r3, [sp, #28]
 8009976:	1e5c      	subs	r4, r3, #1
 8009978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800997a:	42a3      	cmp	r3, r4
 800997c:	bfbf      	itttt	lt
 800997e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009980:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009982:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009984:	1ae3      	sublt	r3, r4, r3
 8009986:	bfb4      	ite	lt
 8009988:	18d2      	addlt	r2, r2, r3
 800998a:	1b1c      	subge	r4, r3, r4
 800998c:	9b07      	ldr	r3, [sp, #28]
 800998e:	bfbc      	itt	lt
 8009990:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009992:	2400      	movlt	r4, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb5      	itete	lt
 8009998:	eba8 0603 	sublt.w	r6, r8, r3
 800999c:	9b07      	ldrge	r3, [sp, #28]
 800999e:	2300      	movlt	r3, #0
 80099a0:	4646      	movge	r6, r8
 80099a2:	e730      	b.n	8009806 <_dtoa_r+0x71e>
 80099a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80099a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80099a8:	4646      	mov	r6, r8
 80099aa:	e735      	b.n	8009818 <_dtoa_r+0x730>
 80099ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099ae:	e75c      	b.n	800986a <_dtoa_r+0x782>
 80099b0:	2300      	movs	r3, #0
 80099b2:	e788      	b.n	80098c6 <_dtoa_r+0x7de>
 80099b4:	3fe00000 	.word	0x3fe00000
 80099b8:	40240000 	.word	0x40240000
 80099bc:	40140000 	.word	0x40140000
 80099c0:	9b02      	ldr	r3, [sp, #8]
 80099c2:	e780      	b.n	80098c6 <_dtoa_r+0x7de>
 80099c4:	2300      	movs	r3, #0
 80099c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099c8:	e782      	b.n	80098d0 <_dtoa_r+0x7e8>
 80099ca:	d099      	beq.n	8009900 <_dtoa_r+0x818>
 80099cc:	9a08      	ldr	r2, [sp, #32]
 80099ce:	331c      	adds	r3, #28
 80099d0:	441a      	add	r2, r3
 80099d2:	4498      	add	r8, r3
 80099d4:	441e      	add	r6, r3
 80099d6:	9208      	str	r2, [sp, #32]
 80099d8:	e792      	b.n	8009900 <_dtoa_r+0x818>
 80099da:	4603      	mov	r3, r0
 80099dc:	e7f6      	b.n	80099cc <_dtoa_r+0x8e4>
 80099de:	9b07      	ldr	r3, [sp, #28]
 80099e0:	9704      	str	r7, [sp, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	dc20      	bgt.n	8009a28 <_dtoa_r+0x940>
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	dd1e      	ble.n	8009a2c <_dtoa_r+0x944>
 80099ee:	9b00      	ldr	r3, [sp, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f47f aec0 	bne.w	8009776 <_dtoa_r+0x68e>
 80099f6:	4621      	mov	r1, r4
 80099f8:	2205      	movs	r2, #5
 80099fa:	4658      	mov	r0, fp
 80099fc:	f000 fa9a 	bl	8009f34 <__multadd>
 8009a00:	4601      	mov	r1, r0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4648      	mov	r0, r9
 8009a06:	f000 fcad 	bl	800a364 <__mcmp>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f77f aeb3 	ble.w	8009776 <_dtoa_r+0x68e>
 8009a10:	4656      	mov	r6, sl
 8009a12:	2331      	movs	r3, #49	@ 0x31
 8009a14:	f806 3b01 	strb.w	r3, [r6], #1
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	e6ae      	b.n	800977e <_dtoa_r+0x696>
 8009a20:	9c07      	ldr	r4, [sp, #28]
 8009a22:	9704      	str	r7, [sp, #16]
 8009a24:	4625      	mov	r5, r4
 8009a26:	e7f3      	b.n	8009a10 <_dtoa_r+0x928>
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 8104 	beq.w	8009c3c <_dtoa_r+0xb54>
 8009a34:	2e00      	cmp	r6, #0
 8009a36:	dd05      	ble.n	8009a44 <_dtoa_r+0x95c>
 8009a38:	4629      	mov	r1, r5
 8009a3a:	4632      	mov	r2, r6
 8009a3c:	4658      	mov	r0, fp
 8009a3e:	f000 fc25 	bl	800a28c <__lshift>
 8009a42:	4605      	mov	r5, r0
 8009a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d05a      	beq.n	8009b00 <_dtoa_r+0xa18>
 8009a4a:	6869      	ldr	r1, [r5, #4]
 8009a4c:	4658      	mov	r0, fp
 8009a4e:	f000 fa0f 	bl	8009e70 <_Balloc>
 8009a52:	4606      	mov	r6, r0
 8009a54:	b928      	cbnz	r0, 8009a62 <_dtoa_r+0x97a>
 8009a56:	4b84      	ldr	r3, [pc, #528]	@ (8009c68 <_dtoa_r+0xb80>)
 8009a58:	4602      	mov	r2, r0
 8009a5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a5e:	f7ff bb5a 	b.w	8009116 <_dtoa_r+0x2e>
 8009a62:	692a      	ldr	r2, [r5, #16]
 8009a64:	3202      	adds	r2, #2
 8009a66:	0092      	lsls	r2, r2, #2
 8009a68:	f105 010c 	add.w	r1, r5, #12
 8009a6c:	300c      	adds	r0, #12
 8009a6e:	f7ff faa2 	bl	8008fb6 <memcpy>
 8009a72:	2201      	movs	r2, #1
 8009a74:	4631      	mov	r1, r6
 8009a76:	4658      	mov	r0, fp
 8009a78:	f000 fc08 	bl	800a28c <__lshift>
 8009a7c:	f10a 0301 	add.w	r3, sl, #1
 8009a80:	9307      	str	r3, [sp, #28]
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	4453      	add	r3, sl
 8009a86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	462f      	mov	r7, r5
 8009a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a92:	4605      	mov	r5, r0
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	4621      	mov	r1, r4
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	f7ff fa98 	bl	8008fd2 <quorem>
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	9002      	str	r0, [sp, #8]
 8009aa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009aaa:	4648      	mov	r0, r9
 8009aac:	f000 fc5a 	bl	800a364 <__mcmp>
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	9008      	str	r0, [sp, #32]
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4658      	mov	r0, fp
 8009ab8:	f000 fc70 	bl	800a39c <__mdiff>
 8009abc:	68c2      	ldr	r2, [r0, #12]
 8009abe:	4606      	mov	r6, r0
 8009ac0:	bb02      	cbnz	r2, 8009b04 <_dtoa_r+0xa1c>
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	4648      	mov	r0, r9
 8009ac6:	f000 fc4d 	bl	800a364 <__mcmp>
 8009aca:	4602      	mov	r2, r0
 8009acc:	4631      	mov	r1, r6
 8009ace:	4658      	mov	r0, fp
 8009ad0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ad2:	f000 fa0d 	bl	8009ef0 <_Bfree>
 8009ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ada:	9e07      	ldr	r6, [sp, #28]
 8009adc:	ea43 0102 	orr.w	r1, r3, r2
 8009ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae2:	4319      	orrs	r1, r3
 8009ae4:	d110      	bne.n	8009b08 <_dtoa_r+0xa20>
 8009ae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009aea:	d029      	beq.n	8009b40 <_dtoa_r+0xa58>
 8009aec:	9b08      	ldr	r3, [sp, #32]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	dd02      	ble.n	8009af8 <_dtoa_r+0xa10>
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009af8:	9b00      	ldr	r3, [sp, #0]
 8009afa:	f883 8000 	strb.w	r8, [r3]
 8009afe:	e63f      	b.n	8009780 <_dtoa_r+0x698>
 8009b00:	4628      	mov	r0, r5
 8009b02:	e7bb      	b.n	8009a7c <_dtoa_r+0x994>
 8009b04:	2201      	movs	r2, #1
 8009b06:	e7e1      	b.n	8009acc <_dtoa_r+0x9e4>
 8009b08:	9b08      	ldr	r3, [sp, #32]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	db04      	blt.n	8009b18 <_dtoa_r+0xa30>
 8009b0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b10:	430b      	orrs	r3, r1
 8009b12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b14:	430b      	orrs	r3, r1
 8009b16:	d120      	bne.n	8009b5a <_dtoa_r+0xa72>
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	dded      	ble.n	8009af8 <_dtoa_r+0xa10>
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4658      	mov	r0, fp
 8009b22:	f000 fbb3 	bl	800a28c <__lshift>
 8009b26:	4621      	mov	r1, r4
 8009b28:	4681      	mov	r9, r0
 8009b2a:	f000 fc1b 	bl	800a364 <__mcmp>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	dc03      	bgt.n	8009b3a <_dtoa_r+0xa52>
 8009b32:	d1e1      	bne.n	8009af8 <_dtoa_r+0xa10>
 8009b34:	f018 0f01 	tst.w	r8, #1
 8009b38:	d0de      	beq.n	8009af8 <_dtoa_r+0xa10>
 8009b3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b3e:	d1d8      	bne.n	8009af2 <_dtoa_r+0xa0a>
 8009b40:	9a00      	ldr	r2, [sp, #0]
 8009b42:	2339      	movs	r3, #57	@ 0x39
 8009b44:	7013      	strb	r3, [r2, #0]
 8009b46:	4633      	mov	r3, r6
 8009b48:	461e      	mov	r6, r3
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b50:	2a39      	cmp	r2, #57	@ 0x39
 8009b52:	d052      	beq.n	8009bfa <_dtoa_r+0xb12>
 8009b54:	3201      	adds	r2, #1
 8009b56:	701a      	strb	r2, [r3, #0]
 8009b58:	e612      	b.n	8009780 <_dtoa_r+0x698>
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	dd07      	ble.n	8009b6e <_dtoa_r+0xa86>
 8009b5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b62:	d0ed      	beq.n	8009b40 <_dtoa_r+0xa58>
 8009b64:	9a00      	ldr	r2, [sp, #0]
 8009b66:	f108 0301 	add.w	r3, r8, #1
 8009b6a:	7013      	strb	r3, [r2, #0]
 8009b6c:	e608      	b.n	8009780 <_dtoa_r+0x698>
 8009b6e:	9b07      	ldr	r3, [sp, #28]
 8009b70:	9a07      	ldr	r2, [sp, #28]
 8009b72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d028      	beq.n	8009bce <_dtoa_r+0xae6>
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	2300      	movs	r3, #0
 8009b80:	220a      	movs	r2, #10
 8009b82:	4658      	mov	r0, fp
 8009b84:	f000 f9d6 	bl	8009f34 <__multadd>
 8009b88:	42af      	cmp	r7, r5
 8009b8a:	4681      	mov	r9, r0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	f04f 020a 	mov.w	r2, #10
 8009b94:	4639      	mov	r1, r7
 8009b96:	4658      	mov	r0, fp
 8009b98:	d107      	bne.n	8009baa <_dtoa_r+0xac2>
 8009b9a:	f000 f9cb 	bl	8009f34 <__multadd>
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	9b07      	ldr	r3, [sp, #28]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	e774      	b.n	8009a94 <_dtoa_r+0x9ac>
 8009baa:	f000 f9c3 	bl	8009f34 <__multadd>
 8009bae:	4629      	mov	r1, r5
 8009bb0:	4607      	mov	r7, r0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	220a      	movs	r2, #10
 8009bb6:	4658      	mov	r0, fp
 8009bb8:	f000 f9bc 	bl	8009f34 <__multadd>
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	e7f0      	b.n	8009ba2 <_dtoa_r+0xaba>
 8009bc0:	9b00      	ldr	r3, [sp, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bfcc      	ite	gt
 8009bc6:	461e      	movgt	r6, r3
 8009bc8:	2601      	movle	r6, #1
 8009bca:	4456      	add	r6, sl
 8009bcc:	2700      	movs	r7, #0
 8009bce:	4649      	mov	r1, r9
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	4658      	mov	r0, fp
 8009bd4:	f000 fb5a 	bl	800a28c <__lshift>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4681      	mov	r9, r0
 8009bdc:	f000 fbc2 	bl	800a364 <__mcmp>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	dcb0      	bgt.n	8009b46 <_dtoa_r+0xa5e>
 8009be4:	d102      	bne.n	8009bec <_dtoa_r+0xb04>
 8009be6:	f018 0f01 	tst.w	r8, #1
 8009bea:	d1ac      	bne.n	8009b46 <_dtoa_r+0xa5e>
 8009bec:	4633      	mov	r3, r6
 8009bee:	461e      	mov	r6, r3
 8009bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bf4:	2a30      	cmp	r2, #48	@ 0x30
 8009bf6:	d0fa      	beq.n	8009bee <_dtoa_r+0xb06>
 8009bf8:	e5c2      	b.n	8009780 <_dtoa_r+0x698>
 8009bfa:	459a      	cmp	sl, r3
 8009bfc:	d1a4      	bne.n	8009b48 <_dtoa_r+0xa60>
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	3301      	adds	r3, #1
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	2331      	movs	r3, #49	@ 0x31
 8009c06:	f88a 3000 	strb.w	r3, [sl]
 8009c0a:	e5b9      	b.n	8009780 <_dtoa_r+0x698>
 8009c0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c6c <_dtoa_r+0xb84>
 8009c12:	b11b      	cbz	r3, 8009c1c <_dtoa_r+0xb34>
 8009c14:	f10a 0308 	add.w	r3, sl, #8
 8009c18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	b019      	add	sp, #100	@ 0x64
 8009c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	f77f ae37 	ble.w	800989a <_dtoa_r+0x7b2>
 8009c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c30:	2001      	movs	r0, #1
 8009c32:	e655      	b.n	80098e0 <_dtoa_r+0x7f8>
 8009c34:	9b00      	ldr	r3, [sp, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f77f aed6 	ble.w	80099e8 <_dtoa_r+0x900>
 8009c3c:	4656      	mov	r6, sl
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4648      	mov	r0, r9
 8009c42:	f7ff f9c6 	bl	8008fd2 <quorem>
 8009c46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c4a:	f806 8b01 	strb.w	r8, [r6], #1
 8009c4e:	9b00      	ldr	r3, [sp, #0]
 8009c50:	eba6 020a 	sub.w	r2, r6, sl
 8009c54:	4293      	cmp	r3, r2
 8009c56:	ddb3      	ble.n	8009bc0 <_dtoa_r+0xad8>
 8009c58:	4649      	mov	r1, r9
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f000 f968 	bl	8009f34 <__multadd>
 8009c64:	4681      	mov	r9, r0
 8009c66:	e7ea      	b.n	8009c3e <_dtoa_r+0xb56>
 8009c68:	080207c0 	.word	0x080207c0
 8009c6c:	08020744 	.word	0x08020744

08009c70 <_free_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4605      	mov	r5, r0
 8009c74:	2900      	cmp	r1, #0
 8009c76:	d041      	beq.n	8009cfc <_free_r+0x8c>
 8009c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c7c:	1f0c      	subs	r4, r1, #4
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bfb8      	it	lt
 8009c82:	18e4      	addlt	r4, r4, r3
 8009c84:	f000 f8e8 	bl	8009e58 <__malloc_lock>
 8009c88:	4a1d      	ldr	r2, [pc, #116]	@ (8009d00 <_free_r+0x90>)
 8009c8a:	6813      	ldr	r3, [r2, #0]
 8009c8c:	b933      	cbnz	r3, 8009c9c <_free_r+0x2c>
 8009c8e:	6063      	str	r3, [r4, #4]
 8009c90:	6014      	str	r4, [r2, #0]
 8009c92:	4628      	mov	r0, r5
 8009c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c98:	f000 b8e4 	b.w	8009e64 <__malloc_unlock>
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	d908      	bls.n	8009cb2 <_free_r+0x42>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	1821      	adds	r1, r4, r0
 8009ca4:	428b      	cmp	r3, r1
 8009ca6:	bf01      	itttt	eq
 8009ca8:	6819      	ldreq	r1, [r3, #0]
 8009caa:	685b      	ldreq	r3, [r3, #4]
 8009cac:	1809      	addeq	r1, r1, r0
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	e7ed      	b.n	8009c8e <_free_r+0x1e>
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b10b      	cbz	r3, 8009cbc <_free_r+0x4c>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d9fa      	bls.n	8009cb2 <_free_r+0x42>
 8009cbc:	6811      	ldr	r1, [r2, #0]
 8009cbe:	1850      	adds	r0, r2, r1
 8009cc0:	42a0      	cmp	r0, r4
 8009cc2:	d10b      	bne.n	8009cdc <_free_r+0x6c>
 8009cc4:	6820      	ldr	r0, [r4, #0]
 8009cc6:	4401      	add	r1, r0
 8009cc8:	1850      	adds	r0, r2, r1
 8009cca:	4283      	cmp	r3, r0
 8009ccc:	6011      	str	r1, [r2, #0]
 8009cce:	d1e0      	bne.n	8009c92 <_free_r+0x22>
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	6053      	str	r3, [r2, #4]
 8009cd6:	4408      	add	r0, r1
 8009cd8:	6010      	str	r0, [r2, #0]
 8009cda:	e7da      	b.n	8009c92 <_free_r+0x22>
 8009cdc:	d902      	bls.n	8009ce4 <_free_r+0x74>
 8009cde:	230c      	movs	r3, #12
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	e7d6      	b.n	8009c92 <_free_r+0x22>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	1821      	adds	r1, r4, r0
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	bf04      	itt	eq
 8009cec:	6819      	ldreq	r1, [r3, #0]
 8009cee:	685b      	ldreq	r3, [r3, #4]
 8009cf0:	6063      	str	r3, [r4, #4]
 8009cf2:	bf04      	itt	eq
 8009cf4:	1809      	addeq	r1, r1, r0
 8009cf6:	6021      	streq	r1, [r4, #0]
 8009cf8:	6054      	str	r4, [r2, #4]
 8009cfa:	e7ca      	b.n	8009c92 <_free_r+0x22>
 8009cfc:	bd38      	pop	{r3, r4, r5, pc}
 8009cfe:	bf00      	nop
 8009d00:	20002dd0 	.word	0x20002dd0

08009d04 <malloc>:
 8009d04:	4b02      	ldr	r3, [pc, #8]	@ (8009d10 <malloc+0xc>)
 8009d06:	4601      	mov	r1, r0
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	f000 b825 	b.w	8009d58 <_malloc_r>
 8009d0e:	bf00      	nop
 8009d10:	20000064 	.word	0x20000064

08009d14 <sbrk_aligned>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4e0f      	ldr	r6, [pc, #60]	@ (8009d54 <sbrk_aligned+0x40>)
 8009d18:	460c      	mov	r4, r1
 8009d1a:	6831      	ldr	r1, [r6, #0]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	b911      	cbnz	r1, 8009d26 <sbrk_aligned+0x12>
 8009d20:	f000 fe9a 	bl	800aa58 <_sbrk_r>
 8009d24:	6030      	str	r0, [r6, #0]
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f000 fe95 	bl	800aa58 <_sbrk_r>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d103      	bne.n	8009d3a <sbrk_aligned+0x26>
 8009d32:	f04f 34ff 	mov.w	r4, #4294967295
 8009d36:	4620      	mov	r0, r4
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	1cc4      	adds	r4, r0, #3
 8009d3c:	f024 0403 	bic.w	r4, r4, #3
 8009d40:	42a0      	cmp	r0, r4
 8009d42:	d0f8      	beq.n	8009d36 <sbrk_aligned+0x22>
 8009d44:	1a21      	subs	r1, r4, r0
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 fe86 	bl	800aa58 <_sbrk_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d1f2      	bne.n	8009d36 <sbrk_aligned+0x22>
 8009d50:	e7ef      	b.n	8009d32 <sbrk_aligned+0x1e>
 8009d52:	bf00      	nop
 8009d54:	20002dcc 	.word	0x20002dcc

08009d58 <_malloc_r>:
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d5c:	1ccd      	adds	r5, r1, #3
 8009d5e:	f025 0503 	bic.w	r5, r5, #3
 8009d62:	3508      	adds	r5, #8
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	bf38      	it	cc
 8009d68:	250c      	movcc	r5, #12
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	db01      	blt.n	8009d74 <_malloc_r+0x1c>
 8009d70:	42a9      	cmp	r1, r5
 8009d72:	d904      	bls.n	8009d7e <_malloc_r+0x26>
 8009d74:	230c      	movs	r3, #12
 8009d76:	6033      	str	r3, [r6, #0]
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e54 <_malloc_r+0xfc>
 8009d82:	f000 f869 	bl	8009e58 <__malloc_lock>
 8009d86:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8a:	461c      	mov	r4, r3
 8009d8c:	bb44      	cbnz	r4, 8009de0 <_malloc_r+0x88>
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7ff ffbf 	bl	8009d14 <sbrk_aligned>
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	4604      	mov	r4, r0
 8009d9a:	d158      	bne.n	8009e4e <_malloc_r+0xf6>
 8009d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8009da0:	4627      	mov	r7, r4
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	d143      	bne.n	8009e2e <_malloc_r+0xd6>
 8009da6:	2c00      	cmp	r4, #0
 8009da8:	d04b      	beq.n	8009e42 <_malloc_r+0xea>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	4639      	mov	r1, r7
 8009dae:	4630      	mov	r0, r6
 8009db0:	eb04 0903 	add.w	r9, r4, r3
 8009db4:	f000 fe50 	bl	800aa58 <_sbrk_r>
 8009db8:	4581      	cmp	r9, r0
 8009dba:	d142      	bne.n	8009e42 <_malloc_r+0xea>
 8009dbc:	6821      	ldr	r1, [r4, #0]
 8009dbe:	1a6d      	subs	r5, r5, r1
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ffa6 	bl	8009d14 <sbrk_aligned>
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d03a      	beq.n	8009e42 <_malloc_r+0xea>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	442b      	add	r3, r5
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	bb62      	cbnz	r2, 8009e34 <_malloc_r+0xdc>
 8009dda:	f8c8 7000 	str.w	r7, [r8]
 8009dde:	e00f      	b.n	8009e00 <_malloc_r+0xa8>
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	1b52      	subs	r2, r2, r5
 8009de4:	d420      	bmi.n	8009e28 <_malloc_r+0xd0>
 8009de6:	2a0b      	cmp	r2, #11
 8009de8:	d917      	bls.n	8009e1a <_malloc_r+0xc2>
 8009dea:	1961      	adds	r1, r4, r5
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	6025      	str	r5, [r4, #0]
 8009df0:	bf18      	it	ne
 8009df2:	6059      	strne	r1, [r3, #4]
 8009df4:	6863      	ldr	r3, [r4, #4]
 8009df6:	bf08      	it	eq
 8009df8:	f8c8 1000 	streq.w	r1, [r8]
 8009dfc:	5162      	str	r2, [r4, r5]
 8009dfe:	604b      	str	r3, [r1, #4]
 8009e00:	4630      	mov	r0, r6
 8009e02:	f000 f82f 	bl	8009e64 <__malloc_unlock>
 8009e06:	f104 000b 	add.w	r0, r4, #11
 8009e0a:	1d23      	adds	r3, r4, #4
 8009e0c:	f020 0007 	bic.w	r0, r0, #7
 8009e10:	1ac2      	subs	r2, r0, r3
 8009e12:	bf1c      	itt	ne
 8009e14:	1a1b      	subne	r3, r3, r0
 8009e16:	50a3      	strne	r3, [r4, r2]
 8009e18:	e7af      	b.n	8009d7a <_malloc_r+0x22>
 8009e1a:	6862      	ldr	r2, [r4, #4]
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	bf0c      	ite	eq
 8009e20:	f8c8 2000 	streq.w	r2, [r8]
 8009e24:	605a      	strne	r2, [r3, #4]
 8009e26:	e7eb      	b.n	8009e00 <_malloc_r+0xa8>
 8009e28:	4623      	mov	r3, r4
 8009e2a:	6864      	ldr	r4, [r4, #4]
 8009e2c:	e7ae      	b.n	8009d8c <_malloc_r+0x34>
 8009e2e:	463c      	mov	r4, r7
 8009e30:	687f      	ldr	r7, [r7, #4]
 8009e32:	e7b6      	b.n	8009da2 <_malloc_r+0x4a>
 8009e34:	461a      	mov	r2, r3
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	d1fb      	bne.n	8009e34 <_malloc_r+0xdc>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	6053      	str	r3, [r2, #4]
 8009e40:	e7de      	b.n	8009e00 <_malloc_r+0xa8>
 8009e42:	230c      	movs	r3, #12
 8009e44:	6033      	str	r3, [r6, #0]
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 f80c 	bl	8009e64 <__malloc_unlock>
 8009e4c:	e794      	b.n	8009d78 <_malloc_r+0x20>
 8009e4e:	6005      	str	r5, [r0, #0]
 8009e50:	e7d6      	b.n	8009e00 <_malloc_r+0xa8>
 8009e52:	bf00      	nop
 8009e54:	20002dd0 	.word	0x20002dd0

08009e58 <__malloc_lock>:
 8009e58:	4801      	ldr	r0, [pc, #4]	@ (8009e60 <__malloc_lock+0x8>)
 8009e5a:	f7ff b8aa 	b.w	8008fb2 <__retarget_lock_acquire_recursive>
 8009e5e:	bf00      	nop
 8009e60:	20002dc8 	.word	0x20002dc8

08009e64 <__malloc_unlock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	@ (8009e6c <__malloc_unlock+0x8>)
 8009e66:	f7ff b8a5 	b.w	8008fb4 <__retarget_lock_release_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	20002dc8 	.word	0x20002dc8

08009e70 <_Balloc>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	69c6      	ldr	r6, [r0, #28]
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	b976      	cbnz	r6, 8009e98 <_Balloc+0x28>
 8009e7a:	2010      	movs	r0, #16
 8009e7c:	f7ff ff42 	bl	8009d04 <malloc>
 8009e80:	4602      	mov	r2, r0
 8009e82:	61e0      	str	r0, [r4, #28]
 8009e84:	b920      	cbnz	r0, 8009e90 <_Balloc+0x20>
 8009e86:	4b18      	ldr	r3, [pc, #96]	@ (8009ee8 <_Balloc+0x78>)
 8009e88:	4818      	ldr	r0, [pc, #96]	@ (8009eec <_Balloc+0x7c>)
 8009e8a:	216b      	movs	r1, #107	@ 0x6b
 8009e8c:	f000 fdf4 	bl	800aa78 <__assert_func>
 8009e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e94:	6006      	str	r6, [r0, #0]
 8009e96:	60c6      	str	r6, [r0, #12]
 8009e98:	69e6      	ldr	r6, [r4, #28]
 8009e9a:	68f3      	ldr	r3, [r6, #12]
 8009e9c:	b183      	cbz	r3, 8009ec0 <_Balloc+0x50>
 8009e9e:	69e3      	ldr	r3, [r4, #28]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ea6:	b9b8      	cbnz	r0, 8009ed8 <_Balloc+0x68>
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8009eae:	1d72      	adds	r2, r6, #5
 8009eb0:	0092      	lsls	r2, r2, #2
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fdfe 	bl	800aab4 <_calloc_r>
 8009eb8:	b160      	cbz	r0, 8009ed4 <_Balloc+0x64>
 8009eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ebe:	e00e      	b.n	8009ede <_Balloc+0x6e>
 8009ec0:	2221      	movs	r2, #33	@ 0x21
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fdf5 	bl	800aab4 <_calloc_r>
 8009eca:	69e3      	ldr	r3, [r4, #28]
 8009ecc:	60f0      	str	r0, [r6, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e4      	bne.n	8009e9e <_Balloc+0x2e>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	6802      	ldr	r2, [r0, #0]
 8009eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ee4:	e7f7      	b.n	8009ed6 <_Balloc+0x66>
 8009ee6:	bf00      	nop
 8009ee8:	08020751 	.word	0x08020751
 8009eec:	080207d1 	.word	0x080207d1

08009ef0 <_Bfree>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	69c6      	ldr	r6, [r0, #28]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b976      	cbnz	r6, 8009f18 <_Bfree+0x28>
 8009efa:	2010      	movs	r0, #16
 8009efc:	f7ff ff02 	bl	8009d04 <malloc>
 8009f00:	4602      	mov	r2, r0
 8009f02:	61e8      	str	r0, [r5, #28]
 8009f04:	b920      	cbnz	r0, 8009f10 <_Bfree+0x20>
 8009f06:	4b09      	ldr	r3, [pc, #36]	@ (8009f2c <_Bfree+0x3c>)
 8009f08:	4809      	ldr	r0, [pc, #36]	@ (8009f30 <_Bfree+0x40>)
 8009f0a:	218f      	movs	r1, #143	@ 0x8f
 8009f0c:	f000 fdb4 	bl	800aa78 <__assert_func>
 8009f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f14:	6006      	str	r6, [r0, #0]
 8009f16:	60c6      	str	r6, [r0, #12]
 8009f18:	b13c      	cbz	r4, 8009f2a <_Bfree+0x3a>
 8009f1a:	69eb      	ldr	r3, [r5, #28]
 8009f1c:	6862      	ldr	r2, [r4, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f24:	6021      	str	r1, [r4, #0]
 8009f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	08020751 	.word	0x08020751
 8009f30:	080207d1 	.word	0x080207d1

08009f34 <__multadd>:
 8009f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	690d      	ldr	r5, [r1, #16]
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	461e      	mov	r6, r3
 8009f40:	f101 0c14 	add.w	ip, r1, #20
 8009f44:	2000      	movs	r0, #0
 8009f46:	f8dc 3000 	ldr.w	r3, [ip]
 8009f4a:	b299      	uxth	r1, r3
 8009f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f50:	0c1e      	lsrs	r6, r3, #16
 8009f52:	0c0b      	lsrs	r3, r1, #16
 8009f54:	fb02 3306 	mla	r3, r2, r6, r3
 8009f58:	b289      	uxth	r1, r1
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f60:	4285      	cmp	r5, r0
 8009f62:	f84c 1b04 	str.w	r1, [ip], #4
 8009f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f6a:	dcec      	bgt.n	8009f46 <__multadd+0x12>
 8009f6c:	b30e      	cbz	r6, 8009fb2 <__multadd+0x7e>
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dc19      	bgt.n	8009fa8 <__multadd+0x74>
 8009f74:	6861      	ldr	r1, [r4, #4]
 8009f76:	4638      	mov	r0, r7
 8009f78:	3101      	adds	r1, #1
 8009f7a:	f7ff ff79 	bl	8009e70 <_Balloc>
 8009f7e:	4680      	mov	r8, r0
 8009f80:	b928      	cbnz	r0, 8009f8e <__multadd+0x5a>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb8 <__multadd+0x84>)
 8009f86:	480d      	ldr	r0, [pc, #52]	@ (8009fbc <__multadd+0x88>)
 8009f88:	21ba      	movs	r1, #186	@ 0xba
 8009f8a:	f000 fd75 	bl	800aa78 <__assert_func>
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	3202      	adds	r2, #2
 8009f92:	f104 010c 	add.w	r1, r4, #12
 8009f96:	0092      	lsls	r2, r2, #2
 8009f98:	300c      	adds	r0, #12
 8009f9a:	f7ff f80c 	bl	8008fb6 <memcpy>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ffa5 	bl	8009ef0 <_Bfree>
 8009fa6:	4644      	mov	r4, r8
 8009fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fac:	3501      	adds	r5, #1
 8009fae:	615e      	str	r6, [r3, #20]
 8009fb0:	6125      	str	r5, [r4, #16]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb8:	080207c0 	.word	0x080207c0
 8009fbc:	080207d1 	.word	0x080207d1

08009fc0 <__hi0bits>:
 8009fc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	bf36      	itet	cc
 8009fc8:	0403      	lslcc	r3, r0, #16
 8009fca:	2000      	movcs	r0, #0
 8009fcc:	2010      	movcc	r0, #16
 8009fce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fd2:	bf3c      	itt	cc
 8009fd4:	021b      	lslcc	r3, r3, #8
 8009fd6:	3008      	addcc	r0, #8
 8009fd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fdc:	bf3c      	itt	cc
 8009fde:	011b      	lslcc	r3, r3, #4
 8009fe0:	3004      	addcc	r0, #4
 8009fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fe6:	bf3c      	itt	cc
 8009fe8:	009b      	lslcc	r3, r3, #2
 8009fea:	3002      	addcc	r0, #2
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	db05      	blt.n	8009ffc <__hi0bits+0x3c>
 8009ff0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ff4:	f100 0001 	add.w	r0, r0, #1
 8009ff8:	bf08      	it	eq
 8009ffa:	2020      	moveq	r0, #32
 8009ffc:	4770      	bx	lr

08009ffe <__lo0bits>:
 8009ffe:	6803      	ldr	r3, [r0, #0]
 800a000:	4602      	mov	r2, r0
 800a002:	f013 0007 	ands.w	r0, r3, #7
 800a006:	d00b      	beq.n	800a020 <__lo0bits+0x22>
 800a008:	07d9      	lsls	r1, r3, #31
 800a00a:	d421      	bmi.n	800a050 <__lo0bits+0x52>
 800a00c:	0798      	lsls	r0, r3, #30
 800a00e:	bf49      	itett	mi
 800a010:	085b      	lsrmi	r3, r3, #1
 800a012:	089b      	lsrpl	r3, r3, #2
 800a014:	2001      	movmi	r0, #1
 800a016:	6013      	strmi	r3, [r2, #0]
 800a018:	bf5c      	itt	pl
 800a01a:	6013      	strpl	r3, [r2, #0]
 800a01c:	2002      	movpl	r0, #2
 800a01e:	4770      	bx	lr
 800a020:	b299      	uxth	r1, r3
 800a022:	b909      	cbnz	r1, 800a028 <__lo0bits+0x2a>
 800a024:	0c1b      	lsrs	r3, r3, #16
 800a026:	2010      	movs	r0, #16
 800a028:	b2d9      	uxtb	r1, r3
 800a02a:	b909      	cbnz	r1, 800a030 <__lo0bits+0x32>
 800a02c:	3008      	adds	r0, #8
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	0719      	lsls	r1, r3, #28
 800a032:	bf04      	itt	eq
 800a034:	091b      	lsreq	r3, r3, #4
 800a036:	3004      	addeq	r0, #4
 800a038:	0799      	lsls	r1, r3, #30
 800a03a:	bf04      	itt	eq
 800a03c:	089b      	lsreq	r3, r3, #2
 800a03e:	3002      	addeq	r0, #2
 800a040:	07d9      	lsls	r1, r3, #31
 800a042:	d403      	bmi.n	800a04c <__lo0bits+0x4e>
 800a044:	085b      	lsrs	r3, r3, #1
 800a046:	f100 0001 	add.w	r0, r0, #1
 800a04a:	d003      	beq.n	800a054 <__lo0bits+0x56>
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	4770      	bx	lr
 800a050:	2000      	movs	r0, #0
 800a052:	4770      	bx	lr
 800a054:	2020      	movs	r0, #32
 800a056:	4770      	bx	lr

0800a058 <__i2b>:
 800a058:	b510      	push	{r4, lr}
 800a05a:	460c      	mov	r4, r1
 800a05c:	2101      	movs	r1, #1
 800a05e:	f7ff ff07 	bl	8009e70 <_Balloc>
 800a062:	4602      	mov	r2, r0
 800a064:	b928      	cbnz	r0, 800a072 <__i2b+0x1a>
 800a066:	4b05      	ldr	r3, [pc, #20]	@ (800a07c <__i2b+0x24>)
 800a068:	4805      	ldr	r0, [pc, #20]	@ (800a080 <__i2b+0x28>)
 800a06a:	f240 1145 	movw	r1, #325	@ 0x145
 800a06e:	f000 fd03 	bl	800aa78 <__assert_func>
 800a072:	2301      	movs	r3, #1
 800a074:	6144      	str	r4, [r0, #20]
 800a076:	6103      	str	r3, [r0, #16]
 800a078:	bd10      	pop	{r4, pc}
 800a07a:	bf00      	nop
 800a07c:	080207c0 	.word	0x080207c0
 800a080:	080207d1 	.word	0x080207d1

0800a084 <__multiply>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4614      	mov	r4, r2
 800a08a:	690a      	ldr	r2, [r1, #16]
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	429a      	cmp	r2, r3
 800a090:	bfa8      	it	ge
 800a092:	4623      	movge	r3, r4
 800a094:	460f      	mov	r7, r1
 800a096:	bfa4      	itt	ge
 800a098:	460c      	movge	r4, r1
 800a09a:	461f      	movge	r7, r3
 800a09c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a0a4:	68a3      	ldr	r3, [r4, #8]
 800a0a6:	6861      	ldr	r1, [r4, #4]
 800a0a8:	eb0a 0609 	add.w	r6, sl, r9
 800a0ac:	42b3      	cmp	r3, r6
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	bfb8      	it	lt
 800a0b2:	3101      	addlt	r1, #1
 800a0b4:	f7ff fedc 	bl	8009e70 <_Balloc>
 800a0b8:	b930      	cbnz	r0, 800a0c8 <__multiply+0x44>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	4b44      	ldr	r3, [pc, #272]	@ (800a1d0 <__multiply+0x14c>)
 800a0be:	4845      	ldr	r0, [pc, #276]	@ (800a1d4 <__multiply+0x150>)
 800a0c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0c4:	f000 fcd8 	bl	800aa78 <__assert_func>
 800a0c8:	f100 0514 	add.w	r5, r0, #20
 800a0cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0d0:	462b      	mov	r3, r5
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	4543      	cmp	r3, r8
 800a0d6:	d321      	bcc.n	800a11c <__multiply+0x98>
 800a0d8:	f107 0114 	add.w	r1, r7, #20
 800a0dc:	f104 0214 	add.w	r2, r4, #20
 800a0e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0e8:	9302      	str	r3, [sp, #8]
 800a0ea:	1b13      	subs	r3, r2, r4
 800a0ec:	3b15      	subs	r3, #21
 800a0ee:	f023 0303 	bic.w	r3, r3, #3
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	f104 0715 	add.w	r7, r4, #21
 800a0f8:	42ba      	cmp	r2, r7
 800a0fa:	bf38      	it	cc
 800a0fc:	2304      	movcc	r3, #4
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	9103      	str	r1, [sp, #12]
 800a104:	428b      	cmp	r3, r1
 800a106:	d80c      	bhi.n	800a122 <__multiply+0x9e>
 800a108:	2e00      	cmp	r6, #0
 800a10a:	dd03      	ble.n	800a114 <__multiply+0x90>
 800a10c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a110:	2b00      	cmp	r3, #0
 800a112:	d05b      	beq.n	800a1cc <__multiply+0x148>
 800a114:	6106      	str	r6, [r0, #16]
 800a116:	b005      	add	sp, #20
 800a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	f843 2b04 	str.w	r2, [r3], #4
 800a120:	e7d8      	b.n	800a0d4 <__multiply+0x50>
 800a122:	f8b1 a000 	ldrh.w	sl, [r1]
 800a126:	f1ba 0f00 	cmp.w	sl, #0
 800a12a:	d024      	beq.n	800a176 <__multiply+0xf2>
 800a12c:	f104 0e14 	add.w	lr, r4, #20
 800a130:	46a9      	mov	r9, r5
 800a132:	f04f 0c00 	mov.w	ip, #0
 800a136:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a13a:	f8d9 3000 	ldr.w	r3, [r9]
 800a13e:	fa1f fb87 	uxth.w	fp, r7
 800a142:	b29b      	uxth	r3, r3
 800a144:	fb0a 330b 	mla	r3, sl, fp, r3
 800a148:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a14c:	f8d9 7000 	ldr.w	r7, [r9]
 800a150:	4463      	add	r3, ip
 800a152:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a156:	fb0a c70b 	mla	r7, sl, fp, ip
 800a15a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a15e:	b29b      	uxth	r3, r3
 800a160:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a164:	4572      	cmp	r2, lr
 800a166:	f849 3b04 	str.w	r3, [r9], #4
 800a16a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a16e:	d8e2      	bhi.n	800a136 <__multiply+0xb2>
 800a170:	9b01      	ldr	r3, [sp, #4]
 800a172:	f845 c003 	str.w	ip, [r5, r3]
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a17c:	3104      	adds	r1, #4
 800a17e:	f1b9 0f00 	cmp.w	r9, #0
 800a182:	d021      	beq.n	800a1c8 <__multiply+0x144>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	f104 0c14 	add.w	ip, r4, #20
 800a18a:	46ae      	mov	lr, r5
 800a18c:	f04f 0a00 	mov.w	sl, #0
 800a190:	f8bc b000 	ldrh.w	fp, [ip]
 800a194:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a198:	fb09 770b 	mla	r7, r9, fp, r7
 800a19c:	4457      	add	r7, sl
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1a4:	f84e 3b04 	str.w	r3, [lr], #4
 800a1a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1b0:	f8be 3000 	ldrh.w	r3, [lr]
 800a1b4:	fb09 330a 	mla	r3, r9, sl, r3
 800a1b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a1bc:	4562      	cmp	r2, ip
 800a1be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1c2:	d8e5      	bhi.n	800a190 <__multiply+0x10c>
 800a1c4:	9f01      	ldr	r7, [sp, #4]
 800a1c6:	51eb      	str	r3, [r5, r7]
 800a1c8:	3504      	adds	r5, #4
 800a1ca:	e799      	b.n	800a100 <__multiply+0x7c>
 800a1cc:	3e01      	subs	r6, #1
 800a1ce:	e79b      	b.n	800a108 <__multiply+0x84>
 800a1d0:	080207c0 	.word	0x080207c0
 800a1d4:	080207d1 	.word	0x080207d1

0800a1d8 <__pow5mult>:
 800a1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1dc:	4615      	mov	r5, r2
 800a1de:	f012 0203 	ands.w	r2, r2, #3
 800a1e2:	4607      	mov	r7, r0
 800a1e4:	460e      	mov	r6, r1
 800a1e6:	d007      	beq.n	800a1f8 <__pow5mult+0x20>
 800a1e8:	4c25      	ldr	r4, [pc, #148]	@ (800a280 <__pow5mult+0xa8>)
 800a1ea:	3a01      	subs	r2, #1
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1f2:	f7ff fe9f 	bl	8009f34 <__multadd>
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	10ad      	asrs	r5, r5, #2
 800a1fa:	d03d      	beq.n	800a278 <__pow5mult+0xa0>
 800a1fc:	69fc      	ldr	r4, [r7, #28]
 800a1fe:	b97c      	cbnz	r4, 800a220 <__pow5mult+0x48>
 800a200:	2010      	movs	r0, #16
 800a202:	f7ff fd7f 	bl	8009d04 <malloc>
 800a206:	4602      	mov	r2, r0
 800a208:	61f8      	str	r0, [r7, #28]
 800a20a:	b928      	cbnz	r0, 800a218 <__pow5mult+0x40>
 800a20c:	4b1d      	ldr	r3, [pc, #116]	@ (800a284 <__pow5mult+0xac>)
 800a20e:	481e      	ldr	r0, [pc, #120]	@ (800a288 <__pow5mult+0xb0>)
 800a210:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a214:	f000 fc30 	bl	800aa78 <__assert_func>
 800a218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a21c:	6004      	str	r4, [r0, #0]
 800a21e:	60c4      	str	r4, [r0, #12]
 800a220:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a228:	b94c      	cbnz	r4, 800a23e <__pow5mult+0x66>
 800a22a:	f240 2171 	movw	r1, #625	@ 0x271
 800a22e:	4638      	mov	r0, r7
 800a230:	f7ff ff12 	bl	800a058 <__i2b>
 800a234:	2300      	movs	r3, #0
 800a236:	f8c8 0008 	str.w	r0, [r8, #8]
 800a23a:	4604      	mov	r4, r0
 800a23c:	6003      	str	r3, [r0, #0]
 800a23e:	f04f 0900 	mov.w	r9, #0
 800a242:	07eb      	lsls	r3, r5, #31
 800a244:	d50a      	bpl.n	800a25c <__pow5mult+0x84>
 800a246:	4631      	mov	r1, r6
 800a248:	4622      	mov	r2, r4
 800a24a:	4638      	mov	r0, r7
 800a24c:	f7ff ff1a 	bl	800a084 <__multiply>
 800a250:	4631      	mov	r1, r6
 800a252:	4680      	mov	r8, r0
 800a254:	4638      	mov	r0, r7
 800a256:	f7ff fe4b 	bl	8009ef0 <_Bfree>
 800a25a:	4646      	mov	r6, r8
 800a25c:	106d      	asrs	r5, r5, #1
 800a25e:	d00b      	beq.n	800a278 <__pow5mult+0xa0>
 800a260:	6820      	ldr	r0, [r4, #0]
 800a262:	b938      	cbnz	r0, 800a274 <__pow5mult+0x9c>
 800a264:	4622      	mov	r2, r4
 800a266:	4621      	mov	r1, r4
 800a268:	4638      	mov	r0, r7
 800a26a:	f7ff ff0b 	bl	800a084 <__multiply>
 800a26e:	6020      	str	r0, [r4, #0]
 800a270:	f8c0 9000 	str.w	r9, [r0]
 800a274:	4604      	mov	r4, r0
 800a276:	e7e4      	b.n	800a242 <__pow5mult+0x6a>
 800a278:	4630      	mov	r0, r6
 800a27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a27e:	bf00      	nop
 800a280:	0802082c 	.word	0x0802082c
 800a284:	08020751 	.word	0x08020751
 800a288:	080207d1 	.word	0x080207d1

0800a28c <__lshift>:
 800a28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a290:	460c      	mov	r4, r1
 800a292:	6849      	ldr	r1, [r1, #4]
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a29a:	68a3      	ldr	r3, [r4, #8]
 800a29c:	4607      	mov	r7, r0
 800a29e:	4691      	mov	r9, r2
 800a2a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2a4:	f108 0601 	add.w	r6, r8, #1
 800a2a8:	42b3      	cmp	r3, r6
 800a2aa:	db0b      	blt.n	800a2c4 <__lshift+0x38>
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	f7ff fddf 	bl	8009e70 <_Balloc>
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	b948      	cbnz	r0, 800a2ca <__lshift+0x3e>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	4b28      	ldr	r3, [pc, #160]	@ (800a35c <__lshift+0xd0>)
 800a2ba:	4829      	ldr	r0, [pc, #164]	@ (800a360 <__lshift+0xd4>)
 800a2bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a2c0:	f000 fbda 	bl	800aa78 <__assert_func>
 800a2c4:	3101      	adds	r1, #1
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	e7ee      	b.n	800a2a8 <__lshift+0x1c>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f100 0114 	add.w	r1, r0, #20
 800a2d0:	f100 0210 	add.w	r2, r0, #16
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	4553      	cmp	r3, sl
 800a2d8:	db33      	blt.n	800a342 <__lshift+0xb6>
 800a2da:	6920      	ldr	r0, [r4, #16]
 800a2dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2e0:	f104 0314 	add.w	r3, r4, #20
 800a2e4:	f019 091f 	ands.w	r9, r9, #31
 800a2e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2f0:	d02b      	beq.n	800a34a <__lshift+0xbe>
 800a2f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a2f6:	468a      	mov	sl, r1
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	6818      	ldr	r0, [r3, #0]
 800a2fc:	fa00 f009 	lsl.w	r0, r0, r9
 800a300:	4310      	orrs	r0, r2
 800a302:	f84a 0b04 	str.w	r0, [sl], #4
 800a306:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30a:	459c      	cmp	ip, r3
 800a30c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a310:	d8f3      	bhi.n	800a2fa <__lshift+0x6e>
 800a312:	ebac 0304 	sub.w	r3, ip, r4
 800a316:	3b15      	subs	r3, #21
 800a318:	f023 0303 	bic.w	r3, r3, #3
 800a31c:	3304      	adds	r3, #4
 800a31e:	f104 0015 	add.w	r0, r4, #21
 800a322:	4584      	cmp	ip, r0
 800a324:	bf38      	it	cc
 800a326:	2304      	movcc	r3, #4
 800a328:	50ca      	str	r2, [r1, r3]
 800a32a:	b10a      	cbz	r2, 800a330 <__lshift+0xa4>
 800a32c:	f108 0602 	add.w	r6, r8, #2
 800a330:	3e01      	subs	r6, #1
 800a332:	4638      	mov	r0, r7
 800a334:	612e      	str	r6, [r5, #16]
 800a336:	4621      	mov	r1, r4
 800a338:	f7ff fdda 	bl	8009ef0 <_Bfree>
 800a33c:	4628      	mov	r0, r5
 800a33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a342:	f842 0f04 	str.w	r0, [r2, #4]!
 800a346:	3301      	adds	r3, #1
 800a348:	e7c5      	b.n	800a2d6 <__lshift+0x4a>
 800a34a:	3904      	subs	r1, #4
 800a34c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a350:	f841 2f04 	str.w	r2, [r1, #4]!
 800a354:	459c      	cmp	ip, r3
 800a356:	d8f9      	bhi.n	800a34c <__lshift+0xc0>
 800a358:	e7ea      	b.n	800a330 <__lshift+0xa4>
 800a35a:	bf00      	nop
 800a35c:	080207c0 	.word	0x080207c0
 800a360:	080207d1 	.word	0x080207d1

0800a364 <__mcmp>:
 800a364:	690a      	ldr	r2, [r1, #16]
 800a366:	4603      	mov	r3, r0
 800a368:	6900      	ldr	r0, [r0, #16]
 800a36a:	1a80      	subs	r0, r0, r2
 800a36c:	b530      	push	{r4, r5, lr}
 800a36e:	d10e      	bne.n	800a38e <__mcmp+0x2a>
 800a370:	3314      	adds	r3, #20
 800a372:	3114      	adds	r1, #20
 800a374:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a378:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a37c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a380:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a384:	4295      	cmp	r5, r2
 800a386:	d003      	beq.n	800a390 <__mcmp+0x2c>
 800a388:	d205      	bcs.n	800a396 <__mcmp+0x32>
 800a38a:	f04f 30ff 	mov.w	r0, #4294967295
 800a38e:	bd30      	pop	{r4, r5, pc}
 800a390:	42a3      	cmp	r3, r4
 800a392:	d3f3      	bcc.n	800a37c <__mcmp+0x18>
 800a394:	e7fb      	b.n	800a38e <__mcmp+0x2a>
 800a396:	2001      	movs	r0, #1
 800a398:	e7f9      	b.n	800a38e <__mcmp+0x2a>
	...

0800a39c <__mdiff>:
 800a39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	4689      	mov	r9, r1
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	4648      	mov	r0, r9
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	f7ff ffdb 	bl	800a364 <__mcmp>
 800a3ae:	1e05      	subs	r5, r0, #0
 800a3b0:	d112      	bne.n	800a3d8 <__mdiff+0x3c>
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f7ff fd5b 	bl	8009e70 <_Balloc>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	b928      	cbnz	r0, 800a3ca <__mdiff+0x2e>
 800a3be:	4b3f      	ldr	r3, [pc, #252]	@ (800a4bc <__mdiff+0x120>)
 800a3c0:	f240 2137 	movw	r1, #567	@ 0x237
 800a3c4:	483e      	ldr	r0, [pc, #248]	@ (800a4c0 <__mdiff+0x124>)
 800a3c6:	f000 fb57 	bl	800aa78 <__assert_func>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	b003      	add	sp, #12
 800a3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d8:	bfbc      	itt	lt
 800a3da:	464b      	movlt	r3, r9
 800a3dc:	46a1      	movlt	r9, r4
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3e4:	bfba      	itte	lt
 800a3e6:	461c      	movlt	r4, r3
 800a3e8:	2501      	movlt	r5, #1
 800a3ea:	2500      	movge	r5, #0
 800a3ec:	f7ff fd40 	bl	8009e70 <_Balloc>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	b918      	cbnz	r0, 800a3fc <__mdiff+0x60>
 800a3f4:	4b31      	ldr	r3, [pc, #196]	@ (800a4bc <__mdiff+0x120>)
 800a3f6:	f240 2145 	movw	r1, #581	@ 0x245
 800a3fa:	e7e3      	b.n	800a3c4 <__mdiff+0x28>
 800a3fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a400:	6926      	ldr	r6, [r4, #16]
 800a402:	60c5      	str	r5, [r0, #12]
 800a404:	f109 0310 	add.w	r3, r9, #16
 800a408:	f109 0514 	add.w	r5, r9, #20
 800a40c:	f104 0e14 	add.w	lr, r4, #20
 800a410:	f100 0b14 	add.w	fp, r0, #20
 800a414:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a418:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	46d9      	mov	r9, fp
 800a420:	f04f 0c00 	mov.w	ip, #0
 800a424:	9b01      	ldr	r3, [sp, #4]
 800a426:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a42a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	fa1f f38a 	uxth.w	r3, sl
 800a434:	4619      	mov	r1, r3
 800a436:	b283      	uxth	r3, r0
 800a438:	1acb      	subs	r3, r1, r3
 800a43a:	0c00      	lsrs	r0, r0, #16
 800a43c:	4463      	add	r3, ip
 800a43e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a442:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a446:	b29b      	uxth	r3, r3
 800a448:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a44c:	4576      	cmp	r6, lr
 800a44e:	f849 3b04 	str.w	r3, [r9], #4
 800a452:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a456:	d8e5      	bhi.n	800a424 <__mdiff+0x88>
 800a458:	1b33      	subs	r3, r6, r4
 800a45a:	3b15      	subs	r3, #21
 800a45c:	f023 0303 	bic.w	r3, r3, #3
 800a460:	3415      	adds	r4, #21
 800a462:	3304      	adds	r3, #4
 800a464:	42a6      	cmp	r6, r4
 800a466:	bf38      	it	cc
 800a468:	2304      	movcc	r3, #4
 800a46a:	441d      	add	r5, r3
 800a46c:	445b      	add	r3, fp
 800a46e:	461e      	mov	r6, r3
 800a470:	462c      	mov	r4, r5
 800a472:	4544      	cmp	r4, r8
 800a474:	d30e      	bcc.n	800a494 <__mdiff+0xf8>
 800a476:	f108 0103 	add.w	r1, r8, #3
 800a47a:	1b49      	subs	r1, r1, r5
 800a47c:	f021 0103 	bic.w	r1, r1, #3
 800a480:	3d03      	subs	r5, #3
 800a482:	45a8      	cmp	r8, r5
 800a484:	bf38      	it	cc
 800a486:	2100      	movcc	r1, #0
 800a488:	440b      	add	r3, r1
 800a48a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a48e:	b191      	cbz	r1, 800a4b6 <__mdiff+0x11a>
 800a490:	6117      	str	r7, [r2, #16]
 800a492:	e79d      	b.n	800a3d0 <__mdiff+0x34>
 800a494:	f854 1b04 	ldr.w	r1, [r4], #4
 800a498:	46e6      	mov	lr, ip
 800a49a:	0c08      	lsrs	r0, r1, #16
 800a49c:	fa1c fc81 	uxtah	ip, ip, r1
 800a4a0:	4471      	add	r1, lr
 800a4a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a4a6:	b289      	uxth	r1, r1
 800a4a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a4ac:	f846 1b04 	str.w	r1, [r6], #4
 800a4b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4b4:	e7dd      	b.n	800a472 <__mdiff+0xd6>
 800a4b6:	3f01      	subs	r7, #1
 800a4b8:	e7e7      	b.n	800a48a <__mdiff+0xee>
 800a4ba:	bf00      	nop
 800a4bc:	080207c0 	.word	0x080207c0
 800a4c0:	080207d1 	.word	0x080207d1

0800a4c4 <__d2b>:
 800a4c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	460f      	mov	r7, r1
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	ec59 8b10 	vmov	r8, r9, d0
 800a4d0:	4616      	mov	r6, r2
 800a4d2:	f7ff fccd 	bl	8009e70 <_Balloc>
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	b930      	cbnz	r0, 800a4e8 <__d2b+0x24>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	4b23      	ldr	r3, [pc, #140]	@ (800a56c <__d2b+0xa8>)
 800a4de:	4824      	ldr	r0, [pc, #144]	@ (800a570 <__d2b+0xac>)
 800a4e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4e4:	f000 fac8 	bl	800aa78 <__assert_func>
 800a4e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4f0:	b10d      	cbz	r5, 800a4f6 <__d2b+0x32>
 800a4f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4f6:	9301      	str	r3, [sp, #4]
 800a4f8:	f1b8 0300 	subs.w	r3, r8, #0
 800a4fc:	d023      	beq.n	800a546 <__d2b+0x82>
 800a4fe:	4668      	mov	r0, sp
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	f7ff fd7c 	bl	8009ffe <__lo0bits>
 800a506:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a50a:	b1d0      	cbz	r0, 800a542 <__d2b+0x7e>
 800a50c:	f1c0 0320 	rsb	r3, r0, #32
 800a510:	fa02 f303 	lsl.w	r3, r2, r3
 800a514:	430b      	orrs	r3, r1
 800a516:	40c2      	lsrs	r2, r0
 800a518:	6163      	str	r3, [r4, #20]
 800a51a:	9201      	str	r2, [sp, #4]
 800a51c:	9b01      	ldr	r3, [sp, #4]
 800a51e:	61a3      	str	r3, [r4, #24]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bf0c      	ite	eq
 800a524:	2201      	moveq	r2, #1
 800a526:	2202      	movne	r2, #2
 800a528:	6122      	str	r2, [r4, #16]
 800a52a:	b1a5      	cbz	r5, 800a556 <__d2b+0x92>
 800a52c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a530:	4405      	add	r5, r0
 800a532:	603d      	str	r5, [r7, #0]
 800a534:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a538:	6030      	str	r0, [r6, #0]
 800a53a:	4620      	mov	r0, r4
 800a53c:	b003      	add	sp, #12
 800a53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a542:	6161      	str	r1, [r4, #20]
 800a544:	e7ea      	b.n	800a51c <__d2b+0x58>
 800a546:	a801      	add	r0, sp, #4
 800a548:	f7ff fd59 	bl	8009ffe <__lo0bits>
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	6163      	str	r3, [r4, #20]
 800a550:	3020      	adds	r0, #32
 800a552:	2201      	movs	r2, #1
 800a554:	e7e8      	b.n	800a528 <__d2b+0x64>
 800a556:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a55a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a55e:	6038      	str	r0, [r7, #0]
 800a560:	6918      	ldr	r0, [r3, #16]
 800a562:	f7ff fd2d 	bl	8009fc0 <__hi0bits>
 800a566:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a56a:	e7e5      	b.n	800a538 <__d2b+0x74>
 800a56c:	080207c0 	.word	0x080207c0
 800a570:	080207d1 	.word	0x080207d1

0800a574 <__sfputc_r>:
 800a574:	6893      	ldr	r3, [r2, #8]
 800a576:	3b01      	subs	r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	b410      	push	{r4}
 800a57c:	6093      	str	r3, [r2, #8]
 800a57e:	da08      	bge.n	800a592 <__sfputc_r+0x1e>
 800a580:	6994      	ldr	r4, [r2, #24]
 800a582:	42a3      	cmp	r3, r4
 800a584:	db01      	blt.n	800a58a <__sfputc_r+0x16>
 800a586:	290a      	cmp	r1, #10
 800a588:	d103      	bne.n	800a592 <__sfputc_r+0x1e>
 800a58a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a58e:	f7fe bbfe 	b.w	8008d8e <__swbuf_r>
 800a592:	6813      	ldr	r3, [r2, #0]
 800a594:	1c58      	adds	r0, r3, #1
 800a596:	6010      	str	r0, [r2, #0]
 800a598:	7019      	strb	r1, [r3, #0]
 800a59a:	4608      	mov	r0, r1
 800a59c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <__sfputs_r>:
 800a5a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	460f      	mov	r7, r1
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	18d5      	adds	r5, r2, r3
 800a5ac:	42ac      	cmp	r4, r5
 800a5ae:	d101      	bne.n	800a5b4 <__sfputs_r+0x12>
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e007      	b.n	800a5c4 <__sfputs_r+0x22>
 800a5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b8:	463a      	mov	r2, r7
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff ffda 	bl	800a574 <__sfputc_r>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d1f3      	bne.n	800a5ac <__sfputs_r+0xa>
 800a5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5c8 <_vfiprintf_r>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	460d      	mov	r5, r1
 800a5ce:	b09d      	sub	sp, #116	@ 0x74
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	4698      	mov	r8, r3
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	b118      	cbz	r0, 800a5e0 <_vfiprintf_r+0x18>
 800a5d8:	6a03      	ldr	r3, [r0, #32]
 800a5da:	b90b      	cbnz	r3, 800a5e0 <_vfiprintf_r+0x18>
 800a5dc:	f7fe faee 	bl	8008bbc <__sinit>
 800a5e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5e2:	07d9      	lsls	r1, r3, #31
 800a5e4:	d405      	bmi.n	800a5f2 <_vfiprintf_r+0x2a>
 800a5e6:	89ab      	ldrh	r3, [r5, #12]
 800a5e8:	059a      	lsls	r2, r3, #22
 800a5ea:	d402      	bmi.n	800a5f2 <_vfiprintf_r+0x2a>
 800a5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5ee:	f7fe fce0 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 800a5f2:	89ab      	ldrh	r3, [r5, #12]
 800a5f4:	071b      	lsls	r3, r3, #28
 800a5f6:	d501      	bpl.n	800a5fc <_vfiprintf_r+0x34>
 800a5f8:	692b      	ldr	r3, [r5, #16]
 800a5fa:	b99b      	cbnz	r3, 800a624 <_vfiprintf_r+0x5c>
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	4630      	mov	r0, r6
 800a600:	f7fe fc04 	bl	8008e0c <__swsetup_r>
 800a604:	b170      	cbz	r0, 800a624 <_vfiprintf_r+0x5c>
 800a606:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a608:	07dc      	lsls	r4, r3, #31
 800a60a:	d504      	bpl.n	800a616 <_vfiprintf_r+0x4e>
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295
 800a610:	b01d      	add	sp, #116	@ 0x74
 800a612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a616:	89ab      	ldrh	r3, [r5, #12]
 800a618:	0598      	lsls	r0, r3, #22
 800a61a:	d4f7      	bmi.n	800a60c <_vfiprintf_r+0x44>
 800a61c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a61e:	f7fe fcc9 	bl	8008fb4 <__retarget_lock_release_recursive>
 800a622:	e7f3      	b.n	800a60c <_vfiprintf_r+0x44>
 800a624:	2300      	movs	r3, #0
 800a626:	9309      	str	r3, [sp, #36]	@ 0x24
 800a628:	2320      	movs	r3, #32
 800a62a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a62e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a632:	2330      	movs	r3, #48	@ 0x30
 800a634:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7e4 <_vfiprintf_r+0x21c>
 800a638:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a63c:	f04f 0901 	mov.w	r9, #1
 800a640:	4623      	mov	r3, r4
 800a642:	469a      	mov	sl, r3
 800a644:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a648:	b10a      	cbz	r2, 800a64e <_vfiprintf_r+0x86>
 800a64a:	2a25      	cmp	r2, #37	@ 0x25
 800a64c:	d1f9      	bne.n	800a642 <_vfiprintf_r+0x7a>
 800a64e:	ebba 0b04 	subs.w	fp, sl, r4
 800a652:	d00b      	beq.n	800a66c <_vfiprintf_r+0xa4>
 800a654:	465b      	mov	r3, fp
 800a656:	4622      	mov	r2, r4
 800a658:	4629      	mov	r1, r5
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ffa1 	bl	800a5a2 <__sfputs_r>
 800a660:	3001      	adds	r0, #1
 800a662:	f000 80a7 	beq.w	800a7b4 <_vfiprintf_r+0x1ec>
 800a666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a668:	445a      	add	r2, fp
 800a66a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a66c:	f89a 3000 	ldrb.w	r3, [sl]
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 809f 	beq.w	800a7b4 <_vfiprintf_r+0x1ec>
 800a676:	2300      	movs	r3, #0
 800a678:	f04f 32ff 	mov.w	r2, #4294967295
 800a67c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a680:	f10a 0a01 	add.w	sl, sl, #1
 800a684:	9304      	str	r3, [sp, #16]
 800a686:	9307      	str	r3, [sp, #28]
 800a688:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a68c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a68e:	4654      	mov	r4, sl
 800a690:	2205      	movs	r2, #5
 800a692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a696:	4853      	ldr	r0, [pc, #332]	@ (800a7e4 <_vfiprintf_r+0x21c>)
 800a698:	f7f5 fdc2 	bl	8000220 <memchr>
 800a69c:	9a04      	ldr	r2, [sp, #16]
 800a69e:	b9d8      	cbnz	r0, 800a6d8 <_vfiprintf_r+0x110>
 800a6a0:	06d1      	lsls	r1, r2, #27
 800a6a2:	bf44      	itt	mi
 800a6a4:	2320      	movmi	r3, #32
 800a6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6aa:	0713      	lsls	r3, r2, #28
 800a6ac:	bf44      	itt	mi
 800a6ae:	232b      	movmi	r3, #43	@ 0x2b
 800a6b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6ba:	d015      	beq.n	800a6e8 <_vfiprintf_r+0x120>
 800a6bc:	9a07      	ldr	r2, [sp, #28]
 800a6be:	4654      	mov	r4, sl
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	f04f 0c0a 	mov.w	ip, #10
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6cc:	3b30      	subs	r3, #48	@ 0x30
 800a6ce:	2b09      	cmp	r3, #9
 800a6d0:	d94b      	bls.n	800a76a <_vfiprintf_r+0x1a2>
 800a6d2:	b1b0      	cbz	r0, 800a702 <_vfiprintf_r+0x13a>
 800a6d4:	9207      	str	r2, [sp, #28]
 800a6d6:	e014      	b.n	800a702 <_vfiprintf_r+0x13a>
 800a6d8:	eba0 0308 	sub.w	r3, r0, r8
 800a6dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	46a2      	mov	sl, r4
 800a6e6:	e7d2      	b.n	800a68e <_vfiprintf_r+0xc6>
 800a6e8:	9b03      	ldr	r3, [sp, #12]
 800a6ea:	1d19      	adds	r1, r3, #4
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	9103      	str	r1, [sp, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bfbb      	ittet	lt
 800a6f4:	425b      	neglt	r3, r3
 800a6f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a6fa:	9307      	strge	r3, [sp, #28]
 800a6fc:	9307      	strlt	r3, [sp, #28]
 800a6fe:	bfb8      	it	lt
 800a700:	9204      	strlt	r2, [sp, #16]
 800a702:	7823      	ldrb	r3, [r4, #0]
 800a704:	2b2e      	cmp	r3, #46	@ 0x2e
 800a706:	d10a      	bne.n	800a71e <_vfiprintf_r+0x156>
 800a708:	7863      	ldrb	r3, [r4, #1]
 800a70a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a70c:	d132      	bne.n	800a774 <_vfiprintf_r+0x1ac>
 800a70e:	9b03      	ldr	r3, [sp, #12]
 800a710:	1d1a      	adds	r2, r3, #4
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	9203      	str	r2, [sp, #12]
 800a716:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a71a:	3402      	adds	r4, #2
 800a71c:	9305      	str	r3, [sp, #20]
 800a71e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a7f4 <_vfiprintf_r+0x22c>
 800a722:	7821      	ldrb	r1, [r4, #0]
 800a724:	2203      	movs	r2, #3
 800a726:	4650      	mov	r0, sl
 800a728:	f7f5 fd7a 	bl	8000220 <memchr>
 800a72c:	b138      	cbz	r0, 800a73e <_vfiprintf_r+0x176>
 800a72e:	9b04      	ldr	r3, [sp, #16]
 800a730:	eba0 000a 	sub.w	r0, r0, sl
 800a734:	2240      	movs	r2, #64	@ 0x40
 800a736:	4082      	lsls	r2, r0
 800a738:	4313      	orrs	r3, r2
 800a73a:	3401      	adds	r4, #1
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a742:	4829      	ldr	r0, [pc, #164]	@ (800a7e8 <_vfiprintf_r+0x220>)
 800a744:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a748:	2206      	movs	r2, #6
 800a74a:	f7f5 fd69 	bl	8000220 <memchr>
 800a74e:	2800      	cmp	r0, #0
 800a750:	d03f      	beq.n	800a7d2 <_vfiprintf_r+0x20a>
 800a752:	4b26      	ldr	r3, [pc, #152]	@ (800a7ec <_vfiprintf_r+0x224>)
 800a754:	bb1b      	cbnz	r3, 800a79e <_vfiprintf_r+0x1d6>
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	3307      	adds	r3, #7
 800a75a:	f023 0307 	bic.w	r3, r3, #7
 800a75e:	3308      	adds	r3, #8
 800a760:	9303      	str	r3, [sp, #12]
 800a762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a764:	443b      	add	r3, r7
 800a766:	9309      	str	r3, [sp, #36]	@ 0x24
 800a768:	e76a      	b.n	800a640 <_vfiprintf_r+0x78>
 800a76a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a76e:	460c      	mov	r4, r1
 800a770:	2001      	movs	r0, #1
 800a772:	e7a8      	b.n	800a6c6 <_vfiprintf_r+0xfe>
 800a774:	2300      	movs	r3, #0
 800a776:	3401      	adds	r4, #1
 800a778:	9305      	str	r3, [sp, #20]
 800a77a:	4619      	mov	r1, r3
 800a77c:	f04f 0c0a 	mov.w	ip, #10
 800a780:	4620      	mov	r0, r4
 800a782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a786:	3a30      	subs	r2, #48	@ 0x30
 800a788:	2a09      	cmp	r2, #9
 800a78a:	d903      	bls.n	800a794 <_vfiprintf_r+0x1cc>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0c6      	beq.n	800a71e <_vfiprintf_r+0x156>
 800a790:	9105      	str	r1, [sp, #20]
 800a792:	e7c4      	b.n	800a71e <_vfiprintf_r+0x156>
 800a794:	fb0c 2101 	mla	r1, ip, r1, r2
 800a798:	4604      	mov	r4, r0
 800a79a:	2301      	movs	r3, #1
 800a79c:	e7f0      	b.n	800a780 <_vfiprintf_r+0x1b8>
 800a79e:	ab03      	add	r3, sp, #12
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	4b12      	ldr	r3, [pc, #72]	@ (800a7f0 <_vfiprintf_r+0x228>)
 800a7a6:	a904      	add	r1, sp, #16
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7fd fdc3 	bl	8008334 <_printf_float>
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	1c78      	adds	r0, r7, #1
 800a7b2:	d1d6      	bne.n	800a762 <_vfiprintf_r+0x19a>
 800a7b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7b6:	07d9      	lsls	r1, r3, #31
 800a7b8:	d405      	bmi.n	800a7c6 <_vfiprintf_r+0x1fe>
 800a7ba:	89ab      	ldrh	r3, [r5, #12]
 800a7bc:	059a      	lsls	r2, r3, #22
 800a7be:	d402      	bmi.n	800a7c6 <_vfiprintf_r+0x1fe>
 800a7c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7c2:	f7fe fbf7 	bl	8008fb4 <__retarget_lock_release_recursive>
 800a7c6:	89ab      	ldrh	r3, [r5, #12]
 800a7c8:	065b      	lsls	r3, r3, #25
 800a7ca:	f53f af1f 	bmi.w	800a60c <_vfiprintf_r+0x44>
 800a7ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7d0:	e71e      	b.n	800a610 <_vfiprintf_r+0x48>
 800a7d2:	ab03      	add	r3, sp, #12
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	462a      	mov	r2, r5
 800a7d8:	4b05      	ldr	r3, [pc, #20]	@ (800a7f0 <_vfiprintf_r+0x228>)
 800a7da:	a904      	add	r1, sp, #16
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7fe f841 	bl	8008864 <_printf_i>
 800a7e2:	e7e4      	b.n	800a7ae <_vfiprintf_r+0x1e6>
 800a7e4:	08020928 	.word	0x08020928
 800a7e8:	08020932 	.word	0x08020932
 800a7ec:	08008335 	.word	0x08008335
 800a7f0:	0800a5a3 	.word	0x0800a5a3
 800a7f4:	0802092e 	.word	0x0802092e

0800a7f8 <__sflush_r>:
 800a7f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	0716      	lsls	r6, r2, #28
 800a802:	4605      	mov	r5, r0
 800a804:	460c      	mov	r4, r1
 800a806:	d454      	bmi.n	800a8b2 <__sflush_r+0xba>
 800a808:	684b      	ldr	r3, [r1, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dc02      	bgt.n	800a814 <__sflush_r+0x1c>
 800a80e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	dd48      	ble.n	800a8a6 <__sflush_r+0xae>
 800a814:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a816:	2e00      	cmp	r6, #0
 800a818:	d045      	beq.n	800a8a6 <__sflush_r+0xae>
 800a81a:	2300      	movs	r3, #0
 800a81c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a820:	682f      	ldr	r7, [r5, #0]
 800a822:	6a21      	ldr	r1, [r4, #32]
 800a824:	602b      	str	r3, [r5, #0]
 800a826:	d030      	beq.n	800a88a <__sflush_r+0x92>
 800a828:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	0759      	lsls	r1, r3, #29
 800a82e:	d505      	bpl.n	800a83c <__sflush_r+0x44>
 800a830:	6863      	ldr	r3, [r4, #4]
 800a832:	1ad2      	subs	r2, r2, r3
 800a834:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a836:	b10b      	cbz	r3, 800a83c <__sflush_r+0x44>
 800a838:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a83a:	1ad2      	subs	r2, r2, r3
 800a83c:	2300      	movs	r3, #0
 800a83e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a840:	6a21      	ldr	r1, [r4, #32]
 800a842:	4628      	mov	r0, r5
 800a844:	47b0      	blx	r6
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	d106      	bne.n	800a85a <__sflush_r+0x62>
 800a84c:	6829      	ldr	r1, [r5, #0]
 800a84e:	291d      	cmp	r1, #29
 800a850:	d82b      	bhi.n	800a8aa <__sflush_r+0xb2>
 800a852:	4a2a      	ldr	r2, [pc, #168]	@ (800a8fc <__sflush_r+0x104>)
 800a854:	410a      	asrs	r2, r1
 800a856:	07d6      	lsls	r6, r2, #31
 800a858:	d427      	bmi.n	800a8aa <__sflush_r+0xb2>
 800a85a:	2200      	movs	r2, #0
 800a85c:	6062      	str	r2, [r4, #4]
 800a85e:	04d9      	lsls	r1, r3, #19
 800a860:	6922      	ldr	r2, [r4, #16]
 800a862:	6022      	str	r2, [r4, #0]
 800a864:	d504      	bpl.n	800a870 <__sflush_r+0x78>
 800a866:	1c42      	adds	r2, r0, #1
 800a868:	d101      	bne.n	800a86e <__sflush_r+0x76>
 800a86a:	682b      	ldr	r3, [r5, #0]
 800a86c:	b903      	cbnz	r3, 800a870 <__sflush_r+0x78>
 800a86e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a872:	602f      	str	r7, [r5, #0]
 800a874:	b1b9      	cbz	r1, 800a8a6 <__sflush_r+0xae>
 800a876:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a87a:	4299      	cmp	r1, r3
 800a87c:	d002      	beq.n	800a884 <__sflush_r+0x8c>
 800a87e:	4628      	mov	r0, r5
 800a880:	f7ff f9f6 	bl	8009c70 <_free_r>
 800a884:	2300      	movs	r3, #0
 800a886:	6363      	str	r3, [r4, #52]	@ 0x34
 800a888:	e00d      	b.n	800a8a6 <__sflush_r+0xae>
 800a88a:	2301      	movs	r3, #1
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b0      	blx	r6
 800a890:	4602      	mov	r2, r0
 800a892:	1c50      	adds	r0, r2, #1
 800a894:	d1c9      	bne.n	800a82a <__sflush_r+0x32>
 800a896:	682b      	ldr	r3, [r5, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d0c6      	beq.n	800a82a <__sflush_r+0x32>
 800a89c:	2b1d      	cmp	r3, #29
 800a89e:	d001      	beq.n	800a8a4 <__sflush_r+0xac>
 800a8a0:	2b16      	cmp	r3, #22
 800a8a2:	d11e      	bne.n	800a8e2 <__sflush_r+0xea>
 800a8a4:	602f      	str	r7, [r5, #0]
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	e022      	b.n	800a8f0 <__sflush_r+0xf8>
 800a8aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ae:	b21b      	sxth	r3, r3
 800a8b0:	e01b      	b.n	800a8ea <__sflush_r+0xf2>
 800a8b2:	690f      	ldr	r7, [r1, #16]
 800a8b4:	2f00      	cmp	r7, #0
 800a8b6:	d0f6      	beq.n	800a8a6 <__sflush_r+0xae>
 800a8b8:	0793      	lsls	r3, r2, #30
 800a8ba:	680e      	ldr	r6, [r1, #0]
 800a8bc:	bf08      	it	eq
 800a8be:	694b      	ldreq	r3, [r1, #20]
 800a8c0:	600f      	str	r7, [r1, #0]
 800a8c2:	bf18      	it	ne
 800a8c4:	2300      	movne	r3, #0
 800a8c6:	eba6 0807 	sub.w	r8, r6, r7
 800a8ca:	608b      	str	r3, [r1, #8]
 800a8cc:	f1b8 0f00 	cmp.w	r8, #0
 800a8d0:	dde9      	ble.n	800a8a6 <__sflush_r+0xae>
 800a8d2:	6a21      	ldr	r1, [r4, #32]
 800a8d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8d6:	4643      	mov	r3, r8
 800a8d8:	463a      	mov	r2, r7
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b0      	blx	r6
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	dc08      	bgt.n	800a8f4 <__sflush_r+0xfc>
 800a8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f4:	4407      	add	r7, r0
 800a8f6:	eba8 0800 	sub.w	r8, r8, r0
 800a8fa:	e7e7      	b.n	800a8cc <__sflush_r+0xd4>
 800a8fc:	dfbffffe 	.word	0xdfbffffe

0800a900 <_fflush_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	690b      	ldr	r3, [r1, #16]
 800a904:	4605      	mov	r5, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b913      	cbnz	r3, 800a910 <_fflush_r+0x10>
 800a90a:	2500      	movs	r5, #0
 800a90c:	4628      	mov	r0, r5
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	b118      	cbz	r0, 800a91a <_fflush_r+0x1a>
 800a912:	6a03      	ldr	r3, [r0, #32]
 800a914:	b90b      	cbnz	r3, 800a91a <_fflush_r+0x1a>
 800a916:	f7fe f951 	bl	8008bbc <__sinit>
 800a91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d0f3      	beq.n	800a90a <_fflush_r+0xa>
 800a922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a924:	07d0      	lsls	r0, r2, #31
 800a926:	d404      	bmi.n	800a932 <_fflush_r+0x32>
 800a928:	0599      	lsls	r1, r3, #22
 800a92a:	d402      	bmi.n	800a932 <_fflush_r+0x32>
 800a92c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a92e:	f7fe fb40 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 800a932:	4628      	mov	r0, r5
 800a934:	4621      	mov	r1, r4
 800a936:	f7ff ff5f 	bl	800a7f8 <__sflush_r>
 800a93a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a93c:	07da      	lsls	r2, r3, #31
 800a93e:	4605      	mov	r5, r0
 800a940:	d4e4      	bmi.n	800a90c <_fflush_r+0xc>
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	059b      	lsls	r3, r3, #22
 800a946:	d4e1      	bmi.n	800a90c <_fflush_r+0xc>
 800a948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a94a:	f7fe fb33 	bl	8008fb4 <__retarget_lock_release_recursive>
 800a94e:	e7dd      	b.n	800a90c <_fflush_r+0xc>

0800a950 <__swhatbuf_r>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	460c      	mov	r4, r1
 800a954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a958:	2900      	cmp	r1, #0
 800a95a:	b096      	sub	sp, #88	@ 0x58
 800a95c:	4615      	mov	r5, r2
 800a95e:	461e      	mov	r6, r3
 800a960:	da0d      	bge.n	800a97e <__swhatbuf_r+0x2e>
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a968:	f04f 0100 	mov.w	r1, #0
 800a96c:	bf14      	ite	ne
 800a96e:	2340      	movne	r3, #64	@ 0x40
 800a970:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a974:	2000      	movs	r0, #0
 800a976:	6031      	str	r1, [r6, #0]
 800a978:	602b      	str	r3, [r5, #0]
 800a97a:	b016      	add	sp, #88	@ 0x58
 800a97c:	bd70      	pop	{r4, r5, r6, pc}
 800a97e:	466a      	mov	r2, sp
 800a980:	f000 f848 	bl	800aa14 <_fstat_r>
 800a984:	2800      	cmp	r0, #0
 800a986:	dbec      	blt.n	800a962 <__swhatbuf_r+0x12>
 800a988:	9901      	ldr	r1, [sp, #4]
 800a98a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a98e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a992:	4259      	negs	r1, r3
 800a994:	4159      	adcs	r1, r3
 800a996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a99a:	e7eb      	b.n	800a974 <__swhatbuf_r+0x24>

0800a99c <__smakebuf_r>:
 800a99c:	898b      	ldrh	r3, [r1, #12]
 800a99e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9a0:	079d      	lsls	r5, r3, #30
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	d507      	bpl.n	800a9b8 <__smakebuf_r+0x1c>
 800a9a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	6123      	str	r3, [r4, #16]
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	6163      	str	r3, [r4, #20]
 800a9b4:	b003      	add	sp, #12
 800a9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b8:	ab01      	add	r3, sp, #4
 800a9ba:	466a      	mov	r2, sp
 800a9bc:	f7ff ffc8 	bl	800a950 <__swhatbuf_r>
 800a9c0:	9f00      	ldr	r7, [sp, #0]
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f7ff f9c6 	bl	8009d58 <_malloc_r>
 800a9cc:	b948      	cbnz	r0, 800a9e2 <__smakebuf_r+0x46>
 800a9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d2:	059a      	lsls	r2, r3, #22
 800a9d4:	d4ee      	bmi.n	800a9b4 <__smakebuf_r+0x18>
 800a9d6:	f023 0303 	bic.w	r3, r3, #3
 800a9da:	f043 0302 	orr.w	r3, r3, #2
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	e7e2      	b.n	800a9a8 <__smakebuf_r+0xc>
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	6020      	str	r0, [r4, #0]
 800a9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ea:	81a3      	strh	r3, [r4, #12]
 800a9ec:	9b01      	ldr	r3, [sp, #4]
 800a9ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9f2:	b15b      	cbz	r3, 800aa0c <__smakebuf_r+0x70>
 800a9f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f000 f81d 	bl	800aa38 <_isatty_r>
 800a9fe:	b128      	cbz	r0, 800aa0c <__smakebuf_r+0x70>
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	f023 0303 	bic.w	r3, r3, #3
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	431d      	orrs	r5, r3
 800aa10:	81a5      	strh	r5, [r4, #12]
 800aa12:	e7cf      	b.n	800a9b4 <__smakebuf_r+0x18>

0800aa14 <_fstat_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4d07      	ldr	r5, [pc, #28]	@ (800aa34 <_fstat_r+0x20>)
 800aa18:	2300      	movs	r3, #0
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	4608      	mov	r0, r1
 800aa1e:	4611      	mov	r1, r2
 800aa20:	602b      	str	r3, [r5, #0]
 800aa22:	f7f6 fde7 	bl	80015f4 <_fstat>
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	d102      	bne.n	800aa30 <_fstat_r+0x1c>
 800aa2a:	682b      	ldr	r3, [r5, #0]
 800aa2c:	b103      	cbz	r3, 800aa30 <_fstat_r+0x1c>
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	bd38      	pop	{r3, r4, r5, pc}
 800aa32:	bf00      	nop
 800aa34:	20002dc4 	.word	0x20002dc4

0800aa38 <_isatty_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4d06      	ldr	r5, [pc, #24]	@ (800aa54 <_isatty_r+0x1c>)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	4604      	mov	r4, r0
 800aa40:	4608      	mov	r0, r1
 800aa42:	602b      	str	r3, [r5, #0]
 800aa44:	f7f6 fde6 	bl	8001614 <_isatty>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_isatty_r+0x1a>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_isatty_r+0x1a>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20002dc4 	.word	0x20002dc4

0800aa58 <_sbrk_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d06      	ldr	r5, [pc, #24]	@ (800aa74 <_sbrk_r+0x1c>)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4608      	mov	r0, r1
 800aa62:	602b      	str	r3, [r5, #0]
 800aa64:	f7f6 fdee 	bl	8001644 <_sbrk>
 800aa68:	1c43      	adds	r3, r0, #1
 800aa6a:	d102      	bne.n	800aa72 <_sbrk_r+0x1a>
 800aa6c:	682b      	ldr	r3, [r5, #0]
 800aa6e:	b103      	cbz	r3, 800aa72 <_sbrk_r+0x1a>
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
 800aa74:	20002dc4 	.word	0x20002dc4

0800aa78 <__assert_func>:
 800aa78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa7a:	4614      	mov	r4, r2
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4b09      	ldr	r3, [pc, #36]	@ (800aaa4 <__assert_func+0x2c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4605      	mov	r5, r0
 800aa84:	68d8      	ldr	r0, [r3, #12]
 800aa86:	b954      	cbnz	r4, 800aa9e <__assert_func+0x26>
 800aa88:	4b07      	ldr	r3, [pc, #28]	@ (800aaa8 <__assert_func+0x30>)
 800aa8a:	461c      	mov	r4, r3
 800aa8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa90:	9100      	str	r1, [sp, #0]
 800aa92:	462b      	mov	r3, r5
 800aa94:	4905      	ldr	r1, [pc, #20]	@ (800aaac <__assert_func+0x34>)
 800aa96:	f000 f841 	bl	800ab1c <fiprintf>
 800aa9a:	f000 f851 	bl	800ab40 <abort>
 800aa9e:	4b04      	ldr	r3, [pc, #16]	@ (800aab0 <__assert_func+0x38>)
 800aaa0:	e7f4      	b.n	800aa8c <__assert_func+0x14>
 800aaa2:	bf00      	nop
 800aaa4:	20000064 	.word	0x20000064
 800aaa8:	0802097e 	.word	0x0802097e
 800aaac:	08020950 	.word	0x08020950
 800aab0:	08020943 	.word	0x08020943

0800aab4 <_calloc_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	fba1 5402 	umull	r5, r4, r1, r2
 800aaba:	b93c      	cbnz	r4, 800aacc <_calloc_r+0x18>
 800aabc:	4629      	mov	r1, r5
 800aabe:	f7ff f94b 	bl	8009d58 <_malloc_r>
 800aac2:	4606      	mov	r6, r0
 800aac4:	b928      	cbnz	r0, 800aad2 <_calloc_r+0x1e>
 800aac6:	2600      	movs	r6, #0
 800aac8:	4630      	mov	r0, r6
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	220c      	movs	r2, #12
 800aace:	6002      	str	r2, [r0, #0]
 800aad0:	e7f9      	b.n	800aac6 <_calloc_r+0x12>
 800aad2:	462a      	mov	r2, r5
 800aad4:	4621      	mov	r1, r4
 800aad6:	f7fe f9ef 	bl	8008eb8 <memset>
 800aada:	e7f5      	b.n	800aac8 <_calloc_r+0x14>

0800aadc <__ascii_mbtowc>:
 800aadc:	b082      	sub	sp, #8
 800aade:	b901      	cbnz	r1, 800aae2 <__ascii_mbtowc+0x6>
 800aae0:	a901      	add	r1, sp, #4
 800aae2:	b142      	cbz	r2, 800aaf6 <__ascii_mbtowc+0x1a>
 800aae4:	b14b      	cbz	r3, 800aafa <__ascii_mbtowc+0x1e>
 800aae6:	7813      	ldrb	r3, [r2, #0]
 800aae8:	600b      	str	r3, [r1, #0]
 800aaea:	7812      	ldrb	r2, [r2, #0]
 800aaec:	1e10      	subs	r0, r2, #0
 800aaee:	bf18      	it	ne
 800aaf0:	2001      	movne	r0, #1
 800aaf2:	b002      	add	sp, #8
 800aaf4:	4770      	bx	lr
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	e7fb      	b.n	800aaf2 <__ascii_mbtowc+0x16>
 800aafa:	f06f 0001 	mvn.w	r0, #1
 800aafe:	e7f8      	b.n	800aaf2 <__ascii_mbtowc+0x16>

0800ab00 <__ascii_wctomb>:
 800ab00:	4603      	mov	r3, r0
 800ab02:	4608      	mov	r0, r1
 800ab04:	b141      	cbz	r1, 800ab18 <__ascii_wctomb+0x18>
 800ab06:	2aff      	cmp	r2, #255	@ 0xff
 800ab08:	d904      	bls.n	800ab14 <__ascii_wctomb+0x14>
 800ab0a:	228a      	movs	r2, #138	@ 0x8a
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab12:	4770      	bx	lr
 800ab14:	700a      	strb	r2, [r1, #0]
 800ab16:	2001      	movs	r0, #1
 800ab18:	4770      	bx	lr
	...

0800ab1c <fiprintf>:
 800ab1c:	b40e      	push	{r1, r2, r3}
 800ab1e:	b503      	push	{r0, r1, lr}
 800ab20:	4601      	mov	r1, r0
 800ab22:	ab03      	add	r3, sp, #12
 800ab24:	4805      	ldr	r0, [pc, #20]	@ (800ab3c <fiprintf+0x20>)
 800ab26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab2a:	6800      	ldr	r0, [r0, #0]
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	f7ff fd4b 	bl	800a5c8 <_vfiprintf_r>
 800ab32:	b002      	add	sp, #8
 800ab34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab38:	b003      	add	sp, #12
 800ab3a:	4770      	bx	lr
 800ab3c:	20000064 	.word	0x20000064

0800ab40 <abort>:
 800ab40:	b508      	push	{r3, lr}
 800ab42:	2006      	movs	r0, #6
 800ab44:	f000 f82c 	bl	800aba0 <raise>
 800ab48:	2001      	movs	r0, #1
 800ab4a:	f7f6 fd03 	bl	8001554 <_exit>

0800ab4e <_raise_r>:
 800ab4e:	291f      	cmp	r1, #31
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4605      	mov	r5, r0
 800ab54:	460c      	mov	r4, r1
 800ab56:	d904      	bls.n	800ab62 <_raise_r+0x14>
 800ab58:	2316      	movs	r3, #22
 800ab5a:	6003      	str	r3, [r0, #0]
 800ab5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab60:	bd38      	pop	{r3, r4, r5, pc}
 800ab62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab64:	b112      	cbz	r2, 800ab6c <_raise_r+0x1e>
 800ab66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab6a:	b94b      	cbnz	r3, 800ab80 <_raise_r+0x32>
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f000 f831 	bl	800abd4 <_getpid_r>
 800ab72:	4622      	mov	r2, r4
 800ab74:	4601      	mov	r1, r0
 800ab76:	4628      	mov	r0, r5
 800ab78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab7c:	f000 b818 	b.w	800abb0 <_kill_r>
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d00a      	beq.n	800ab9a <_raise_r+0x4c>
 800ab84:	1c59      	adds	r1, r3, #1
 800ab86:	d103      	bne.n	800ab90 <_raise_r+0x42>
 800ab88:	2316      	movs	r3, #22
 800ab8a:	6003      	str	r3, [r0, #0]
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	e7e7      	b.n	800ab60 <_raise_r+0x12>
 800ab90:	2100      	movs	r1, #0
 800ab92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab96:	4620      	mov	r0, r4
 800ab98:	4798      	blx	r3
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	e7e0      	b.n	800ab60 <_raise_r+0x12>
	...

0800aba0 <raise>:
 800aba0:	4b02      	ldr	r3, [pc, #8]	@ (800abac <raise+0xc>)
 800aba2:	4601      	mov	r1, r0
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	f7ff bfd2 	b.w	800ab4e <_raise_r>
 800abaa:	bf00      	nop
 800abac:	20000064 	.word	0x20000064

0800abb0 <_kill_r>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	4d07      	ldr	r5, [pc, #28]	@ (800abd0 <_kill_r+0x20>)
 800abb4:	2300      	movs	r3, #0
 800abb6:	4604      	mov	r4, r0
 800abb8:	4608      	mov	r0, r1
 800abba:	4611      	mov	r1, r2
 800abbc:	602b      	str	r3, [r5, #0]
 800abbe:	f7f6 fcb9 	bl	8001534 <_kill>
 800abc2:	1c43      	adds	r3, r0, #1
 800abc4:	d102      	bne.n	800abcc <_kill_r+0x1c>
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	b103      	cbz	r3, 800abcc <_kill_r+0x1c>
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	bd38      	pop	{r3, r4, r5, pc}
 800abce:	bf00      	nop
 800abd0:	20002dc4 	.word	0x20002dc4

0800abd4 <_getpid_r>:
 800abd4:	f7f6 bca6 	b.w	8001524 <_getpid>

0800abd8 <_init>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	bf00      	nop
 800abdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abde:	bc08      	pop	{r3}
 800abe0:	469e      	mov	lr, r3
 800abe2:	4770      	bx	lr

0800abe4 <_fini>:
 800abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe6:	bf00      	nop
 800abe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abea:	bc08      	pop	{r3}
 800abec:	469e      	mov	lr, r3
 800abee:	4770      	bx	lr
